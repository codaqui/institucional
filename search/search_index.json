{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"P\u00e1gina Inicial","text":""},{"location":"#objetivo","title":"Objetivo","text":"<p>Somos uma Associa\u00e7\u00e3o com o desejo de democratizar o aprendizado tecnol\u00f3gico e aproximar novas gera\u00e7\u00f5es do conte\u00fado t\u00e9cnico.</p> <p>A Associa\u00e7\u00e3o Codaqui ajuda diretamente crian\u00e7as e jovens a aprender programa\u00e7\u00e3o enquanto desenvolvem solu\u00e7\u00f5es para problemas reais. Tudo sem custo algum.</p> <p>Al\u00e9m disso a Codaqui tamb\u00e9m re\u00fane outras comunidades e fornece o apoio para gest\u00e3o de projetos e uma estrutura \"burocr\u00e1tica\" caso o seu projeto n\u00e3o a tenha.</p>"},{"location":"#nossa-solucao","title":"Nossa solu\u00e7\u00e3o","text":"<ul> <li> <p> Autonomia no aprendizado</p> <p>Os alunos percorrem de forma aut\u00f4noma algumas trilhas de aprendizado criadas com a ajuda de especialistas volunt\u00e1rios e semanalmente encontram um mentor para atividades pr\u00e1ticas.</p> </li> <li> <p> Resolu\u00e7\u00e3o de problemas reais</p> <p>Al\u00e9m dos projetos pessoais desenvolvido ao longo do curso, os alunos podem participar de projetos reais, de desenvolvimento de servi\u00e7os e produtos para outras organiza\u00e7\u00f5es sem fins lucrativos, podendo receber uma bolsa financeira.</p> </li> <li> <p> Acesso a computador e internet</p> <p>Incentivamos nossos membros a ocupar espa\u00e7os p\u00fablicos, estabelecendo parcerias para que todos tenham acesso a computador, internet e uma esta\u00e7\u00e3o de estudo.</p> </li> <li> <p> Comunidade de Comunidades</p> <p>Al\u00e9m de todos esses benef\u00edcios, a Codaqui integra outras comunidades em sua estrutura, proporcionando oportunidades adicionais de networking e compartilhamento de conhecimento.</p> </li> </ul>"},{"location":"#comunidades-participantes","title":"Comunidades Participantes","text":"<ul> <li> <p> DevParan\u00e1</p> <p></p> </li> <li> <p> CamposTech</p> <p></p> </li> <li> <p> ElasnoC\u00f3digo</p> <p></p> </li> </ul>"},{"location":"#links-importantes","title":"Links Importantes","text":"<ul> <li> <p> WhatsApp</p> <p></p> </li> <li> <p> Discord</p> <p></p> </li> </ul>"},{"location":"bio/","title":"Link's","text":""},{"location":"bio/#cronograma-da-codaqui-2025","title":"Cronograma da Codaqui 2025","text":"<p>Para acessar o nosso cronograma clique aqui.</p>"},{"location":"bio/#como-encontrar-nossos-ambientes-digitais","title":"Como encontrar nossos ambientes digitais?","text":"<ul> <li> <p> WhatsApp</p> <p>No nosso Whatsapp voc\u00ea acompanha todos os avisos e fica por dentro de qualquer novidade do projeto. </p> <p>(Clique na logo abaixo)</p> <p></p> </li> <li> <p> Discord</p> <p>Em nosso servidor do Discord voc\u00ea pode interagir com outros alunos, tirar d\u00favidas com os mentores e acompanhar todos os encontros virtuais. </p> <p>(Clique na logo abaixo)</p> <p></p> </li> </ul>"},{"location":"blog/","title":"Social","text":"<p>Em desenvolvimento.</p>"},{"location":"conduta/","title":"C\u00f3digo de Conduta da Comunidade Codaqui","text":""},{"location":"conduta/#resumo","title":"Resumo","text":"<p>A Codaqui \u00e9 uma comunidade dedicada a oferecer um ambiente livre de ass\u00e9dio para todos, independentemente do sexo, identidade de g\u00eanero e express\u00e3o, idade, orienta\u00e7\u00e3o sexual, defici\u00eancia, apar\u00eancia f\u00edsica, tamanho corporal, cor de pele, etnia, religi\u00e3o (ou falta dela), nacionalidade, ideologia pol\u00edtica, experi\u00eancia em computa\u00e7\u00e3o e suas tecnologias (ou a falta dela).</p> <p>N\u00f3s n\u00e3o toleramos o ass\u00e9dio aos participantes da comunidade, sob qualquer forma.</p> <p>Linguagem e imagens sexuais n\u00e3o s\u00e3o apropriadas em nenhum espa\u00e7o, incluindo palestras, workshops, festas, discuss\u00f5es do Meetup e outras m\u00eddias on-line. Os participantes que violarem essas regras poder\u00e3o ser expulsos dos Encontros da Codaqui. A puni\u00e7\u00e3o pode ir desde a expuls\u00e3o do membro, at\u00e9 ser banido de eventos futuros promovidos pela Codaqui e comunidades adjacentes.</p>"},{"location":"conduta/#versao-completa","title":"Vers\u00e3o Completa","text":""},{"location":"conduta/#1-proposta","title":"1. Proposta","text":"<p>O objetivo principal da Comunidade Codaqui \u00e9 incluir o maior n\u00famero de participantes, com as origens mais variadas e diversas poss\u00edveis. Como tal, estamos comprometidos em proporcionar um ambiente amig\u00e1vel, seguro e acolhedor para todos, independentemente do sexo, identidade de g\u00eanero e express\u00e3o, idade, orienta\u00e7\u00e3o sexual, defici\u00eancia, apar\u00eancia f\u00edsica, tamanho corporal, cor de pele, etnia, religi\u00e3o (ou falta dela), tamanho do corpo, etnia, nacionalidade, ideologia pol\u00edtica, experi\u00eancia em computa\u00e7\u00e3o e suas tecnologias (ou a falta dela).</p> <p>Este c\u00f3digo de conduta delineia nossas expectativas para todos aqueles que participam de nossa comunidade, bem como as conseq\u00fc\u00eancias de um comportamento inaceit\u00e1vel.</p> <p>Convidamos todos aqueles que participam da Codaqui a nos ajudar a criar experi\u00eancias seguras e positivas para todos.</p>"},{"location":"conduta/#2-cidadania","title":"2. Cidadania","text":"<p>Um objetivo suplementar deste C\u00f3digo de Conduta \u00e9 aumentar a cidadania aberta [Origem/Cultura/Tecnologia], incentivando os participantes a reconhecer e fortalecer as rela\u00e7\u00f5es entre nossas a\u00e7\u00f5es e seus efeitos em nossa comunidade.</p> <p>As comunidades espelham as sociedades nas quais elas existem e a a\u00e7\u00e3o positiva \u00e9 essencial para contrabalan\u00e7ar as muitas formas de desigualdade e abusos de poder que existem na sociedade.</p> <p>Se voc\u00ea v\u00ea algu\u00e9m que est\u00e1 fazendo um esfor\u00e7o extra para garantir que nossa comunidade seja acolhedora, amig\u00e1vel e incentiva todos os participantes a contribuir em toda a extens\u00e3o, queremos saber.</p>"},{"location":"conduta/#3-comportamento-esperado","title":"3. Comportamento Esperado","text":"<p>Os seguintes comportamentos s\u00e3o esperados e solicitados de todos os membros da comunidade:</p> <ul> <li>Participe de uma maneira aut\u00eantica e ativa. Ao fazer isso, voc\u00ea contribui para a sa\u00fade e a longevidade dessa comunidade.</li> <li>Exercite considera\u00e7\u00e3o e respeito em seu discurso e a\u00e7\u00f5es.</li> <li>Tente colabora\u00e7\u00e3o antes do conflito.</li> <li>Abster-se de comportamentos e discursos humilhantes, discriminat\u00f3rios ou de ass\u00e9dio.</li> <li>Esteja atento ao seu ambiente e aos seus colegas participantes. Alertar os l\u00edderes da comunidade se voc\u00ea notar uma situa\u00e7\u00e3o perigosa, algu\u00e9m em perigo ou viola\u00e7\u00f5es deste C\u00f3digo de Conduta, mesmo que pare\u00e7am irrelevantes.</li> <li>Lembre-se de que os locais de eventos comunit\u00e1rios podem ser compartilhados com os membros do p\u00fablico, ent\u00e3o por favor, seja respeitoso com todos os clientes desses locais.</li> </ul>"},{"location":"conduta/#4-comportamento-inaceitavel","title":"4. Comportamento Inaceit\u00e1vel","text":"<p>Os comportamentos a seguir s\u00e3o considerados ass\u00e9dio e s\u00e3o inaceit\u00e1veis em nossa comunidade:</p> <ul> <li>Viol\u00eancia, amea\u00e7as de viol\u00eancia ou linguagem violenta dirigida contra outra pessoa.</li> <li>Piadas e linguagem sexistas, racistas, homof\u00f3bicas, transf\u00f3bicas, capazes ou de outra forma discriminat\u00f3rias.</li> <li>Postar ou exibir material sexualmente expl\u00edcito ou violento.</li> <li>Postar ou amea\u00e7ar postar informa\u00e7\u00f5es de identifica\u00e7\u00e3o pessoal de outras pessoas (\"doxing\").</li> <li>Insultos pessoais, particularmente aqueles relacionados a g\u00eanero, orienta\u00e7\u00e3o sexual, ra\u00e7a, religi\u00e3o ou defici\u00eancia.</li> <li>Fotografia ou grava\u00e7\u00e3o inadequada.</li> <li>Contato f\u00edsico inadequado. Voc\u00ea deve ter o consentimento de algu\u00e9m antes de toc\u00e1-lo.</li> <li>Aten\u00e7\u00e3o sexual indesejada. Isso inclui coment\u00e1rios sexualizados ou piadas; toque sexual inapropriado, tateando e avan\u00e7os sexuais indesej\u00e1veis.</li> <li>Intimida\u00e7\u00e3o deliberada, persegui\u00e7\u00e3o ou acompanhamento (online ou pessoalmente).</li> <li>Defendendo ou incentivando qualquer um dos comportamentos acima.</li> <li>Interrup\u00e7\u00e3o sustentada de eventos da comunidade, incluindo palestras e apresenta\u00e7\u00f5es.</li> </ul>"},{"location":"conduta/#41-assedio","title":"4.1 Ass\u00e9dio","text":"<p>O ass\u00e9dio inclui coment\u00e1rios verbais ofensivos relacionados a g\u00eanero, identidade e express\u00e3o de g\u00eanero, idade, orienta\u00e7\u00e3o sexual, defici\u00eancia, apar\u00eancia f\u00edsica, tamanho corporal, ra\u00e7a, etnia, nacionalidade, religi\u00e3o ou opini\u00f5es pol\u00edticas, imagens sexuais em espa\u00e7os p\u00fablicos, intimida\u00e7\u00e3o deliberada, persegui\u00e7\u00e3o , fotografia ou grava\u00e7\u00e3o de \u00e1udio / v\u00eddeo contra consentimento razo\u00e1vel, interrup\u00e7\u00e3o sustentada de palestras ou outros eventos, contato f\u00edsico inadequado e aten\u00e7\u00e3o sexual indesejada.</p> <ul> <li>Os participantes solicitados a parar com comportamento de ass\u00e9dio devem cumprir imediatamente.</li> <li>Todo e qualquer material criado para a Comunidade do Codaqui devem respeitar esse c\u00f3digo de conduta.</li> <li>Se voc\u00ea estiver sendo assediado, ou observar algum comportamento onde algu\u00e9m est\u00e1 sendo assediado ou tenha qualquer outra preocupa\u00e7\u00e3o, entre em contato com um membro da equipe do Codaqui imediatamente.</li> </ul>"},{"location":"conduta/#42-fotografia","title":"4.2 Fotografia","text":"<p>A fotografia \u00e9 incentivada, mas os outros participantes devem ter uma chance razo\u00e1vel de n\u00e3o serem fotografados. Se eles se opuserem a tirar sua foto, cumpram com o pedido deles. \u00c9 inadequado tirar fotografias em contextos em que as pessoas t\u00eam uma expectativa razo\u00e1vel de privacidade (nos banheiros ou onde os participantes est\u00e3o dormindo, se aplic\u00e1vel).</p>"},{"location":"conduta/#5-consequencias-do-compartamento-inaceitavel","title":"5. Consequ\u00eancias do Compartamento Inaceit\u00e1vel","text":"<p>Comportamento inaceit\u00e1vel de qualquer membro da comunidade, incluindo patrocinadores e aqueles com autoridade decis\u00f3ria, n\u00e3o ser\u00e1 tolerado.</p> <p>Ressaltamos: Qualquer pedido para interromper um comportamento inadequado deve ser cumprido imediatamente.</p> <p>Se um membro da comunidade se envolver em um comportamento inaceit\u00e1vel, os organizadores da comunidade podem tomar qualquer medida que considerem apropriada, incluindo proibi\u00e7\u00e3o tempor\u00e1ria ou expuls\u00e3o permanente da comunidade sem aviso pr\u00e9vio (e sem reembolso no caso de um evento pago).</p>"},{"location":"conduta/#6-diretrizes-para-reportar","title":"6. Diretrizes para Reportar","text":"<p>Se voc\u00ea estiver sujeito ou testemunhar um comportamento inaceit\u00e1vel ou tiver outras preocupa\u00e7\u00f5es, notifique o organizador da comunidade o quanto antes. E-mail</p> <p>Al\u00e9m disso, os organizadores da comunidade est\u00e3o dispon\u00edveis para ajudar os membros da comunidade a se engajarem com a aplica\u00e7\u00e3o da lei local ou, de outra forma, ajudar aqueles que experimentam um comportamento inaceit\u00e1vel a se sentirem seguros. No contexto de eventos em pessoa, os organizadores tamb\u00e9m fornecer\u00e3o acompanhantes conforme desejado pela pessoa que est\u00e1 passando por dificuldades.</p> <p>N\u00f3s valorizamos sua presen\u00e7a</p>"},{"location":"conduta/#7-concluindo","title":"7. Concluindo","text":"<p>Esperamos que todos os participantes da comunidade (contribuintes, remunerados ou n\u00e3o; patrocinadores; e outros convidados) sigam este C\u00f3digo de Conduta em todos os locais da comunidade - online e presencial - bem como em todas as comunica\u00e7\u00f5es pessoais da comunidade o neg\u00f3cio.</p> <p>Este c\u00f3digo de conduta e seus procedimentos relacionados tamb\u00e9m se aplicam ao comportamento inaceit\u00e1vel que ocorre fora do escopo das atividades comunit\u00e1rias, quando esse comportamento tem o potencial de afetar adversamente a seguran\u00e7a e o bem-estar dos membros da comunidade.</p>"},{"location":"conduta/#referencias","title":"Refer\u00eancias","text":"<p>Este c\u00f3digo de conduta \u00e9 distribu\u00eddo sob uma licen\u00e7a Creative Commons Attribution-ShareAlike, feito pela comunidade do Codaqui. Com base e revis\u00f5es a partir do The Hack Day Manifesto, CitizenCode, Conduta DevParan\u00e1, Hack Code of Conduct, C\u00f3digo de Conduta do Django, Politica Anti-Ass\u00e9dio do Geek Feminism.</p> <p>Agradecemos a toda comunidade de Educa\u00e7\u00e3o e Programa\u00e7\u00e3o </p>"},{"location":"contact/","title":"Contato","text":"<p> Entre em contato por E-mail</p> <p> Entre em contato pelo Instagram</p> <p> Entre em contato pelo LinkedIn</p> <p> Entre em contato pelo Twitter</p>"},{"location":"ong/","title":"Transforme seu Projeto ou Comunidade com Nosso Programa de Apoio Institucional","text":"<p>Capacite sua comunidade, amplie seu impacto e aumente seu alcance com nosso programa de apoio institucional e suporte especializado.</p>"},{"location":"ong/#comunidades","title":"Comunidades","text":""},{"location":"ong/#codaqui","title":"Codaqui","text":"<p>Codaqui.dev \u00e9 uma escola de programa\u00e7\u00e3o sem fins lucrativos que apoia jovens que desejam aprender a desenvolver produtos tecnol\u00f3gicos mas n\u00e3o possuem acesso a uma educa\u00e7\u00e3o tecnol\u00f3gica por outros meios.</p> <p>Com foco em inclus\u00e3o, diversidade e aprendizado cont\u00ednuo, a Codaqui.dev organiza meetups, trilhas de aprendizado, oficinas e outras atividades que aproximam profissionais experientes, iniciantes e curiosos do universo da programa\u00e7\u00e3o.</p> <p>Se voc\u00ea est\u00e1 come\u00e7ando na \u00e1rea ou j\u00e1 tem experi\u00eancia e quer trocar ideias com pessoas engajadas e acolhedoras, a Codaqui.dev \u00e9 o lugar certo pra voc\u00ea.</p>"},{"location":"ong/#devparana","title":"DevParana","text":"<p>DevParan\u00e1 \u00e9 uma comunidade sem fins lucrativos que conecta pessoas desenvolvedoras de software em todo o estado do Paran\u00e1. Fundada em 2015 e sediada em Maring\u00e1, a iniciativa nasceu com o prop\u00f3sito de fortalecer o ecossistema tecnol\u00f3gico local por meio da colabora\u00e7\u00e3o, da troca de experi\u00eancias e da promo\u00e7\u00e3o do conhecimento.</p> <p>Ao longo dos anos, o DevParan\u00e1 tem sido palco de eventos marcantes como meetups, workshops, hackathons e a confer\u00eancia anual DevPR Conf, que re\u00fane centenas de profissionais, estudantes e entusiastas da tecnologia. Com foco em diversidade, inova\u00e7\u00e3o e impacto regional, a comunidade promove encontros presenciais e online que estimulam o crescimento profissional e o networking entre seus participantes.</p>"},{"location":"ong/#elas-no-codigo","title":"Elas no c\u00f3digo","text":"<p>Elas no c\u00f3digo \u00e9 uma iniciativa que tem como objetivo inserir mulheres no setor da tecnologia e apoiar as que j\u00e1 est\u00e3o, empoderando-as e oferecendo mais oportunidades de conhecimento.</p>"},{"location":"ong/#campos-tech","title":"Campos Tech","text":"<p>CamposTech \u00e9 um espa\u00e7o colaborativo dedicado \u00e0 inova\u00e7\u00e3o, tecnologia e empreendedorismo em Ponta Grossa (PR). Seu objetivo \u00e9 fomentar conex\u00f5es entre estudantes, profissionais, empresas e entusiastas da \u00e1rea tech, promovendo eventos, capacita\u00e7\u00f5es, networking e projetos que impulsionam o ecossistema local. </p> <p>Com uma abordagem inclusiva e din\u00e2mica, a Compos Tech busca transformar ideias em solu\u00e7\u00f5es reais e fortalecer o desenvolvimento tecnol\u00f3gico da regi\u00e3o.</p>"},{"location":"ong/#como-podemos-ajudar","title":"Como podemos ajudar","text":"<p>Nosso suporte institucional \u00e9 desenvolvido para atender \u00e0s necessidades \u00fanicas do seu projeto social. Oferecemos uma gama de benef\u00edcios, incluindo:</p> <ul> <li> <p>Recursos Exclusivos: Acesso a ferramentas e materiais de apoio, al\u00e9m de um suporte completo para garantir que todos os aspectos do seu projeto sejam bem geridos e alinhados.</p> </li> <li> <p>Mentoria Especializada: Orienta\u00e7\u00e3o de especialistas nas \u00e1reas de tecnologia, desenvolvimento, jur\u00eddico e cont\u00e1bil.</p> </li> <li> <p>Conex\u00e3o: Acesso a uma rede de contatos com profissionais e l\u00edderes da ind\u00fastria, ampliando suas oportunidades e promovendo sua expans\u00e3o.</p> </li> <li> <p>Apoio Financeiro: Oportunidades de financiamento e patroc\u00ednio para apoiar seus projetos e eventos.</p> </li> <li> <p>Visibilidade: Assist\u00eancia na promo\u00e7\u00e3o da sua comunidade e das suas iniciativas, aumentando sua visibilidade e alcance.</p> </li> </ul>"},{"location":"ong/#como-funciona","title":"Como funciona","text":"<p>Envie um e-mail para contato@codaqui.dev, participe de uma reuni\u00e3o no nosso Discord e venha conhecer nosso WhatsApp.</p>"},{"location":"ong/#transparencia","title":"Transpar\u00eancia","text":"<p>Voc\u00ea pode consultar os nossos demonstrativos financeiros atrav\u00e9s dp Open Collective e as atas das reuni\u00f5es por meio do Google Drive, caso tenha alguma d\u00favida comente o arquivo ou entre em contato pelo e-mail contato@codaqui.dev.</p>"},{"location":"pais_responsaveis/","title":"CODAQUI - Escola de Tecnologia","text":""},{"location":"pais_responsaveis/#nossa-metodologia","title":"Nossa metodologia","text":"<p>A base pedag\u00f3gica das aulas foi desenvolvida para atender seu p\u00fablico-alvo, pessoas com pouco ou nenhum conhecimento na \u00e1rea, que desejam aprender programa\u00e7\u00e3o e possivelmente trilhar um caminho empreendedor.</p>"},{"location":"pais_responsaveis/#aprendizagem-ativa","title":"Aprendizagem ativa","text":"<p>Na Codaqui o professor atua como um facilitador do processo de aprendizagem, propondo desafios a cada aula e ajudando os alunos a criarem condi\u00e7\u00f5es para que eles pr\u00f3prios se apropriem dos conceitos que precisam e resolvam suas quest\u00f5es. \u00c9 assim que nascem as trilhas de conte\u00fado, que  s\u00e3o constru\u00eddas por todos conforme surge a necessidade.</p> <p>Nesta pr\u00e1tica, que se baseia nos conceitos da aprendizagem ativa, o conhecimento constru\u00eddo vai se tornando s\u00f3lido para que novas constru\u00e7\u00f5es se sobreponham, conduzindo para uma constru\u00e7\u00e3o firme e profunda do conhecimento.</p>"},{"location":"pais_responsaveis/#aprendizagem-na-pratica","title":"Aprendizagem na pr\u00e1tica","text":"<p>Os alunos desenvolvem projetos pr\u00e1ticos desde os conceitos mais b\u00e1sicos, resolvendo problemas reais e de interesse deles. Os projetos, por se originarem das necessidades e curiosidades do pr\u00f3prio aluno, trazem para o aluno maior responsabilidade. Eles saem da posi\u00e7\u00e3o de sujeitos passivos e se colocam como participantes ativos da aprendizagem.</p> <p>O trabalho em grupo, sintonizado e equilibrado com o trabalho individual para realizar um projeto, ajuda a desenvolver a responsabilidade que se assume para o cumprimento dos objetivos. Neste sentido, desejamos realizar parceria com outras ONGs e promover educa\u00e7\u00e3o e colabora\u00e7\u00e3o com projetos abertos.</p>"},{"location":"pais_responsaveis/#alunos-embaixadores","title":"Alunos Embaixadores","text":"<p>Nossa proposta pedag\u00f3gica contempla a forma\u00e7\u00e3o de grupos heterog\u00eaneos, para que um aluno com mais conhecimento e tempo de casa - o embaixador - possa ser motriz para conduzir projetos e pequenas atividades junto a outros alunos que ainda est\u00e3o no in\u00edcio de seu desenvolvimento. Desta forma, a cada ano podemos aumentar o alcance dessa rede de alunos embaixadores, integrando-os aos novos alunos e elevando a intera\u00e7\u00e3o.</p>"},{"location":"pais_responsaveis/#algumas-referencias","title":"Algumas refer\u00eancias","text":"<p>\u00c1LVAREZ MEND\u00c9Z, J. M. Avaliar para conhecer, examinar para excluir. trad.  Magda Schwartzhaupt Chaves, Porto Alegre: Artmed Editora, 2002</p> <p>GADOTTI, M. Hist\u00f3ria das ideias pedag\u00f3gicas. 8\u00aa edi\u00e7\u00e3o \u2013 S\u00e3o Paulo: Editora \u00c1tica, 2003</p> <p>MARTINS, R. S.; LORENZET, D. Ensino por Projeto como Estrat\u00e9gia de Aprendizagem em Curso T\u00e9cnico de Mecatr\u00f4nica. Revista Brasileira de Educa\u00e7\u00e3o Profissional e Tecnol\u00f3gica, v. 2, n. 21, p. e11943, dez. 2021. ISSN 2447-1801.</p> <p>SALOM\u00c3O, G. A Educa\u00e7\u00e3o dos Adolescentes. artigo do site  https://larmontessori.com/2012/02/17/a-educacao-dos-adolescentes/  17/02/2012 acessado em 20/09/21</p> <p>VYGOTSKY, L. S. Pensamento e Linguagem. S\u00e3o Paulo: Martins Fontes, 1998</p>"},{"location":"projetos/","title":"Projetos","text":"<p>A Codaqui \u00e9 uma comunidade viva, com o objetivo de aproximar as novas gera\u00e7\u00f5es do conte\u00fado t\u00e9cnico. Entendemos que criar um projeto do zero pode ser muitas vezes dif\u00edcil, por isso a comunidade existe. Abaixo est\u00e3o alguns projetos que a Codaqui mant\u00e9m, em car\u00e1ter de laborat\u00f3rio ou de produ\u00e7\u00e3o, e que voc\u00ea pode contribuir.</p>"},{"location":"projetos/#como-contribuir","title":"Como Contribuir?","text":"<p>Se voc\u00ea deseja contribuir com algum projeto, siga os seguintes passos:</p> <ol> <li> <p>Escolha um projeto que voc\u00ea gostaria de contribuir.</p> </li> <li> <p>Abra uma issue no reposit\u00f3rio do projeto, descrevendo o que voc\u00ea gostaria de fazer.</p> </li> <li> <p>Aguarde a aprova\u00e7\u00e3o da equipe.</p> </li> </ol>"},{"location":"projetos/#lista-de-projetos","title":"Lista de Projetos","text":"<ul> <li> <p> Boletim Di\u00e1rio de Seguran\u00e7a</p> <p>Todos os dias, as 10h da manh\u00e3, um bot solta um boletim com not\u00edcias sobre seguran\u00e7a da informa\u00e7\u00e3o.</p> <p> Ver mais...</p> </li> <li> <p> Laborat\u00f3rio de Data Analytics</p> <p>A Codaqui possui um laborat\u00f3rio para aprender Data Analytics, voc\u00ea pode testar os conceitos e brincar com Python.</p> <p> Ver mais...</p> </li> <li> <p> Secret Sharing</p> <p>Um simples gerador e compartilhador de senhas para mostrar a capacidade do PiPing Server.</p> <p> Ver mais...</p> </li> <li> <p> GitHub Action FreeDiskSpace</p> <p>Uma GitHub Action que tem a capacidade de limpar o espa\u00e7o em disco dos Runners SaaS do GitHub.</p> <p> Ver mais...</p> </li> <li> <p> GitHub Action CODEOWNERs Super Power</p> <p>Uma GitHub Action que aumenta o poder do arquivo <code>CODEOWNERS</code> dentro do GitHub.</p> <p> Ver mais...</p> </li> <li> <p> Laborat\u00f3rio de Terraform</p> <p>Um laborat\u00f3rio para estudar Terraform dentro da Codaqui.</p> <p> Ver mais...</p> </li> <li> <p> Tutor</p> <p>Uma aplica\u00e7\u00e3o para explorar Python e mais conceitos do mundo de Desenvolvimento.</p> <p> Ver mais...</p> </li> <li> <p> Copilot Dashboard</p> <p>Um painel para visualizar e analisar dados de uso do GitHub Copilot.</p> <p> Ver mais...</p> </li> </ul>"},{"location":"regex/","title":"Express\u00f5es Regulares (Regex)","text":""},{"location":"regex/#o-que-sao-expressoes-regulares","title":"O que s\u00e3o Express\u00f5es Regulares?","text":"<p>As Express\u00f5es Regulares (ou Regex) s\u00e3o sequ\u00eancias de caracteres que formam um padr\u00e3o de busca. Elas s\u00e3o uma ferramenta poderosa para encontrar, validar, extrair e manipular texto de forma precisa e eficiente.</p>"},{"location":"regex/#conceitos-basicos","title":"Conceitos B\u00e1sicos","text":""},{"location":"regex/#metacaracteres-fundamentais","title":"Metacaracteres Fundamentais","text":"<ul> <li><code>.</code> - Corresponde a qualquer caractere (exceto quebra de linha)</li> <li><code>*</code> - Zero ou mais ocorr\u00eancias do caractere anterior</li> <li><code>+</code> - Uma ou mais ocorr\u00eancias do caractere anterior</li> <li><code>?</code> - Zero ou uma ocorr\u00eancia do caractere anterior</li> <li><code>^</code> - In\u00edcio da linha</li> <li><code>$</code> - Fim da linha</li> <li><code>[]</code> - Conjunto de caracteres</li> <li><code>()</code> - Grupo de captura</li> <li><code>|</code> - Operador OU</li> </ul>"},{"location":"regex/#classes-de-caracteres","title":"Classes de Caracteres","text":"<ul> <li><code>\\d</code> - Qualquer d\u00edgito (0-9)</li> <li><code>\\w</code> - Qualquer caractere de palavra (a-z, A-Z, 0-9, _)</li> <li><code>\\s</code> - Qualquer espa\u00e7o em branco</li> <li><code>\\D</code> - Qualquer n\u00e3o-d\u00edgito</li> <li><code>\\W</code> - Qualquer n\u00e3o-caractere de palavra</li> <li><code>\\S</code> - Qualquer n\u00e3o-espa\u00e7o em branco</li> </ul>"},{"location":"regex/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":"<ul> <li> <p> Valida\u00e7\u00e3o de E-mail</p> <p>Padr\u00e3o b\u00e1sico para validar endere\u00e7os de e-mail:</p> <pre><code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n</code></pre> <p>Explica\u00e7\u00e3o: - <code>^</code> - In\u00edcio da string - <code>[a-zA-Z0-9._%+-]+</code> - Um ou mais caracteres v\u00e1lidos antes do @ - <code>@</code> - O s\u00edmbolo @ literal - <code>[a-zA-Z0-9.-]+</code> - Um ou mais caracteres v\u00e1lidos para o dom\u00ednio - <code>\\.</code> - O ponto literal - <code>[a-zA-Z]{2,}</code> - Pelo menos 2 letras para a extens\u00e3o - <code>$</code> - Fim da string</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> Telefone Brasileiro</p> <p>Padr\u00e3o para telefones brasileiros com DDD:</p> <pre><code>^\\(?([1-9]{2})\\)?\\s?9?[0-9]{4}-?[0-9]{4}$\n</code></pre> <p>Explica\u00e7\u00e3o: - <code>^\\(?</code> - In\u00edcio, par\u00eantese opcional - <code>([1-9]{2})</code> - DDD com 2 d\u00edgitos de 1-9 - <code>\\)?\\s?</code> - Par\u00eantese de fechamento e espa\u00e7o opcionais - <code>9?</code> - Nono d\u00edgito opcional (celular) - <code>[0-9]{4}-?[0-9]{4}$</code> - 4 d\u00edgitos, h\u00edfen opcional, 4 d\u00edgitos</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> CPF</p> <p>Padr\u00e3o para validar formato de CPF:</p> <pre><code>^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$\n</code></pre> <p>Explica\u00e7\u00e3o: - <code>^\\d{3}</code> - In\u00edcio com 3 d\u00edgitos - <code>\\.?</code> - Ponto opcional - <code>\\d{3}</code> - 3 d\u00edgitos - <code>\\.?</code> - Ponto opcional - <code>\\d{3}</code> - 3 d\u00edgitos - <code>-?</code> - H\u00edfen opcional - <code>\\d{2}$</code> - 2 d\u00edgitos e fim</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> URL/Link</p> <p>Padr\u00e3o para validar URLs:</p> <pre><code>^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&amp;\\/=]*)$\n</code></pre> <p>Explica\u00e7\u00e3o: - <code>^https?</code> - Protocolo HTTP ou HTTPS - <code>:\\/\\/</code> - :// - <code>(www\\.)?</code> - www. opcional - <code>[-a-zA-Z0-9@:%._\\+~#=]{1,256}</code> - Dom\u00ednio - <code>\\.</code> - Ponto literal - <code>[a-zA-Z0-9()]{1,6}</code> - Extens\u00e3o do dom\u00ednio - Resto: par\u00e2metros e caminhos opcionais</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> Data (DD/MM/AAAA)</p> <p>Padr\u00e3o para datas no formato brasileiro:</p> <pre><code>^(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/([0-9]{4})$\n</code></pre> <p>Explica\u00e7\u00e3o: - <code>^(0[1-9]|[12][0-9]|3[01])</code> - Dia de 01 a 31 - <code>\\/</code> - Barra literal - <code>(0[1-9]|1[0-2])</code> - M\u00eas de 01 a 12 - <code>\\/</code> - Barra literal - <code>([0-9]{4})$</code> - Ano com 4 d\u00edgitos</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> Hor\u00e1rio (HH:MM)</p> <p>Padr\u00e3o para hor\u00e1rios em formato 24h:</p> <pre><code>^([01]?[0-9]|2[0-3]):[0-5][0-9]$\n</code></pre> <p>Explica\u00e7\u00e3o: - <code>^([01]?[0-9]|2[0-3])</code> - Horas de 00 a 23 - <code>:</code> - Dois pontos literal - <code>[0-5][0-9]$</code> - Minutos de 00 a 59</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> </ul>"},{"location":"regex/#exemplos-avancados","title":"Exemplos Avan\u00e7ados","text":"<ul> <li> <p> Extrair Tags HTML</p> <p>Padr\u00e3o para extrair conte\u00fado de tags HTML:</p> <pre><code>&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\\/\\1&gt;|\\s+\\/&gt;)\n</code></pre> <p>Funcionalidade: Captura tags HTML completas com seus conte\u00fados</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> Endere\u00e7o IP</p> <p>Padr\u00e3o para validar endere\u00e7os IPv4:</p> <pre><code>^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\n</code></pre> <p>Funcionalidade: Valida IPs de 0.0.0.0 a 255.255.255.255</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> <li> <p> Senha Forte</p> <p>Padr\u00e3o para validar senhas seguras:</p> <pre><code>^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;.])[A-Za-z\\d@$!%*?&amp;.]{8,}$\n</code></pre> <p>Requisitos: M\u00ednimo 8 caracteres, mai\u00fascula, min\u00fascula, n\u00famero e s\u00edmbolo</p> <p>\ud83d\udd17 Testar no Regex101</p> </li> </ul>"},{"location":"regex/#dicas-importantes","title":"Dicas Importantes","text":""},{"location":"regex/#boas-praticas","title":"\u2705 Boas Pr\u00e1ticas","text":"<ul> <li>Teste sempre suas regex com diferentes casos</li> <li>Use grupos para capturar partes espec\u00edficas</li> <li>Seja espec\u00edfico - evite padr\u00f5es muito gen\u00e9ricos</li> <li>Documente regex complexas com coment\u00e1rios</li> </ul>"},{"location":"regex/#cuidados","title":"\u26a0\ufe0f Cuidados","text":"<ul> <li>Performance - regex complexas podem ser lentas</li> <li>Escape caracteres especiais quando necess\u00e1rio</li> <li>Valida\u00e7\u00e3o completa - regex n\u00e3o substitui valida\u00e7\u00e3o de neg\u00f3cio</li> <li>Legibilidade - prefira clareza \u00e0 brevidade extrema</li> </ul>"},{"location":"regex/#ferramentas-uteis","title":"Ferramentas \u00dateis","text":"<ul> <li> <p> Regex101</p> <p>Melhor ferramenta online para testar e debugar express\u00f5es regulares</p> <p>\ud83d\udd17 Acessar Regex101</p> </li> <li> <p> RegexLearn</p> <p>Tutorial interativo para aprender regex passo a passo</p> <p>\ud83d\udd17 Acessar RegexLearn</p> </li> <li> <p> RegexLib</p> <p>Biblioteca de express\u00f5es regulares prontas para uso</p> <p>\ud83d\udd17 Acessar RegexLib</p> </li> </ul>"},{"location":"regex/#proximos-passos","title":"\ud83c\udfaf Pr\u00f3ximos Passos","text":"<ol> <li>Pratique com os exemplos no Regex101</li> <li>Experimente modificar os padr\u00f5es</li> <li>Crie suas pr\u00f3prias regex para casos espec\u00edficos</li> <li>Compartilhe suas descobertas com a comunidade</li> </ol> <p>Esta p\u00e1gina faz parte do projeto CODAQUI - uma iniciativa para democratizar o conhecimento em tecnologia.</p>"},{"location":"team/","title":"Quem somos","text":""},{"location":"team/#nossa-missao","title":"Nossa miss\u00e3o","text":"<p>Nosso objetivo \u00e9 quebrar barreiras e levar o ensino tecnol\u00f3gico a todos. A Codaqui \u00e9 uma associa\u00e7\u00e3o sem fins lucrativos dedicada a apoiar jovens e comunidades, promovendo o acesso \u00e0 tecnologia para aqueles que mais necessitam.</p>"},{"location":"team/#voluntarios","title":"Volunt\u00e1rios","text":"<ul> <li> <p>Enderson Menezes</p> <p></p> <p>Fundador</p> <p> </p> </li> <li> <p>Thainara Furforo</p> <p></p> <p>Volunt\u00e1ria</p> <p> </p> </li> <li> <p>Ana Carolyne</p> <p></p> <p>Volunt\u00e1ria</p> <p> </p> </li> <li> <p>Guilherme Siquinelli</p> <p></p> <p>Mentor</p> <p> </p> </li> <li> <p>Matheus Luis</p> <p></p> <p>Mentor</p> <p> </p> </li> <li> <p>Estevan Bartmann Silveira</p> <p></p> <p>Volunt\u00e1rio</p> <p> </p> </li> <li> <p>Ivo Batistela</p> <p></p> <p>Mentor</p> <p> </p> </li> <li> <p>Elina Torres</p> <p></p> <p>Volunt\u00e1ria</p> <p> </p> </li> <li> <p>Adonias Vitorio</p> <p></p> <p>Volunt\u00e1rio</p> <p> </p> </li> <li> <p>K\u00e1tia Cibele</p> <p></p> <p>Volunt\u00e1ria</p> <p> </p> </li> </ul>"},{"location":"timeline/","title":"Linha do Tempo","text":"<p>Nossa Jornada</p> <p>Acompanhe os principais marcos da nossa hist\u00f3ria e como chegamos at\u00e9 aqui.</p>"},{"location":"timeline/#2025-em-andamento","title":"2025 - Em Andamento","text":"<p>Resultados Parciais</p> <p>Nossos n\u00fameros em 2025 mostram o crescimento cont\u00ednuo da nossa miss\u00e3o.</p>"},{"location":"timeline/#comunidade","title":"Comunidade","text":"<ul> <li>627 membros no Discord</li> <li>488 membros no WhatsApp Principal</li> </ul>"},{"location":"timeline/#educacao","title":"Educa\u00e7\u00e3o","text":"<ul> <li>14 encontros virtuais realizados</li> <li>\u2248 20 alunos participando ativamente</li> <li>77 horas de mentorias conclu\u00eddas (totalizando 53 mentorias e auxiliando quase 40 pessoas)</li> </ul>"},{"location":"timeline/#2024-expansao-presencial","title":"2024 - Expans\u00e3o Presencial","text":"<p>Modalidade H\u00edbrida</p> <p>Implementamos aulas presenciais no CPM junto aos encontros virtuais.</p>"},{"location":"timeline/#encontros","title":"Encontros","text":"<ul> <li>1\u00ba Semestre: 25 encontros (Aulas Presenciais no CPM)</li> <li>2\u00ba Semestre: 16 encontros</li> </ul>"},{"location":"timeline/#2023-remodelacao","title":"2023 - Remodela\u00e7\u00e3o","text":"<p>Foco em Eventos Presenciais</p> <p>Ano marcado pela transi\u00e7\u00e3o para eventos presenciais e expans\u00e3o do impacto social.</p>"},{"location":"timeline/#acoes-sociais","title":"A\u00e7\u00f5es Sociais","text":"<ul> <li>:material-computer: Doa\u00e7\u00e3o de computadores para escola no RJ</li> <li> Doa\u00e7\u00e3o de 3 computadores para alunos em Campo Mour\u00e3o</li> <li> Lan\u00e7amento do Projeto Mentoria</li> </ul>"},{"location":"timeline/#crescimento","title":"Crescimento","text":"<ul> <li> Financiamento Coletivo iniciado</li> <li> Site remodelado</li> <li> Contrata\u00e7\u00e3o de apoio organizacional</li> <li>:material-transparency: Transpar\u00eancia mensal via Apoia.se</li> <li> Doa\u00e7\u00e3o de computadores da Cortex Intelligence</li> </ul>"},{"location":"timeline/#2021-2022-consolidacao","title":"2021-2022 - Consolida\u00e7\u00e3o","text":"<p>Per\u00edodo de Estrutura\u00e7\u00e3o</p> <p>Fevereiro/2021 - Novembro/2022: 74 Encontros realizados</p>"},{"location":"timeline/#estatisticas","title":"Estat\u00edsticas","text":"<ul> <li>\u2248 15 alunos recorrentes</li> <li>\u2248 30 alunos total no per\u00edodo</li> </ul>"},{"location":"timeline/#2022-crescimento-digital","title":"2022 - Crescimento Digital","text":""},{"location":"timeline/#expansao-da-equipe","title":"Expans\u00e3o da Equipe","text":"<ul> <li>Novos volunt\u00e1rios nas \u00e1reas Jur\u00eddica e Cont\u00e1bil</li> </ul>"},{"location":"timeline/#comunidade_1","title":"Comunidade","text":"<ul> <li>22 alunos no grupo do WhatsApp</li> <li>32 participantes no Discord</li> </ul>"},{"location":"timeline/#parcerias-estrategicas","title":"Parcerias Estrat\u00e9gicas","text":"<ul> <li> Google Education (Google AdGrants)</li> <li> GitHub Education (GitHub Campus)</li> <li> WorkAdventure (espa\u00e7o virtual para aulas)</li> </ul>"},{"location":"timeline/#melhorias-tecnicas","title":"Melhorias T\u00e9cnicas","text":"<ul> <li>Expans\u00e3o das trilhas de ensino</li> <li>Fluxos de colabora\u00e7\u00e3o via GitHub</li> </ul>"},{"location":"timeline/#2021-nascimento-do-codaqui","title":"2021 - Nascimento do Codaqui","text":"<p>Marco Inicial</p> <p>19/02/2021: Primeiro encontro da \"Kids Academy\" no Discord do DevParana.org</p>"},{"location":"timeline/#primeiros-voluntarios","title":"Primeiros Volunt\u00e1rios","text":"<p>Jean, Diana e Ivan foram os primeiros volunt\u00e1rios essenciais para a organiza\u00e7\u00e3o interna.</p>"},{"location":"timeline/#transformacao-da-marca","title":"Transforma\u00e7\u00e3o da Marca","text":"<p>Mudan\u00e7a de \"Kids Academy\" para Codaqui, buscando \"abrasileirar\" a tecnologia.</p>"},{"location":"timeline/#conquistas-do-ano","title":"Conquistas do Ano","text":"M\u00e9trica Valor  Alunos contemplados 12  Bolsas concedidas 8 (R$ 50/6 meses) :material-computer: Computadores doados 3  Trilhas completas 1 (Python)"},{"location":"timeline/#formalizacao","title":"Formaliza\u00e7\u00e3o","text":"<ul> <li>Embasamento pedag\u00f3gico alinhado aos valores</li> <li>Formaliza\u00e7\u00e3o da associa\u00e7\u00e3o</li> </ul>"},{"location":"timeline/#2020-primeiros-passos","title":"2020 - Primeiros Passos","text":"<p>Inspira\u00e7\u00e3o Inicial</p> <p>O ano que plantou as sementes do que viria a ser o Codaqui.</p>"},{"location":"timeline/#conexoes-importantes","title":"Conex\u00f5es Importantes","text":"<ul> <li> Bate-papo com o Fundador da Tecnogueto</li> <li> Conversa com Zaedy Say\u00e3o sobre educa\u00e7\u00e3o e projetos sociais</li> <li> Primeiro emprego remoto do nosso Fundador</li> </ul>"},{"location":"timeline/#momento-decisivo","title":"Momento Decisivo","text":"<p>Hackathon 2020 - Campo Mour\u00e3o: Nosso Presidente atuou como mentor e conheceu a primeira turma da \"Kids Academy\", plantando as sementes do futuro projeto.</p>"},{"location":"trilhas/","title":"Trilhas de Aprendizado","text":"<p>A Codaqui \u00e9 uma institui\u00e7\u00e3o educacional inovadora que adota a metodologia GitBased. Isso implica que todos os nossos materiais did\u00e1ticos est\u00e3o hospedados e acess\u00edveis atrav\u00e9s do GitHub. Nossa filosofia \u00e9 de crescimento coletivo, onde os pr\u00f3prios estudantes, juntamente com uma equipe dedicada de mentores, t\u00eam a responsabilidade de atualizar e aprimorar continuamente nossos curr\u00edculos. Este processo teve in\u00edcio em um reposit\u00f3rio que, no momento, est\u00e1 arquivado.</p> <p>\u00c9 importante ressaltar que nosso objetivo principal n\u00e3o \u00e9 a cria\u00e7\u00e3o de novos conte\u00fados, mas sim a curadoria de informa\u00e7\u00f5es j\u00e1 dispon\u00edveis na internet. Nosso prop\u00f3sito \u00e9 transformar a vastid\u00e3o de informa\u00e7\u00f5es dispon\u00edveis em um caminho estruturado e f\u00e1cil de seguir. Por isso, a maioria dos m\u00f3dulos em nossos curr\u00edculos direcionar\u00e1 os alunos para outros sites que foram previamente avaliados e aprovados por nossa comunidade de mentores. Esta abordagem garante que nossos alunos tenham acesso ao melhor conte\u00fado educacional dispon\u00edvel.</p> <ul> <li> <p> Python 101</p> <p>Estude <code>Python</code> de forma aut\u00f4noma e acesse nosso discord caso precise de ajuda!</p> <p> Come\u00e7ar</p> </li> <li> <p> GitHub 101</p> <p>Se possui d\u00favidas, pode come\u00e7ar com a Trilha de <code>GitHub</code> e depois veja as outras.</p> <p> Come\u00e7ar</p> </li> <li> <p>: Constru\u00e7\u00e3o</p> <p>Estamos construindo outras trilhas e sempre tentando corrigir problemas, voc\u00ea pode interagir nas discuss\u00f5es e ver o atual estados dos documentos.</p> <p> Ver</p> </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/","title":"O que \u00e9 endere\u00e7amento de mem\u00f3ria?","text":"<p>Em resumo, ele se refere ao processo de atribuir identificadores \u00fanicos, chamados de endere\u00e7os, a locais espec\u00edficos na mem\u00f3ria de um computador. Esses endere\u00e7os s\u00e3o utilizados para acessar e manipular dados armazenados na mem\u00f3ria.</p> <ul> <li> <p>O limite do endere\u00e7amento de mem\u00f3ria em uma linguagem de programa\u00e7\u00e3o depende da arquitetura do computador e do sistema operacional em que o programa est\u00e1 sendo executado. Em sistemas de 32 bits, o endere\u00e7amento de mem\u00f3ria \u00e9 limitado a 4 gigabytes (2^32 bytes) de mem\u00f3ria. J\u00e1 em sistemas de 64 bits, o limite \u00e9 muito maior, chegando a 18.4 milh\u00f5es de terabytes (2^64 bytes) de mem\u00f3ria.</p> </li> <li> <p>\u00c9 importante considerar o limite de endere\u00e7amento de mem\u00f3ria ao desenvolver um programa, especialmente quando se trabalha com grandes conjuntos de dados ou algoritmos que exigem muita mem\u00f3ria. Se o programa exceder o limite de endere\u00e7amento de mem\u00f3ria, pode ocorrer um estouro de mem\u00f3ria (memory overflow) e o programa pode falhar ou apresentar comportamento inesperado.</p> </li> <li> <p>Para otimizar o uso da mem\u00f3ria, \u00e9 recomendado utilizar tipos de dados adequados para o tamanho dos valores que ser\u00e3o armazenados e liberar a mem\u00f3ria alocada quando n\u00e3o for mais necess\u00e1ria, por meio de t\u00e9cnicas como a desaloca\u00e7\u00e3o de mem\u00f3ria (deallocating memory) ou o uso de coletor de lixo (garbage collector), dependendo da linguagem de programa\u00e7\u00e3o utilizada.</p> </li> </ul> <p>Links: (mais aprofundado!!) - Geeksforgeeks - Tutorialspoint</p> <p>V\u00eddeos: - Memory addressing - Apenas Legendado! - Endere\u00e7amento de mem\u00f3ria</p>","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#imagem-de-exemplo-enderecamento-e-seu-funcionamento","title":"Imagem de exemplo, endere\u00e7amento e seu funcionamento.","text":"<p><pre><code>0x**** s\u00e3o endere\u00e7os de memoria, 0x representa que est\u00e3o em hexadecimal.\n</code></pre> Dentro dos endere\u00e7os \u00e9 poss\u00edvel notar a presen\u00e7a de 8 d\u00edgitos, no quais correspondem a 0, isso \u00e9 exatamente o exemplo de tamanho de vari\u00e1vel, nesse caso uma vari\u00e1vel de 8 bits ou 1 byte.</p> <p>Essa vari\u00e1vel de 8 bits possui '2^8 = (256)' possibilidades de combina\u00e7\u00f5es de valores. - Os valores v\u00e3o:</p> <p>0 a 255   -128 a 127</p>","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#o-que-acontece-caso-exceda-esses-8-bits-memory-overflow","title":"O que acontece caso exceda esses 8 bits (memory overflow)?","text":"<p>Simples, o valor estoura o limite de possibilidade, o que vai mudar \u00e9 a percep\u00e7\u00e3o que cada linguagem, podem retornar erros ou simplesmente zerar a vari\u00e1vel, pois ela s\u00f3 conta os 8 bits. </p> <ul> <li> <p>Se ocorrer um \"memory overflow\" em uma vari\u00e1vel de 8 bits, o valor excedente ser\u00e1 truncado ou envolto (wraparound) para o intervalo v\u00e1lido. Por exemplo, se voc\u00ea tentar armazenar o valor 300 em uma vari\u00e1vel de 8 bits, o valor ser\u00e1 truncado para 44, pois 300 - 256 = 44. Isso ocorre porque 300 est\u00e1 fora do intervalo v\u00e1lido de 0 a 255.</p> </li> <li> <p>\u00c9 importante ter cuidado com \"memory overflows\", pois eles podem levar a resultados inesperados e erros dif\u00edceis de depurar. \u00c9 recomendado usar tipos de dados apropriados para o intervalo de valores que voc\u00ea espera armazenar, ou implementar verifica\u00e7\u00f5es e tratamentos adequados para evitar \"memory overflows\".</p> </li> </ul>","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#de-maneira-matematica-segue-esse-fluxograma","title":"De maneira matem\u00e1tica, segue esse fluxograma!","text":"<pre><code>flowchart LR\n\nA[Valor] --&gt;|input| B{&gt;256?}\nB --&gt;|\u00c9 maior| D[Ent\u00e3o, Valor % 256]\nB --&gt;|\u00c9 menor| E[Valor salvo na mem\u00f3ria]\nD --&gt; E\n</code></pre>","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#imagem-demonstracao-matematica-binaria","title":"Imagem demonstra\u00e7\u00e3o matem\u00e1tica bin\u00e1ria!","text":"","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#extra","title":"Extra","text":"","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#como-um-hacker-pode-usar-memory-overflow-como-possivel-brecha","title":"Como um hacker pode usar memory overflow como poss\u00edvel brecha!!","text":"<p>Um hacker pode explorar uma vulnerabilidade de memory overflow para obter acesso n\u00e3o autorizado a um sistema ou executar c\u00f3digo malicioso. Aqui est\u00e3o algumas maneiras pelas quais isso pode ser feito:</p> <ol> <li> <p>Estouro de buffer: Um hacker pode enviar dados al\u00e9m dos limites de um buffer na mem\u00f3ria, sobrescrevendo \u00e1reas adjacentes de mem\u00f3ria. Isso pode levar \u00e0 execu\u00e7\u00e3o de c\u00f3digo arbitr\u00e1rio ou \u00e0 corrup\u00e7\u00e3o de dados sens\u00edveis.</p> </li> <li> <p>Inje\u00e7\u00e3o de c\u00f3digo: Ao explorar um estouro de mem\u00f3ria, um hacker pode injetar c\u00f3digo malicioso na \u00e1rea de mem\u00f3ria comprometida. Isso pode permitir que o hacker execute comandos remotos, obtenha acesso privilegiado ou execute ataques de nega\u00e7\u00e3o de servi\u00e7o.</p> </li> <li> <p>Escalada de privil\u00e9gios: Ao explorar uma vulnerabilidade de memory overflow, um hacker pode modificar os valores de vari\u00e1veis de controle, como ponteiros de fun\u00e7\u00e3o ou permiss\u00f5es de acesso, para obter privil\u00e9gios elevados no sistema comprometido.</p> </li> <li> <p>Desvio de fluxo: Ao corromper o fluxo de execu\u00e7\u00e3o de um programa por meio de um estouro de mem\u00f3ria, um hacker pode redirecionar o fluxo para \u00e1reas de c\u00f3digo malicioso. Isso pode permitir que o hacker execute a\u00e7\u00f5es n\u00e3o autorizadas ou contorne mecanismos de seguran\u00e7a.</p> </li> </ol>","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2024/08/07/o-que-%C3%A9-endere%C3%A7amento-de-mem%C3%B3ria/#curta-e-compartilhe","title":"Curta e Compartilhe!","text":"<pre><code>Se voc\u00ea chegou at\u00e9 aqui, pe\u00e7o que compartilhe com quem gosta desse tipo de conte\u00fado, para aumentar o engajamento e por tamb\u00e9m ser algo que \u00e9 pouco falado! Meu muito obrigado!\n</code></pre>","tags":["github","programa\u00e7\u00e3o","memoryoverflow","truncamentodedados","queroajudar"]},{"location":"blog/2022/10/14/hello-world/","title":"Hello world!","text":"<p>Queremos levar o ensino tecnol\u00f3gico para onde ainda existem barreiras.</p> <p>A Codaqui \u00e9 uma escola de programa\u00e7\u00e3o sem fins lucrativos que apoia jovens que desejam aprender a desenvolver produtos tecnol\u00f3gicos mas n\u00e3o possuem acesso a uma educa\u00e7\u00e3o tecnol\u00f3gica por outros meios.</p> <p>Para iniciar nossos trabalhos publicamente, depois de quase 2 anos nos organizando, gostar\u00edamos de convidar toda comunidade para participar do Hacktoberfest com a Codaqui.</p> <p>O Hacktoberfest \u00e9 um evento anual que encoraja as pessoas a contribuir com projetos open source ao longo do m\u00eas de outubro. </p>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#hacktoberfest-da-codaqui","title":"Hacktoberfest da Codaqui","text":"","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#como-participar","title":"Como participar","text":"","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#inscreva-se-no-evento-do-hacktoberfest","title":"Inscreva-se no Evento do Hacktoberfest","text":"<ul> <li>Registre-se em qualquer momento entre o dia 26 de setembro e o dia 31 de outubro de 2022, pelo site hacktoberfest.com utilizando sua conta do GitHub ou GitLab. Na Codaqui, nos utilizamos e recomendamos o uso do GitHub.</li> <li>Tenha 4 pull/merge requests aceitos em reposit\u00f3rios participantes do evento entre 1\u00ba de outubro e 31 de outubro de 2022 para completar o Hacktoberfest.</li> <li>Os 40.000 primeiros participantes a completar o Hacktoberfest poder\u00e3o escolher para receber um entre dois pr\u00eamios: uma \u00e1rvore plantada em seu nome, ou uma camiseta do Hacktoberfest 2022.</li> </ul>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#escolha-uma-forma-de-contribuir","title":"Escolha uma forma de contribuir","text":"","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#como-colaborar-criando-um-novo-topico-em-uma-trilha-existente","title":"Como colaborar criando um novo t\u00f3pico em uma trilha existente?","text":"<p>Instru\u00e7\u00f5es</p> Sem imagensCom imagens <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d.</li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d.</li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub.</li> <li>Clique em New Discussion para criar uma discuss\u00e3o.</li> <li>Selecione a Categoria \"Trilhas de Ensino\".</li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [TRILHA EXISTENTE], seguido pelo nome da trilha para a qual deseja sugerir material. No campo \"Write\", preencha uma descri\u00e7\u00e3o detalhada do que deseja adicionar \u00e0 trilha, incluindo textos e links sugeridos, seguindo os padr\u00f5es atuais da trilha. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar.</li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol> <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d. </li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d. </li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub. </li> <li>Clique em New Discussion para criar uma discuss\u00e3o. </li> <li>Selecione a Categoria \"Trilhas de Ensino\". </li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [TRILHA EXISTENTE], seguido pelo nome da trilha para a qual deseja sugerir material. No campo \"Write\", preencha uma descri\u00e7\u00e3o detalhada do que deseja adicionar \u00e0 trilha, incluindo textos e links sugeridos, seguindo os padr\u00f5es atuais da trilha. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar. </li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#como-colaborar-criando-um-novo-exercicio-em-um-certificado-existente","title":"Como colaborar criando um novo exerc\u00edcio em um certificado existente?","text":"<p>Instru\u00e7\u00f5es</p> Sem imagensCom imagens <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d.</li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d.</li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub.</li> <li>Clique em New Discussion para criar uma discuss\u00e3o.</li> <li>Selecione a Categoria \"Certificados\".</li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [EXERC\u00cdCIO], seguido pelo nome do certificado no qual deseja adicionar um exerc\u00edcio. No campo \"Write\", preencha com o enunciado do exerc\u00edcio que deseja adicionar ao certificado e sua resolu\u00e7\u00e3o. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar.</li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol> <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d. </li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d. </li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub. </li> <li>Clique em New Discussion para criar uma discuss\u00e3o. </li> <li>Selecione a Categoria \"Certificados\". </li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [EXERC\u00cdCIO], seguido pelo nome do certificado no qual deseja adicionar um exerc\u00edcio. No campo \"Write\", preencha com o enunciado do exerc\u00edcio que deseja adicionar ao certificado e sua resolu\u00e7\u00e3o. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar. </li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#como-criar-uma-nova-trilha","title":"Como criar uma nova trilha?","text":"<p>Instru\u00e7\u00f5es</p> Sem imagensCom imagens <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d.</li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d.</li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub.</li> <li>Clique em New Discussion para criar uma discuss\u00e3o.</li> <li>Selecione a Categoria \"Trilhas de Ensino\".</li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [NOVA TRILHA], seguido pelo nome da trilha que deseja sugerir. No campo \"Write\", escreva mais sobre a trilha que deseja que seja adicionada \u00e0 Codaqui, incluindo, se quiser, sugest\u00f5es de materiais e textos. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar.</li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol> <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d. </li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d. </li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub. </li> <li>Clique em New Discussion para criar uma discuss\u00e3o. </li> <li>Selecione a Categoria \"Trilhas de Ensino\". </li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [NOVA TRILHA], seguido pelo nome da trilha que deseja sugerir. No campo \"Write\", escreva mais sobre a trilha que deseja que seja adicionada \u00e0 Codaqui, incluindo, se quiser, sugest\u00f5es de materiais e textos. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar. </li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#como-criar-um-novo-certificado","title":"Como criar um novo certificado?","text":"<p>Instru\u00e7\u00f5es</p> Sem imagensCom imagens <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d.</li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d.</li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub.</li> <li>Clique em New Discussion para criar uma discuss\u00e3o.</li> <li>Selecione a Categoria \"Certificados\".</li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [NOVO CERTIFICADO], seguido pelo t\u00edtulo do certificado que deseja sugerir. No campo \"Write\", escreva mais sobre o certificado que deseja que seja adicionado \u00e0 Codaqui, incluindo, se quiser, sugest\u00f5es de textos e exerc\u00edcios (com solu\u00e7\u00e3o) para o certificado. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar.</li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol> <ol> <li>Acesse o site: codaqui.dev.</li> <li>Clique na aba \u201cParticipe\u201d. </li> <li>No menu \u00e0 esquerda, clique em \u201cQuero Apoiar\u201d. </li> <li>Clique no link em \u201cacessar aqui\u201d para acessar a p\u00e1gina de discuss\u00f5es no GitHub. </li> <li>Clique em New Discussion para criar uma discuss\u00e3o. </li> <li>Selecione a Categoria \"Certificados\". </li> <li>Preencha o t\u00edtulo da sua sugest\u00e3o, come\u00e7ando com [NOVO CERTIFICADO], seguido pelo t\u00edtulo do certificado que deseja sugerir. No campo \"Write\", escreva mais sobre o certificado que deseja que seja adicionado \u00e0 Codaqui, incluindo, se quiser, sugest\u00f5es de textos e exerc\u00edcios (com solu\u00e7\u00e3o) para o certificado. Ao finalizar, clique no bot\u00e3o \"Start discussion\" para enviar. </li> <li>Lembre-se de ler o C\u00f3digo de Conduta antes de enviar sua sugest\u00e3o.</li> </ol>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#como-auxiliar-verificando-se-os-conteudos-das-trilhas-permanecem-online","title":"Como auxiliar verificando se os conte\u00fados das trilhas permanecem online?","text":"<p>Instru\u00e7\u00f5es</p> Sem imagensCom imagens <ol> <li>Acesse o site: codaqui.dev</li> <li>Clique em \u201cTrilhas\u201d no menu superior:</li> <li>Escolha a trilha que gostaria de verificar no menu \u00e0 esquerda:</li> <li>Acesse os links apresentados na trilha e verifique se est\u00e3o todos funcionando e dispon\u00edveis. Caso identifique algum link com problemas, crie uma discuss\u00e3o informando o problema identificado, clicando aqui.</li> </ol> <ol> <li>Acesse o site: codaqui.dev</li> <li>Clique em \u201cTrilhas\u201d no menu superior: </li> <li>Escolha a trilha que gostaria de verificar no menu \u00e0 esquerda: </li> <li>Acesse os links apresentados na trilha e verifique se est\u00e3o todos funcionando e dispon\u00edveis. Caso identifique algum link com problemas, crie uma discuss\u00e3o informando o problema identificado, clicando aqui.</li> </ol>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#regras-e-conduta","title":"Regras e Conduta","text":"","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#regras-do-hacktoberfest","title":"Regras do Hacktoberfest","text":"<ul> <li>Seus Pull Requests (PR) e Merge Requests (MR) devem ser feitos dentro das datas limite do Hacktoberfest: entre 1\u00ba de outubro e 31 de outubro de 2022 (em qualquer fuso hor\u00e1rio).</li> <li>Seus PR/MRs devem ser feitos em reposit\u00f3rios p\u00fablicos e n\u00e3o arquivados. Reposit\u00f3rios que n\u00e3o estejam de acordo com os valores do Hacktoberfest ser\u00e3o exclu\u00eddos da qualifica\u00e7\u00e3o e os PR/MRs feitos nestes reposit\u00f3rios n\u00e3o contar\u00e3o.</li> <li>Seus PR/MRs n\u00e3o devem ser SPAM. PR/MRs que forem marcados com uma label contendo a palavra \u201cspam\u201d pelos mantenedores n\u00e3o ser\u00e3o contados.<ul> <li>O Hacktoberfest usa o Node.js 16 RegEx engine com /\\bspam\\b/i para procurar labels de spam.</li> <li>PR/MRs que tamb\u00e9m tenham o \u201chacktoberfest-accepted\u201d label n\u00e3o poder\u00e3o ser marcados como SPAM atrav\u00e9s de label.</li> <li>PR/MRs que tiverem sido mergiados e n\u00e3o tiverem uma label contendo a palavra \u201cinvalid\u201d n\u00e3o poder\u00e3o ser marcados como SPAM atrav\u00e9s de label.</li> </ul> </li> <li>PR/MRs que o sistema do Hacktoberfest detectar como SPAM tamb\u00e9m n\u00e3o ser\u00e3o contados.</li> <li>Qualquer usu\u00e1rio com dois ou mais PR/MRs de SPAM ser\u00e1 desqualificado.</li> <li>Seus PR/MRs devem ser feitos em um reposit\u00f3rio tagueado com o t\u00f3pico \u201chacktoberfest\u201d, ou com o label \u201chacktoberfest-accepted\u201d.</li> <li>Suas PR/MRs n\u00e3o podem ser marcadas com o label \u201cinvalid\u201d. PRs/MRs que forem marcados com o label \u201cinvalid\u201d n\u00e3o ser\u00e3o contadas, a n\u00e3o ser que eles tamb\u00e9m estejam marcados com o label \u201chacktoberfest-accepted\u201d.<ul> <li>O Hacktoberfest usa o Node.js 16 RegEx engine com /\\binvalid\\b/i para procurar labels de invalid.</li> </ul> </li> <li>Suas PR/MRs devem ser mergeadas, ter o label \u201chacktoberfest-accepted\u201d ou ter uma revis\u00e3o com aprova\u00e7\u00e3o geral.<ul> <li>Suas PR/MRs n\u00e3o ser\u00e3o consideradas aceitas se forem apenas um rascunho.</li> <li>Se sua PR/MR estiver sendo aceita para o Hacktoberfest por uma revis\u00e3o com aprova\u00e7\u00e3o geral, ela tamb\u00e9m n\u00e3o pode estar encerrada.</li> </ul> </li> <li>Assim que suas PR/MRs passarem por todas as checagens acima, ser\u00e1 aceita para o Hacktoberfest ap\u00f3s um per\u00edodo de 7 dias para revis\u00e3o.<ul> <li>O Hacktoberfest continuamente avalia todas as checagens. Se o PR/MR falhar em qualquer uma das checagens durante esse per\u00edodo, o prazo de 7 dias ser\u00e1 reiniciado.</li> <li>Ap\u00f3s os 7 dias para revis\u00e3o completos, sua PR/MR ser\u00e1 automaticamente aceita no Hacktoberfest, assumindo que ainda passe por todas as checagens. Uma vez aceita para o Hacktoberfest, eles parar\u00e3o de chec\u00e1-la.</li> </ul> </li> </ul>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#regras-da-codaqui","title":"Regras da Codaqui","text":"<ul> <li>Ao abrir uma Discuss\u00e3o, conforme orientado no \u201cComo participar\u201d, ela ser\u00e1 transformada em um Pull Request e passar\u00e1 pela avalia\u00e7\u00e3o da Codaqui para que seja mergeado ou n\u00e3o.</li> <li>Atente-se a todas as instru\u00e7\u00f5es e regras de conduta da Codaqui ao fazer sua contribui\u00e7\u00e3o.</li> <li>Caso sua contribui\u00e7\u00e3o seja v\u00e1lida dentro de todas as regras do Hacktoberfest e da Codaqui, sua pontua\u00e7\u00e3o ser\u00e1 recebida no prazo de 7 dias \u00fateis a partir da checagem em que ela for considerada v\u00e1lida pela primeira vez, conforme j\u00e1 explicado nas regras do Hacktoberfest.</li> </ul>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#teamplay","title":"Teamplay","text":"<ul> <li>Respeite a primeira pessoa que sinalizou um problema, ela ter\u00e1 prioridade na resolu\u00e7\u00e3o deste problema, e perder\u00e1 a mesma se mantiver inativa por mais de 36 horas.</li> <li>Seja respeitoso com os demais ao enviar sugest\u00f5es e participar de discuss\u00f5es. Todos est\u00e3o participando com o mesmo objetivo de contribuir.</li> </ul>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#repositorios","title":"Reposit\u00f3rios","text":"<p>Os reposit\u00f3rios da Codaqui que poder\u00e3o receber PR/MRs durante o per\u00edodo do Hacktoberfest s\u00e3o:</p> <ul> <li>Institucional</li> <li>Certificado Python</li> <li>Certificado Javascript</li> </ul> <p>Caso alguma nova trilha ou certificado seja criada por algum outro membro, o mesmo ser\u00e1 adicionado aqui no prazo de 24 horas.</p>","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/10/14/hello-world/#fluxo","title":"Fluxo","text":"","tags":["hello","world","hacktoberfest","queroajudar"]},{"location":"blog/2022/11/18/codaqui-no-benfeitoriacom/","title":"Codaqui no Benfeitoria.com","text":"<p>Com o objetivo de escalar o n\u00famero de alunos e mentores envolvidos no projeto, estamos lan\u00e7ando a nossa campanha de arrecada\u00e7\u00e3o atrav\u00e9s da plataforma Benfeitoria.</p> <p></p>","tags":["financiamento coletivo","quero ajudar","doa\u00e7\u00e3o","ajuda","financeira"]},{"location":"blog/2022/11/18/codaqui-no-benfeitoriacom/#resumo","title":"Resumo","text":"<p>A Codaqui \u00e9 uma escola de tecnologia sem fins lucrativos, que visa alcan\u00e7ar jovens e adolescentes de forma acess\u00edvel, com aulas e atividades completamente digitais, que podem ser acompanhadas atrav\u00e9s de computador, tablet ou aparelho celular. Desta forma, conseguimos atingir alunos de todos os lugares do Brasil e de maior vulnerabilidade social.</p> <p>Os alunos percorrem o conte\u00fado de forma aut\u00f4noma, e recebem mentoria semanal, aplicando o conte\u00fado aprendido. Dessa forma, atuamos para desenvolver compet\u00eancias de autonomia, organiza\u00e7\u00e3o e aprendizado de conte\u00fado pr\u00e1tico de desenvolvimento de software.</p> <p>Baseados em Maria Montessori, adotamos um elemento importante de valoriza\u00e7\u00e3o dos alunos atrav\u00e9s de uma bolsa de estudos. Esta bolsa \u00e9 uma contrapartida por 100% de presen\u00e7a nos encontros e aulas ou, se houver falta, esta deve ser justificada pelo respons\u00e1vel. A ado\u00e7\u00e3o desse conceito refor\u00e7a nossos valores de responsabilidade, autonomia e comprometimento do aluno, al\u00e9m do v\u00ednculo com sua fam\u00edlia.</p>","tags":["financiamento coletivo","quero ajudar","doa\u00e7\u00e3o","ajuda","financeira"]},{"location":"blog/2022/11/18/codaqui-no-benfeitoriacom/#metas","title":"Metas","text":"<p>Entenda nossas metas para 2023:</p> <p></p> <p>Contamos com o seu apoio para conseguir alcan\u00e7ar as metas e impactar ainda mais jovens e adolescentes com nosso projeto, visando reduzir uma desigualdade social que s\u00f3 cresce, atrav\u00e9s da educa\u00e7\u00e3o e do ensino de tecnologia, j\u00e1 que o mundo do trabalho se torna cada vez mais tecnol\u00f3gico, sem que as oportunidades de emprego e renda cheguem at\u00e9 a popula\u00e7\u00e3o de maior vulnerabilidade social.</p> <p>Confira as contribui\u00e7\u00f5es e recompensas dispon\u00edveis na campanha:</p> Categoria Valor da contribui\u00e7\u00e3o Recompensas Trainee R$ 10,00 E-mail de agradecimento + Inser\u00e7\u00e3o no site J\u00fanior R$ 50,00 + frete Anteriores + Adesivo Pleno R$ 100,00 + frete Anteriores + Bloco de notas + P\u00f4ster virtual S\u00eanior R$ 150,00 + frete Anteriores + Cord\u00e3o para crach\u00e1 personalizado da Codaqui S\u00eanior + Pair Programming R$ 250,00 + frete Anteriores + Camiseta Tech Lead R$ 500,00 + frete Anteriores + 1 Camiseta + Adote um aluno e acompanhe seus rendimentos, al\u00e9m de poder, sob media\u00e7\u00e3o da equipe pedag\u00f3gica, fornecer mentoria e acompanhamento durante o projeto Company R$ 1.000,00 + frete Anteriores + Bate papo com a equipe para se envolver e ajudar de forma ativa no projeto Gr3eat Place to Work R$ 5.000,00 + frete Anteriores + Possibilidade de acordo com autoriza\u00e7\u00e3o dos respons\u00e1veis de realizar uma entrevista com os participantes ao fim do projeto com foco em jovem aprendiz e estagi\u00e1rios","tags":["financiamento coletivo","quero ajudar","doa\u00e7\u00e3o","ajuda","financeira"]},{"location":"blog/2022/11/18/codaqui-no-benfeitoriacom/#como-apoiar","title":"Como apoiar?","text":"<p>Para apoiar nossa campanha e receber suas recompensas, acesse: https://benfeitoria.com/projeto/codaqui.</p> <p>!!! question Voc\u00ea sabia?     Voc\u00ea sabia que se cada pessoa que visitou esse site doasse R$10,00, n\u00f3s j\u00e1 teriamos mudado a vida de muitos jovens?     Qualquer doa\u00e7\u00e3o ajuda! COLABORE!</p> <p>Aproveite essa oportunidade de apoiar um projeto que muda vidas, e ainda receber mimos! Mas corra: \u00e9 s\u00f3 at\u00e9 o dia 17/01/2023.</p>","tags":["financiamento coletivo","quero ajudar","doa\u00e7\u00e3o","ajuda","financeira"]},{"location":"blog/2023/01/05/codaqui-na-confer%C3%AAncia-do-devpr-2023/","title":"Codaqui na Confer\u00eancia do DevPR 2023","text":"<p>A Codaqui, surgiu com seu primeiro nome de batismo DevParan\u00e1 Kids, depois se tornou um grupo de Meetup dentro do Discord da Comunidade DevParan\u00e1 com o titulo de \u201cKids Academy\u201d, com o tempo formatando a ideia e consultando mais pessoas resolvemos \u201cabrasileirar\u201d a situa\u00e7\u00e3o e somos a uni\u00e3o de Codar com Aqui (Codaqui).</p> <p>Mas quem \u00e9 a comunidade DevParan\u00e1?</p> <p>\u00c9 uma comunidade formada por desenvolvedores e desenvolvedoras do Paran\u00e1, com origem na cidade de Maring\u00e1, auxilia a promo\u00e7\u00e3o de meetups durante todo o ano, tendo no Meetup.com uma comunidade de quase 5000 pessoas. Toda a organiza\u00e7\u00e3o da comunidade \u00e9 volunt\u00e1ria, assim como dos grupos de encontros filiados, e todos esses eventos durante o ano s\u00e3o financiados com o valor do ingressos da Conf, por isso a Confer\u00eancia Anual da DevPR \u00e9 atualmente o \u00fanico evento n\u00e3o gratuito que a Comunidade organiza.</p> <p> <p></p> <p>Vamos fazer parte da hist\u00f3ria e participar da Edi\u00e7\u00e3o 2023? Clique na imagem abaixo e voc\u00ea ser\u00e1 direcionado para a p\u00e1gina de ingressos. </p> <p></p> <p>A Comunidade do DevParan\u00e1 \u00e9 muito importante para regi\u00e3o Norte do Paran\u00e1 e tem grande relev\u00e2ncia tamb\u00e9m nacional:</p> <p>Apoie nossa comunidade! Seu patroc\u00ednio faz a diferen\u00e7a.</p>","tags":["hist\u00f3ria","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/","title":"DevPR Starter - Codaqui","text":"<p>Filho de peixe peixinho \u00e9! A Codaqui e a DevParan\u00e1 anunciam o DevPR Starter \u2013 uma programa\u00e7\u00e3o incr\u00edvel exclusiva para dependentes, filhos, filhas, irm\u00e3os e irm\u00e3s, de 6 a 16 anos, dos participantes da Confer\u00eancia DevPR 2023.</p> <p>Durante o evento DevPR 2023, as crian\u00e7as dependentes dos participantes ter\u00e3o a oportunidade de aprender programa\u00e7\u00e3o de forma l\u00fadica, com atividades divertidas e interativas, al\u00e9m de um lanche no per\u00edodo da tarde para recarregar as energias.</p> <p>Temos uma equipe preparada e dedicada para atender as crian\u00e7as e adolescentes e garantir um ambiente seguro de aprendizagem.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#como-vai-funcionar","title":"Como vai funcionar?","text":"<p>Voc\u00ea que est\u00e1 participando do DevPR 2023 no Audit\u00f3rio poder\u00e1 levar um dependente, e ele ter\u00e1 gratuitamente um evento e uma equipe dispon\u00edvel para ele. Para inscri\u00e7\u00e3o do seu ou sua dependente, acesse o portal do Sympla e inclua no carrinho o ingresso Starter (tipo A para 6 a 12 anos, ou tipo B para 13 a 16 anos).</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#programacao","title":"Programa\u00e7\u00e3o","text":"<p>O Espa\u00e7o Starter ser\u00e1 divido em 4 ambientes, e voc\u00ea pode conferir todas as informa\u00e7\u00f5es sobre palestrantes e atividades no site oficial do evento.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#palco-inspira","title":"Palco Inspira","text":"<p>Ser\u00e1 aberto para todos os participantes do evento, e ter\u00e1 uma programa\u00e7\u00e3o de palestras voltado para pessoas iniciantes.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#sala-invertida","title":"Sala Invertida","text":"<p>Ser\u00e1 destinado a Workshops e atividades pr\u00e1ticas.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#sala-hopper","title":"Sala Hopper","text":"<p>Ser\u00e1 exclusivo para crian\u00e7as de 6 a 12 anos.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#sala-turing-13-a-16-anos","title":"Sala Turing (13 a 16 anos)","text":"<p>Ser\u00e1 exclusivo para jovens de 13 a 16 anos.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/02/14/devpr-starter---codaqui/#duvidas","title":"D\u00favidas?","text":"<p>Entre em contato por comunidade@devpr.org ou contato@codaqui.dev acesse o site oficial do evento.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/03/11/sucesso-na-inova%C3%A7%C3%A3o-do-devpr-2023/","title":"Sucesso na inova\u00e7\u00e3o do DevPR 2023","text":"<p>O in\u00e9dito Espa\u00e7o Starter cumpriu a miss\u00e3o de introduzir o universo da programa\u00e7\u00e3o para crian\u00e7as e adolescentes.</p> <p>A confer\u00eancia anual DevPR, evento de atualiza\u00e7\u00e3o, network, compartilhamento de experi\u00eancias e troca de conte\u00fado para programadores e tecn\u00f3logos chegou com tudo em 2023 na cidade de Maring\u00e1.</p> <p>Sediada na Unicesumar, a grande inova\u00e7\u00e3o da edi\u00e7\u00e3o foi o espa\u00e7o Starter com um cronograma incr\u00edvel de atividades l\u00fadicas e din\u00e2micas de introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o direcionado a crian\u00e7as e adolescentes, parentes diretos dos inscritos na DevPR 2023.</p> <p>A ideia surgiu com a organiza\u00e7\u00e3o da Codaqui e seus volunt\u00e1rios, em destaque Enderson Menezes e Ana Elisa Tubino. A Codaqui \u00e9 uma escola de programa\u00e7\u00e3o sem fins lucrativos disposta a democratizar o ensino sobre tecnologia e programa\u00e7\u00e3o a jovens carentes.</p> <p>O projeto da Codaqui com a DevPR para introduzir crian\u00e7as e adolescentes ao universo da programa\u00e7\u00e3o ganhou for\u00e7a e aconteceu!</p> <p></p> <p>O espa\u00e7o Starter contou com uma equipe de volunt\u00e1rios preparados para receber toda essa galerinha com um cronograma de workshops e atividades l\u00fadicas para tr\u00eas turmas divididas por idade.</p> <p>A manh\u00e3 come\u00e7ou agitada para a Turma Hopper, nomeada em homenagem \u00e0 analista de sistemas criadora da linguagem de programa\u00e7\u00e3o de alto n\u00edvel, Grace Hopper. As crian\u00e7as de 6 \u00e0 12 anos compreenderam a ideia de comando e algoritmo do computador atrav\u00e9s de uma atividade l\u00fadica, competitiva e pr\u00e1tica do Labirinto.</p> <p></p> <p>No per\u00edodo da tarde, as crian\u00e7as puderam aplicar o conhecimento adquirido com o Desafio Scratch, no qual utilizaram a linguagem de programa\u00e7\u00e3o Scratch para a cria\u00e7\u00e3o de anima\u00e7\u00f5es e jogos, com regras e comandos no laborat\u00f3rio de inform\u00e1tica da universidade. Depois, as crian\u00e7as participaram da atividade Programando Carrinhos Aut\u00f4nomos, na qual simularam o funcionamento do programa Arduino no computador e presenciaram o funcionamento dos carrinhos.</p> <p></p> <p>A Turma Turing, em tributo \u00e0 Alan Turing, cientista da computa\u00e7\u00e3o e idealizador dos conceitos de algoritmo e computador, composta por jovens de 13 a 16 anos, iniciou o cronograma com o workshop Ca\u00e7a aos N\u00fameros com a constru\u00e7\u00e3o de um algoritmo simples.</p> <p>Mais tarde, na oficina de Jornada Criativa, cada participante teve a oportunidade de desenvolver seu primeiro site em linguagem HTML. A finaliza\u00e7\u00e3o da oficina contou como a elei\u00e7\u00e3o do site favorito pelos jovens.</p> <p>Na Turma Lovelace, crian\u00e7as de 10 a 15 anos conheceram a hist\u00f3ria da matem\u00e1tica Ada Lovelace, quem escreveu o primeiro algoritmo processado por uma m\u00e1quina em 1842, depois, seguiram o cronograma com as atividades do Labirinto e Programando Carrinhos Aut\u00f4nomos e o Desafio Scratch.</p> <p>Ao longo da tarde, os participantes contaram com um coffee break, com salgadinhos, bolo, refrigerante e suco, para repor as energias e continuarem com a criatividade a mil.</p> <p>Para finalizar o dia de introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o, as crian\u00e7as e adolescentes das tr\u00eas turmas continuaram no ritmo de aprendizagem com mais conforto no ambiente Inspira com o filme de anima\u00e7\u00e3o, l\u00fadico e humor\u00edstico, Decodificando Emojis, seguido pelo desvendamento do famoso programa online Akinator com a apresenta\u00e7\u00e3o de Mist\u00e9rios da Internet.</p> <p></p> <p>Al\u00e9m das crian\u00e7as e adolescentes dependentes diretos dos inscritos na confer\u00eancia DevPR, o espa\u00e7o Starter, organizado pela Codaqui, recebeu alunos do projeto comunit\u00e1rio Estrela M\u00e3e de Pai\u00e7andu, Paran\u00e1. O espa\u00e7o Starters foi sucesso total!</p> <p>Ao fechamento do DevPR, algumas crian\u00e7as ainda subiram ao palco principal da confer\u00eancia para compartilhar a experi\u00eancia incr\u00edvel e in\u00e9dita que tiveram e sonhos, como \u201ceu quero ser programador\u201d. Para sempre se lembrarem do projeto, os aspirantes mirins foram presenteados com o pato para debugar e um certificado online.</p>","tags":["eventos","comunidade","devparan\u00e1"]},{"location":"blog/2023/10/23/codaqui-apoia-campeonato-de-skate-em-marialva/","title":"Codaqui Apoia Campeonato de Skate em Marialva!","text":"<p>Ol\u00e1! Como fundador da Codaqui, nossa comunidade de aprendizado de programa\u00e7\u00e3o, \u00e9 com enorme entusiasmo que compartilho nossa participa\u00e7\u00e3o no pr\u00f3ximo Campeonato de Skate de Marialva!</p> <p></p> <p>A Codaqui, nascida em Maring\u00e1 e integrada ao GitHub, \u00e9 mais do que uma simples escola de programa\u00e7\u00e3o \u2013 ela \u00e9 uma pr\u00f3spera comunidade de aprendizado cont\u00ednuo. \ud83c\udf10\ud83c\udf93 Proporcionamos uma plataforma onde todos os interessados, independentemente do seu n\u00edvel de experi\u00eancia, podem aprender e contribuir. Em cada uma das nossas p\u00e1ginas, voc\u00ea encontrar\u00e1 um \u00edcone que levar\u00e1 diretamente \u00e0 edi\u00e7\u00e3o dessa p\u00e1gina, estimulando a todos a crescerem juntos na busca pelo conhecimento. \ud83d\udcda\ud83d\udca1</p> <p>Nosso objetivo principal \u00e9 apoiar aqueles jovens que desejam no futuro cria\u00e7\u00e3o de produtos tecnol\u00f3gicos, mas que, por v\u00e1rias raz\u00f5es, n\u00e3o tiveram acesso \u00e0 educa\u00e7\u00e3o tecnol\u00f3gica. N\u00f3s somos a ponte entre suas aspira\u00e7\u00f5es e a realiza\u00e7\u00e3o de seus sonhos. \ud83d\udcbb\ud83c\udf08</p> <p>Convidamos todos a explorar o mundo da tecnologia conosco, enquanto tamb\u00e9m celebramos e apoiamos o esp\u00edrito do esporte em nossa comunidade. \ud83e\udd17\ud83c\udf88 O pr\u00f3ximo Campeonato de Skate de Marialva, que ocorrer\u00e1 dia 05 de Novembro de 2023, \u00e0s 15 horas, na Pista de Skate de Marialva, \u00e9 uma excelente oportunidade para apoiarmos o esporte que tantos adoram e, ao mesmo tempo, convidarmos as pessoas a mergulharem na \u00e1rea de tecnologia com a Codaqui. \ud83d\udef9\ud83c\udf96\ufe0f\ud83c\udfc6</p> <p>Acreditamos que a educa\u00e7\u00e3o e o esporte podem caminhar juntos, e s\u00e3o ferramentas capacitadoras para a juventude. Especialmente quando a educa\u00e7\u00e3o est\u00e1 enraizada na tecnologia e a comunidade se une para apoiar eventos esportivos como este. \ud83c\udf93\ud83d\udef9\ud83d\udcbc</p> <p>Venha participar conosco! Desfrute do melhor do skate na Pista de Skate de Marialva e aproveite para descobrir o universo do desenvolvimento de software com a Codaqui. Educa\u00e7\u00e3o e esporte, juntos, podem criar um futuro cheio de possibilidades! Venha fazer parte disso! \ud83c\udf89\ud83d\ude80</p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/","title":"Coleta de Apoio da Codaqui agora na Open Collective","text":"<p>Recentemente, a Codaqui tomou uma decis\u00e3o significativa: migrar sua coleta de apoio para o Open Collective. Neste post, vamos explorar os motivos por tr\u00e1s dessa mudan\u00e7a e como ela beneficiar\u00e1 nossa comunidade.</p> <p></p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/#transparencia-e-sustentabilidade","title":"Transpar\u00eancia e Sustentabilidade","text":"<p>O Open Collective oferece uma plataforma robusta e transparente para gerenciar apoios financeiros. Com recursos como relat\u00f3rios detalhados de gastos, rastreamento de doa\u00e7\u00f5es e visibilidade completa das finan\u00e7as, podemos garantir maior transpar\u00eancia para nossos apoiadores.</p> <p>Al\u00e9m disso, o Open Collective permite que os projetos sejam mais sustent\u00e1veis a longo prazo, facilitando a arrecada\u00e7\u00e3o cont\u00ednua de fundos e a presta\u00e7\u00e3o de contas.</p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/#maior-alcance","title":"Maior Alcance","text":"<p>Ao fazer parte do ecossistema do Open Collective, a Codaqui ter\u00e1 acesso a uma rede mais ampla de projetos e apoiadores. Isso nos ajudar\u00e1 a expandir nossa base de apoio e colaborar com outras comunidades.</p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/#o-que-muda-para-os-apoiadores","title":"O que muda para os apoiadores?","text":"","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/#processo-simplificado","title":"Processo Simplificado","text":"<p>Os apoiadores agora podem contribuir diretamente atrav\u00e9s da p\u00e1gina da Codaqui no Open Collective. O processo \u00e9 simples e transparente, permitindo que todos acompanhem como seus recursos est\u00e3o sendo utilizados.</p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/#novas-funcionalidades","title":"Novas Funcionalidades","text":"<p>Com a migra\u00e7\u00e3o, teremos acesso a recursos adicionais, como metas de financiamento por projeto e globais, recompensas para apoiadores e integra\u00e7\u00e3o com outras ferramentas.</p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/19/coleta-de-apoio-da-codaqui-agora-na-open-collective/#conclusao","title":"Conclus\u00e3o","text":"<p>A mudan\u00e7a para o Open Collective \u00e9 um passo importante para a Codaqui. Estamos animados com as possibilidades que essa plataforma oferece e esperamos continuar crescendo e fortalecendo nossa comunidade.</p> <p>Acesse nosso perfil no Open Collective e fa\u00e7a parte dessa jornada!</p> <p>Espero que este post ajude a esclarecer os detalhes da transi\u00e7\u00e3o. Se precisar de mais informa\u00e7\u00f5es ou tiver outras d\u00favidas, estou \u00e0 disposi\u00e7\u00e3o! \ud83d\ude0a\ud83d\ude80</p>","tags":["apoio","queroajudar"]},{"location":"blog/2024/07/22/devparan%C3%A1-e-codaqui-unidos-pela-comunidade/","title":"DevParan\u00e1 e Codaqui: Unidos pela Comunidade","text":"<p>Agora, em 2024, estamos entusiasmados em anunciar que a DevParan\u00e1 e a Codaqui est\u00e3o oficialmente unidas sob a mesma associa\u00e7\u00e3o. Esta uni\u00e3o fortalece os interesses da comunidade e nossa miss\u00e3o \u00e9 o conhecimento acess\u00edvel, para que voc\u00ea sinta o poder dele na sua vida pessoal e profissional.</p> <p></p> <p>Com mais de 8 anos de hist\u00f3ria, temos um hist\u00f3rico com mais de 250 eventos organizados e 7 confer\u00eancias anuais, sempre apoiando e fortalecendo as comunidades e grupos existentes.</p> <p>Nossa influ\u00eancia n\u00e3o se limita a fronteiras, alcan\u00e7ando in\u00fameras cidades e at\u00e9 mesmo pa\u00edses como Paraguai e Chile. Em 2021, estabelecemos uma parceria com a Codaqui, uma comunidade voltada para o p\u00fablico jovem. Em 2023, conclu\u00edmos nossos primeiros grandes eventos em conjunto.</p> <p>A edi\u00e7\u00e3o desse ano ser\u00e1 gratuita e os ingressos foram disponibilizados ao p\u00fablico desde o dia 14 de julho. Como estamos trazendo pessoas refer\u00eancias da nossa \u00e1rea e isso tem um custo, precisamos de um apoio m\u00ednimo da comunidade para cobrir os gastos.</p>","tags":["hist\u00f3ria","comunidade","devparan\u00e1"]},{"location":"blog/2024/07/22/devparan%C3%A1-e-codaqui-unidos-pela-comunidade/#palestrantes","title":"Palestrantes","text":"<ul> <li>J\u00f4natas Davi</li> <li>Lays Rodrigues</li> <li>Gustavo Caetano</li> <li>Prof. Anderson Burnes</li> <li>Munif Gebara</li> <li>Leonardo Elias</li> <li>Isabella Cruz de Oliveira</li> <li>Marco Ollivier</li> <li>Kelly Garcia</li> <li>Fernando Fabr\u00edcio</li> <li>Marcondes Viana</li> </ul> <p>Para conferir mais informa\u00e7\u00f5es acesse o site do evento.</p>","tags":["hist\u00f3ria","comunidade","devparan\u00e1"]},{"location":"blog/2024/09/17/presta%C3%A7%C3%A3o-de-contas-do-devpr-conf-2024/","title":"Presta\u00e7\u00e3o de Contas do DevPR Conf 2024","text":"<p>Espero que estejam bem. Gostar\u00edamos de compartilhar algumas atualiza\u00e7\u00f5es importantes sobre o nosso recente evento. Primeiramente, estamos felizes em informar que conclu\u00edmos o evento com sucesso. Atualmente, estamos aprimorando a apresenta\u00e7\u00e3o dos dados na planilha, mas j\u00e1 temos um esbo\u00e7o dispon\u00edvel para aqueles que est\u00e3o ansiosos para conferir os resultados preliminares.</p> <p>Um ponto importante a destacar \u00e9 que este foi o \u00faltimo ano em que trabalhamos com dinheiro \u201clegado\u201d envolvendo CPFs e CNPJs. Isso explica a confus\u00e3o que ocorreu entre as transfer\u00eancias via Stone e as transfer\u00eancias diretas entre CPFs. A partir do pr\u00f3ximo ano, esperamos que esse processo seja muito mais simplificado e transparente.</p> <p>Se voc\u00ea tiver qualquer d\u00favida ou precisar de mais informa\u00e7\u00f5es, n\u00e3o hesite em participar das nossas reuni\u00f5es semanais. Estamos sempre dispon\u00edveis para ajudar e esclarecer qualquer quest\u00e3o.</p> <p>Al\u00e9m disso, ainda estamos aguardando o pagamento de dois patrocinadores que n\u00e3o foi recebido em nossa conta. Assim que esses pagamentos forem efetuados e essa pend\u00eancia for resolvida, atualizaremos o saldo da Open Collective conforme o acordado.</p> <p>Agradecemos a todos pelo apoio cont\u00ednuo e pela participa\u00e7\u00e3o no evento. Continuaremos trabalhando para melhorar e trazer mais transpar\u00eancia e efici\u00eancia para nossos processos.</p> <p>Dados no Open Collective</p>","tags":["hist\u00f3ria","comunidade","devparan\u00e1"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/","title":"O Papel de uma SRE em Sistemas Financeiros Cr\u00edticos","text":"<p>No dia 22 de mar\u00e7o, tive a oportunidade de palestrar no AWSOME WOMEN COMMUNITY SUMMIT BRASIL, abordando um tema desafiador e essencial: o papel de uma Site Reliability Engineer (SRE) em sistemas financeiros cr\u00edticos. Durante a apresenta\u00e7\u00e3o, compartilhei experi\u00eancias do meu dia a dia na Stone Pagamentos, explorando desde os bastidores (backstage) at\u00e9 as pr\u00e1ticas que tornam a gest\u00e3o de incidentes em ambientes cr\u00edticos mais segura e eficiente.</p>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#contexto-do-evento","title":"Contexto do Evento","text":"<p>O AWSOME WOMEN COMMUNITY SUMMIT BRASIL foi idealizado para inspirar e empoderar mulheres na \u00e1rea de tecnologia. Reunindo profissionais de diversas \u00e1reas, o encontro proporcionou um espa\u00e7o para o interc\u00e2mbio de conhecimentos e a discuss\u00e3o de temas que, muitas vezes, ficam \u00e0 margem do discurso tradicional. Em um setor onde a confiabilidade dos sistemas \u00e9 vital, a presen\u00e7a de mulheres l\u00edderes em engenharia e tecnologia refor\u00e7a a import\u00e2ncia da diversidade e da colabora\u00e7\u00e3o.</p>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#preparacao-e-selecao-de-conteudo","title":"Prepara\u00e7\u00e3o e Sele\u00e7\u00e3o de Conte\u00fado","text":"","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#escolha-dos-topicos","title":"Escolha dos T\u00f3picos","text":"<p>Ao preparar a palestra, dediquei tempo para alinhar o conte\u00fado com os desafios enfrentados em sistemas financeiros cr\u00edticos. Alguns dos principais pontos abordados foram:</p> <ul> <li>Backstage como Case: Compartilhei um case real da Stone Pagamentos, detalhando os processos e aprendizados dos bastidores na gest\u00e3o de incidentes.</li> <li>Cultura Blameless: Expliquei como a aus\u00eancia de culpa (blameless culture) \u00e9 fundamental para incentivar a transpar\u00eancia e a melhoria cont\u00ednua ap\u00f3s incidentes cr\u00edticos.</li> <li>Cen\u00e1rios Cr\u00edticos de Incidentes: Demonstrei como identificar, analisar e responder a incidentes em sistemas financeiros, onde cada segundo conta.</li> </ul>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#adequando-a-linguagem","title":"Adequando a Linguagem","text":"<p>Considerando o p\u00fablico predominantemente feminino, procurei transmitir os conceitos t\u00e9cnicos de forma acess\u00edvel, enfatizando a import\u00e2ncia da colabora\u00e7\u00e3o e da resili\u00eancia, e mostrando que desafios complexos podem ser vencidos com trabalho em equipe e uma postura de aprendizado constante.</p>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#durante-a-palestra","title":"Durante a Palestra","text":"<p>Ao subir ao palco, fui recebida com entusiasmo e aten\u00e7\u00e3o. A energia do p\u00fablico impulsionou uma troca din\u00e2mica de experi\u00eancias e questionamentos. Alguns momentos de destaque inclu\u00edram:</p> <ul> <li>Apresenta\u00e7\u00e3o do Backstage: Detalhei o case da Stone Pagamentos, mostrando os bastidores dos processos de resolu\u00e7\u00e3o de incidentes em sistemas de pagamento, onde a press\u00e3o por alta disponibilidade e seguran\u00e7a \u00e9 constante.</li> <li>Discuss\u00e3o sobre Cultura Blameless: Abordei como a pr\u00e1tica de analisar erros sem buscar culpados fomenta um ambiente de inova\u00e7\u00e3o e aprendizagem, essencial para a evolu\u00e7\u00e3o de processos cr\u00edticos.</li> <li>An\u00e1lise de Cen\u00e1rios Cr\u00edticos: Demonstrei, por meio de exemplos pr\u00e1ticos, como preparar e responder a incidentes, destacando a import\u00e2ncia de planos de conting\u00eancia e comunica\u00e7\u00e3o eficaz.</li> </ul>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#reflexoes-e-licoes-aprendidas","title":"Reflex\u00f5es e Li\u00e7\u00f5es Aprendidas","text":"<p>A experi\u00eancia foi enriquecedora em v\u00e1rios n\u00edveis:</p> <ul> <li>Empoderamento e Inclus\u00e3o: Palestrar no AWSOME WOMEN COMMUNITY SUMMIT BRASIL refor\u00e7ou a import\u00e2ncia de encorajar a presen\u00e7a de mulheres em \u00e1reas tecnol\u00f3gicas e financeiras.</li> <li>Resili\u00eancia e Inova\u00e7\u00e3o: Compartilhar os desafios e as solu\u00e7\u00f5es dos bastidores demonstrou que a resili\u00eancia, aliada a uma cultura blameless, \u00e9 a chave para a inova\u00e7\u00e3o em ambientes cr\u00edticos.</li> <li>Aprendizado Coletivo: A troca de experi\u00eancias n\u00e3o s\u00f3 fortaleceu a comunidade, mas tamb\u00e9m ampliou a vis\u00e3o sobre como transformar incidentes em oportunidades de melhoria cont\u00ednua.</li> </ul>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/04/02/o-papel-de-uma-sre-em-sistemas-financeiros-cr%C3%ADticos/#conclusao","title":"Conclus\u00e3o","text":"<p>Palestrar sobre o papel de uma SRE em sistemas financeiros cr\u00edticos no AWSOME WOMEN COMMUNITY SUMMIT BRASIL foi uma experi\u00eancia transformadora e inspiradora. Ao compartilhar os bastidores, a cultura blameless e os desafios dos cen\u00e1rios cr\u00edticos, pude demonstrar que, mesmo sob press\u00e3o, a uni\u00e3o e a busca por solu\u00e7\u00f5es colaborativas podem garantir a excel\u00eancia operacional. Espero que este relato inspire outras mulheres a se aprofundarem no universo da engenharia de confiabilidade e a liderarem mudan\u00e7as significativas em seus ambientes profissionais.</p>","tags":["hist\u00f3ria","comunidade","Palestra","Diversidade e Inclus\u00e3o"]},{"location":"blog/2025/10/23/presta%C3%A7%C3%A3o-de-contas-do-devpr-conf-2025/","title":"Presta\u00e7\u00e3o de Contas do DevPR Conf 2025","text":"<p>Espero que estejam bem. Gostar\u00edamos de compartilhar algumas atualiza\u00e7\u00f5es importantes sobre o nosso recente evento. Primeiramente, estamos felizes em informar que conclu\u00edmos o evento com sucesso, estamos com saldo positivo.</p> <p>Vale ressaltar que foi nosso primeiro ano usando completamente a ferramenta, ent\u00e3o apesar de estarmos positivos financeiramente, encontramos alguns saldos a mais na conta e estamos tentando organizar para ter uma equival\u00eancia de 100% do saldo da nossa conta na Stone com a plataforma Open Collective.</p> <p>Se voc\u00ea tiver qualquer d\u00favida ou precisar de mais informa\u00e7\u00f5es, n\u00e3o hesite em participar das nossas reuni\u00f5es semanais. Estamos sempre dispon\u00edveis para ajudar e esclarecer qualquer quest\u00e3o.</p> <p>Agradecemos a todos pelo apoio cont\u00ednuo e pela participa\u00e7\u00e3o no evento. Continuaremos trabalhando para melhorar e trazer mais transpar\u00eancia e efici\u00eancia para nossos processos.</p> <p>Dados no Open Collective</p>","tags":["historia","comunidade","devparan\u00e1"]},{"location":"blog/2023/03/01/codaqui-e-seu-boletim-de-seguran%C3%A7a/","title":"Codaqui e seu Boletim de Seguran\u00e7a!","text":"<p>Oi! Eu sou o Elias, aluno da Codaqui, o meu objetivo aqui \u00e9 ensinar como eu criei um sistema de envio de e-mails, sem ter um servidor de e-mail e utilizando o GitHub para me alertar do boletim de seguran\u00e7a.</p> <p>Gostaria de j\u00e1 fazer um agradecimento pela ajuda do Fundador da Codaqui, Enderson Menezes, que esteve me auxiliando no processo de cria\u00e7\u00e3o desse projeto. </p> <p>Vamos l\u00e1!</p> Sem imagensCom imagens <p>1\u00b0 Passo</p> <ol> <li>V\u00e1 no seu perfil e procure por <code>Repositories</code>.</li> <li>Crie um novo reposit\u00f3rio no github clicando em <code>New</code>, com nome de sua prefer\u00eancia.</li> </ol> <p>2\u00b0 Passo</p> <ol> <li>Dentro desse reposit\u00f3rio crie dois arquivos <code>.sh</code>, clicando em <code>Add File</code>, <code>Create new file</code>.</li> <li>Chamados de <code>number.sh</code> e <code>script.sh</code>.</li> <li> <p>Ele s\u00e3o respons\u00e1veis por decodificar os dados.</p> </li> <li> <p>C\u00f3gido dos arquivos <code>.sh</code>: script.sh. number.sh.</p> </li> </ol> <p>3\u00b0 Passo</p> <ol> <li>Crie tamb\u00e9m uma pasta chamada de <code>.github</code>, no reposit\u00f3rio</li> <li>Depois aperte <code>/</code>, ele entender\u00e1 que voc\u00ea quer gerar uma pasta.</li> <li> <p>Por fim dentro dessa pasta crie um arquivo chamado <code>boletim.md</code>.</p> </li> <li> <p>C\u00f3digo do <code>boletim.md</code>: boletim.md.</p> </li> </ol> <p>4\u00ba Passo</p> <ol> <li>No mesmo diret\u00f3rio do arquivo <code>boletim.md</code>, crie outra pasta chamada de workflows.</li> <li> <p>Dentro do workflows crie um arquivo chamado de <code>boletim-diario.yml</code>.</p> </li> <li> <p>C\u00f3digo do <code>boletim-diario.yml</code>:</p> </li> </ol> <p>boletim-diario.yml</p> <p>5\u00b0 Passo </p> <p>OBS: Tudo j\u00e1 est\u00e1 normal, mas e necess\u00e1rio editar algumas parte do <code>boletim-diario.yml</code>.</p> <ul> <li>Procure por essas partes do c\u00f3digos e fa\u00e7a oque \u00e9 pedido abaixo!</li> </ul> <p>1\u00b0 altere isso:   <pre><code>on: \n    schedule:\n      - cron: '0 13 * * *'\n</code></pre>   para isso:</p> <p><pre><code>on: push\n</code></pre>   depois altere:   <pre><code>chmod +X ./number.sh\nbash ./number.sh\nvar=$( cat numero_final.txt )\ngh issue close $var\n</code></pre>   para isso:</p> <pre><code>#chmod +X ./number.sh\n#bash ./number.sh\n#var=$( cat numero_final.txt )\n#gh issue close $var\n</code></pre> <p>2\u00b0 quando terminar salve as modifica\u00e7\u00f5es e espere o Actions validar o c\u00f3digo, logo ap\u00f3s a cria\u00e7\u00e3o da primeira <code>Issue</code>, modifique o c\u00f3digo novamente e volte como estava antes.</p> <ul> <li>Para receber no E-mail leia nossa README.md, isso tamb\u00e9m \u00e9 valido na sua aplica\u00e7\u00e3o.</li> </ul> <p>1\u00b0 Passo</p> <ul> <li>Criar um reposit\u00f3rio no Github!</li> </ul> <p></p> <p>2\u00b0 Passo</p> <ul> <li>Criar scripts respons\u00e1veis por decodificar os dados.</li> </ul> <p></p> <ul> <li>C\u00f3digo usado para cria\u00e7\u00e3o dos scripts: script.sh / number.sh!</li> </ul> <p>3\u00ba Passo</p> <ul> <li>Criar pasta .github e arquivo md(Corpo para gerar ISSUES).</li> </ul> <p></p> <ul> <li>Aperte / depois de escrever .github para gerar uma pasta.</li> <li>C\u00f3digo usado para criar o boletim.md.</li> </ul> <p>4\u00b0 Passo</p> <ul> <li>Criar pasta workflows e arquivo yml(Respons\u00e1vel por iniciar as tarefas).</li> </ul> <p></p> <ul> <li>C\u00f3digo usado para criar boletim-diario.yml</li> </ul> <p>5\u00b0 Passo</p> <ul> <li>Para teste e funcionamento de tudo altere o arquivo yml como no gif abaixo</li> </ul> <p></p> <p>altere: <pre><code>on: \n    schedule:\n      - cron: '0 13 * * *'\n</code></pre> para</p> <p><pre><code>on: push\n</code></pre> E tamb\u00e9m altere: <pre><code>chmod +X ./number.sh\nbash ./number.sh\nvar=$( cat numero_final.txt )\ngh issue close $var\n</code></pre> para</p> <p><pre><code>#chmod +X ./number.sh\n#bash ./number.sh\n#var=$( cat numero_final.txt )\n#gh issue close $var\n</code></pre> - Depois de salvar espere o Actions validar o c\u00f3digo e gerar uma nova <code>Issue</code>. - Em seguida altere novamente o c\u00f3digo como o anterior do 4\u00b0 passo. - Pronto Est\u00e1 tudo funcionando! - Para receber no E-mail leia nossa README.md, isso tamb\u00e9m \u00e9 valido na sua aplica\u00e7\u00e3o.</p>","tags":["github","actions","queroajudar"]},{"location":"blog/2023/03/01/codaqui-e-seu-boletim-de-seguran%C3%A7a/#observacoes-importantes","title":"Observa\u00e7\u00f5es Importantes","text":"","tags":["github","actions","queroajudar"]},{"location":"blog/2023/03/01/codaqui-e-seu-boletim-de-seguran%C3%A7a/#1-observacao","title":"1\u00b0 Observa\u00e7\u00e3o","text":"<ul> <li>O c\u00f3digo pode ser totalmente moldado por sua preferencia, s\u00f3 \u00e9 preciso alterar o <code>script.sh</code> na linha abaixo <pre><code>xmllint --html --xpath \"/html/body/div[1]/main/section[2]/div/div/div/div/div/div[2]\" boletim1.txt 1&gt; boletim2.txt 2&gt; /dev/null\n</code></pre></li> <li>Especificamente tudo entre <code>\"\"</code>, para isso voc\u00ea deve entender a estrutura da p\u00e1gina, no qual ser\u00e1 pego as informa\u00e7\u00f5es.</li> </ul>","tags":["github","actions","queroajudar"]},{"location":"blog/2023/03/01/codaqui-e-seu-boletim-de-seguran%C3%A7a/#2-observacao","title":"2\u00b0 Observa\u00e7\u00e3o","text":"<ul> <li>O hor\u00e1rio est\u00e1 marcado para o Actions disparar a <code>Issue</code> as 13h, 0GMT, 10h no hor\u00e1rio de Brasilia!</li> <li>Voc\u00ea pode alterar o hor\u00e1rio mudando o c\u00f3digo mostrado abaixo: <pre><code>  schedule:\n     - cron: '0 13 * * *'\n</code></pre></li> </ul>","tags":["github","actions","queroajudar"]},{"location":"blog/2023/03/01/codaqui-e-seu-boletim-de-seguran%C3%A7a/#3-observacao","title":"3\u00b0 Observa\u00e7\u00e3o","text":"<ul> <li>Quais quer problemas futuros com o sistema criado podem ser variados, devem ser analisados.</li> <li> <p>Possiveis casos previstos:</p> </li> <li> <p>JasonEtco/create-an-issue@v2 atualiza a maneira de gerenciar o aquivo <code>.md</code> na pasta <code>.github</code>.</p> </li> <li>A parte do bash realiza a tarefa sem atualizar o arquivo gerado no processo criando um erro, nesse caso voc\u00ea s\u00f3 da um <code>push</code> mostrado no ultimo passo mostrado acima.</li> </ul>","tags":["github","actions","queroajudar"]},{"location":"blog/2023/03/01/codaqui-e-seu-boletim-de-seguran%C3%A7a/#4o-observacao","title":"4\u00ba Observa\u00e7\u00e3o","text":"<ul> <li>Os nomes de arquivos e vari\u00e1veis podem ser alteras, mas caso procure fazer isso, verifique se tudos os nomes modificados est\u00e3o certos para funcionar.</li> </ul>","tags":["github","actions","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/","title":"CHOWN: O que \u00e9?","text":"<p>O comando <code>chown</code> altera a propriedade do usu\u00e1rio de um arquivo, diret\u00f3rio ou link no Linux. Cada arquivo est\u00e1 associado a um usu\u00e1rio ou grupo propriet\u00e1rio. \u00c9 fundamental configurar as permiss\u00f5es de arquivos e pastas corretamente.</p>","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#requisitos-de-uso","title":"Requisitos de uso","text":"<ul> <li>Linux ou UNIX</li> <li>Usar o terminal/linha de comando</li> <li>Usar comando com privil\u00e9gios para mudar o propriet\u00e1rio</li> </ul> <p>Comando para dar privil\u00e9gio: <pre><code>sudo \n</code></pre> Rodar terminal no root do sistema: <pre><code>sudo su\n</code></pre></p>","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#_1","title":"CHOWN: O que \u00e9?","text":"","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#linux-chown-syntax","title":"Linux Chown Syntax","text":"<p><pre><code>chown [Op\u00e7\u00e3o] [Usu\u00e1rio][:Grupo] [Arquivos/Diret\u00f3rios] \n</code></pre> - [Op\u00e7\u00e3o] \u2013 O comando pode ser usado com ou sem op\u00e7\u00f5es adicionais. - [Usu\u00e1rio] \u2013 O nome de usu\u00e1rio ou o ID de usu\u00e1rio num\u00e9rico do novo propriet\u00e1rio de um arquivo. - [:] \u2013 Use dois pontos ao alterar um grupo de um arquivo. - [Grupo] \u2013 Alterar a propriedade do grupo de um arquivo \u00e9 opcional. - Arquivos/Diret\u00f3rios \u2013 Alvo</p> <p>N\u00e3o necessariamente precisa de um grupo, veremos mais a baixo!!</p>","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#como-alterar-o-proprietario-de-um-arquivo-no-dia-a-dia","title":"Como alterar o propriet\u00e1rio de um arquivo no dia a dia?","text":"<p>Terminal em root <pre><code>chown Usu\u00e1rio0 Pasta/Arquivo\n</code></pre> Terminal sem root <pre><code>sudo chown Usu\u00e1rio0 Pasta/Arquivo\n</code></pre></p> <ul> <li>Usu\u00e1rio0 \u2013 Nome do seu usu\u00e1rio.</li> <li> <p>Pasta/Arquivo \u2013 Diret\u00f3rio ou Arquivo.</p> </li> <li> <p>Tamb\u00e9m \u00e9 poss\u00edvel utilizar o UID(User ID) do seu usu\u00e1rio .</p> </li> </ul> <p>Supondo que essa pasta esteja com propriedade do Usu\u00e1rio1, assim voc\u00ea usar o comando acima, a propriedade dessa pasta passa para o Usu\u00e1rio0. </p>","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#como-alterar-o-grupo-de-um-arquivo","title":"Como alterar o grupo de um arquivo?","text":"<p>Terminal em root</p> <p><pre><code>chown :Grupo0 Pasta/Arquivo\n</code></pre>  Terminal sem root</p> <pre><code>sudo chown :Grupo0 Pasta/Arquivo\n</code></pre> <ul> <li>Grupo0 \u2013 Nome do seu grupo.</li> <li>Pasta/Arquivo \u2013 Diret\u00f3rio ou Arquivo.</li> </ul>","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#imagens","title":"Imagens","text":"<p>Usando usu\u00e1rio: </p> <p></p> <p></p> <p></p> <p>Usando UID:</p> <p></p> <p></p> <p></p> <p>Mostrar permiss\u00f5es do diret\u00f3rio atual:</p> <p></p> <p>Pegar UID</p> <p></p>","tags":["github","linux","queroajudar"]},{"location":"blog/2024/03/13/chown-o-que-%C3%A9/#extra","title":"Extra","text":"<ul> <li>Ver seus grupos usando chgrp</li> <li>Pegar seu UID</li> </ul> <pre><code>sudo id -u USUARIO\n</code></pre>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/","title":"O que \u00e9 SFML","text":"<p>O SFML(Simple and Fast Multimedia Library) \u00e9 uma biblioteca de desenvolvimento multim\u00eddia escrita em C++ que fornece uma interface simples para lidar com gr\u00e1ficos 2D, 3D, \u00e1udio, entrada do usu\u00e1rio (teclado, mouse, joystick), rede e janelas. Ele \u00e9 amplamente utilizado para criar jogos, simuladores e outras aplica\u00e7\u00f5es gr\u00e1ficas devido \u00e0 sua facilidade de uso, desempenho eficiente e suporte multiplataforma.</p> <p>Se esta se\u00e7\u00e3o ainda n\u00e3o foi preenchida, voc\u00ea pode expandi-la explicando os principais recursos do SFML, como: - Renderiza\u00e7\u00e3o gr\u00e1fica: Cria\u00e7\u00e3o de formas, sprites, texto e outros elementos visuais. - Manipula\u00e7\u00e3o de \u00e1udio: Reprodu\u00e7\u00e3o de sons e m\u00fasicas. - Gerenciamento de janelas: Cria\u00e7\u00e3o e controle de janelas de aplica\u00e7\u00e3o. - Entrada do usu\u00e1rio: Detec\u00e7\u00e3o de eventos de teclado, mouse e outros dispositivos. - Rede: Comunica\u00e7\u00e3o via TCP e UDP.</p>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#projeto-em-questao","title":"Projeto em quest\u00e3o","text":"<p>Neste projeto, optei por criar um exemplo simples \u2014 um cubo 3D \u2014 com o objetivo de apresentar de forma pr\u00e1tica o que \u00e9 poss\u00edvel construir utilizando este framework. A ideia \u00e9 fornecer uma base visual e acess\u00edvel para quem est\u00e1 come\u00e7ando, demonstrando como estruturas tridimensionais b\u00e1sicas podem ser renderizadas com facilidade.</p> <p>Este cubo serve como ponto de partida para explora\u00e7\u00f5es mais avan\u00e7adas, como anima\u00e7\u00f5es, intera\u00e7\u00f5es, ilumina\u00e7\u00e3o e composi\u00e7\u00e3o de cenas mais complexas. A imagem abaixo ilustra o resultado da implementa\u00e7\u00e3o e evidenciam parte do potencial que essa ferramenta oferece para o desenvolvimento gr\u00e1fico.</p> <p></p>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#configuracao-do-ambiente-para-desenvolvimento-com-sfml","title":"Configura\u00e7\u00e3o do Ambiente para Desenvolvimento com SFML","text":"","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#instalacao-do-sfml","title":"Instala\u00e7\u00e3o do SFML","text":"<p>Para iniciar o processo, precisamos instalar o framework SFML. A instala\u00e7\u00e3o varia de acordo com o sistema operacional. No caso, estou utilizando Debian 12 (image-6.1.0-34-amd64). Para instalar o SFML, execute o seguinte comando no terminal(\u00e9 para funcionar em distros baseadas no debian):</p> <pre><code>sudo apt-get install libsfml-dev\n</code></pre>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#windows-usando-vcpkg","title":"Windows usando vcpkg.","text":"<pre><code>vcpkg install sfml\n</code></pre>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#arch-usando-pacman","title":"Arch usando pacman.","text":"<pre><code>sudo pacman -S sfml\n</code></pre>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#fedora-usando-dnf","title":"Fedora usando dnf.","text":"<pre><code>sudo dnf install SFML-devel\n</code></pre>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#instalacao-do-gccg","title":"Instala\u00e7\u00e3o do GCC/G++","text":"<p>Ap\u00f3s instalar o SFML, \u00e9 necess\u00e1rio garantir que o compilador GCC/G++ esteja instalado. Para isso, utilize o comando:</p>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#debiandistros-baseadas-no-debian","title":"Debian(distros baseadas no debian)","text":"<pre><code>sudo apt install build-essential\n</code></pre> <p>No Windows, voc\u00ea pode instalar o GCC/G++ utilizando o MinGW ou MSYS2:</p> <ol> <li>MinGW(recomendo):</li> <li>Baixe o instalador do MinGW no site oficial: MinGW.</li> <li> <p>Durante a instala\u00e7\u00e3o, selecione os pacotes para o compilador GCC/G++.</p> </li> <li> <p>MSYS2:</p> </li> <li>Baixe e instale o MSYS2: MSYS2.</li> <li>No terminal do MSYS2, execute o comando:      <pre><code>pacman -S mingw-w64-x86_64-gcc\n</code></pre></li> </ol>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#arch-linux","title":"Arch Linux","text":"<p>No Arch Linux, use o gerenciador de pacotes <code>pacman</code> para instalar o GCC/G++:</p> <pre><code>sudo pacman -S base-devel\n</code></pre>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#fedora","title":"Fedora","text":"<p>No Fedora, use o gerenciador de pacotes <code>dnf</code> para instalar o GCC/G++:</p> <pre><code>sudo dnf groupinstall \"Development Tools\"\nsudo dnf install gcc-c++\n</code></pre>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/05/04/o-que-%C3%A9-sfml/#criando-o-projeto","title":"Criando o projeto","text":"<ol> <li> <p>Crie um diret\u00f3rio para o projeto:    <pre><code>mkdir meu_projeto_sfml\ncd meu_projeto_sfml\n</code></pre></p> </li> <li> <p>Crie um arquivo de c\u00f3digo-fonte principal, <code>main.cpp</code>:    <pre><code>nano main.cpp\n</code></pre></p> </li> <li> <p>Escreva o seguinte c\u00f3digo b\u00e1sico no arquivo <code>main.cpp</code> para testar a integra\u00e7\u00e3o com o SFML:    <pre><code>#include \"WIN.h\" // Inclui o arquivo de cabe\u00e7alho da classe WIN\n\nint main()\n{\n   // Cria um objeto de janela com (largura, altura, t\u00edtulo, cor de fundo e taxa de quadros especificados)\n   WIN window(800, 600, \"Cubo\", sf::Color::Black, 160);\n\n   // Executa o loop principal da janela\n   window.run();\n\n   return 0; // Encerra o programa\n}\n// fontes materiais:\n// https://www.sfml-dev.org/tutorials/2.5/window-window.php\n// https://www.sfml-dev.org/tutorials/2.5/graphics-shape.php\n// https://www.sfml-dev.org/tutorials/2.5/graphics-vertex-array.php#vertex-array\n\n// calculos matematicos:\n// https://pt.wikipedia.org/wiki/Matriz_de_rota%C3%A7%C3%A3o\n</code></pre></p> </li> <li> <p>Crie um arquivo de c\u00f3digo-fonte principal, <code>CUBE.cpp</code>:    <pre><code>nano CUBE.cpp\n</code></pre></p> </li> <li> <p>Escreva o seguinte c\u00f3digo b\u00e1sico no arquivo <code>CUBE.cpp</code> para testar a integra\u00e7\u00e3o com o SFML:    <pre><code>#include \"CUBE.h\"\n#include &lt;cmath&gt;\n\n// Construtor\n// Inicializa o cubo com um tamanho especificado e define sua cor padr\u00e3o como branca\nCube::Cube(float size) : color(Color::White) {\n   // Define os v\u00e9rtices do cubo\n   // Calcula metade do tamanho para posicionar os v\u00e9rtices em torno da origem\n   float halfSize = size / 2.0f;\n   vertices = {\n      Vector3f(-halfSize, -halfSize, -halfSize), // V\u00e9rtice 0\n      Vector3f(halfSize, -halfSize, -halfSize),  // V\u00e9rtice 1\n      Vector3f(halfSize, halfSize, -halfSize),   // V\u00e9rtice 2\n      Vector3f(-halfSize, halfSize, -halfSize),  // V\u00e9rtice 3\n      Vector3f(-halfSize, -halfSize, halfSize),  // V\u00e9rtice 4\n      Vector3f(halfSize, -halfSize, halfSize),   // V\u00e9rtice 5\n      Vector3f(halfSize, halfSize, halfSize),    // V\u00e9rtice 6\n      Vector3f(-halfSize, halfSize, halfSize),   // V\u00e9rtice 7\n   };\n\n   // Define as faces do cubo (\u00edndices dos v\u00e9rtices)\n   // Cada face \u00e9 representada por 4 \u00edndices que apontam para os v\u00e9rtices\n   faces = {{\n      {0, 1, 2, 3}, // Frente\n      {4, 5, 6, 7}, // Tr\u00e1s\n      {0, 4, 7, 3}, // Esquerda\n      {1, 5, 6, 2}, // Direita\n      {0, 1, 5, 4}, // Topo\n      {3, 2, 6, 7}, // Fundo\n   }};\n}\n\n// Atualiza a rota\u00e7\u00e3o do cubo\n// Aplica rota\u00e7\u00f5es nos eixos X, Y e Z para todos os v\u00e9rtices do cubo\nvoid Cube::rotate(float angleX, float angleY, float angleZ) {\n   // Calcula os cossenos e senos dos \u00e2ngulos para otimizar os c\u00e1lculos\n   float cosX = cos(angleX), sinX = sin(angleX);\n   float cosY = cos(angleY), sinY = sin(angleY);\n   float cosZ = cos(angleZ), sinZ = sin(angleZ);\n\n   // Itera sobre todos os v\u00e9rtices para aplicar as rota\u00e7\u00f5es\n   for (auto &amp;vertex : vertices) {\n      // Rota\u00e7\u00e3o em torno do eixo X\n      float y = vertex.y * cosX - vertex.z * sinX;\n      float z = vertex.y * sinX + vertex.z * cosX;\n      vertex.y = y;\n      vertex.z = z;\n\n      // Rota\u00e7\u00e3o em torno do eixo Y\n      float x = vertex.x * cosY + vertex.z * sinY;\n      z = -vertex.x * sinY + vertex.z * cosY;\n      vertex.x = x;\n      vertex.z = z;\n\n      // Rota\u00e7\u00e3o em torno do eixo Z\n      x = vertex.x * cosZ - vertex.y * sinZ;\n      y = vertex.x * sinZ + vertex.y * cosZ;\n      vertex.x = x;\n      vertex.y = y;\n   }\n}\n\n// Desenha o cubo na janela\n// Renderiza as faces do cubo na tela\nvoid Cube::draw(RenderWindow &amp;window) {\n   // Obtenha o tamanho da janela para centralizar o cubo\n   Vector2u windowSize = window.getSize();\n   float centerX = windowSize.x / 2.0f; // Coordenada X do centro da janela\n   float centerY = windowSize.y / 2.0f; // Coordenada Y do centro da janela\n\n   // Define as cores para cada face do cubo\n   std::array&lt;Color, 6&gt; faceColors = {\n      Color::Red,    // Frente\n      Color::Green,  // Tr\u00e1s\n      Color::Blue,   // Esquerda\n      Color::Yellow, // Direita\n      Color::Cyan,   // Topo\n      Color::Magenta // Fundo\n   };\n\n   // Itera sobre as faces do cubo\n   for (size_t i = 0; i &lt; faces.size(); i++) {\n      ConvexShape polygon; // Cria um pol\u00edgono convexo para representar a face\n      polygon.setPointCount(4); // Cada face tem 4 v\u00e9rtices\n      polygon.setFillColor(faceColors[i]); // Define a cor da face\n\n      // Define os pontos do pol\u00edgono com base nos v\u00e9rtices da face\n      for (int j = 0; j &lt; 4; j++) {\n            Vector3f vertex = vertices[faces[i][j]]; // Obt\u00e9m o v\u00e9rtice correspondente\n            polygon.setPoint(j, Vector2f(vertex.x + centerX, vertex.y + centerY)); // Ajusta para o centro da tela\n      }\n\n      // Desenha o pol\u00edgono na janela\n      window.draw(polygon);\n   }\n}\n</code></pre></p> </li> <li> <p>Crie um arquivo de c\u00f3digo-fonte principal, <code>CUBE.h</code>:    <pre><code>nano CUBE.h\n</code></pre></p> </li> <li> <p>Escreva o seguinte c\u00f3digo b\u00e1sico no arquivo <code>CUBE.h</code> para testar a integra\u00e7\u00e3o com o SFML:    <pre><code>#ifndef CUBE_H\n#define CUBE_H\n\n#include &lt;SFML/Graphics.hpp&gt;\n#include &lt;array&gt;\n\nusing namespace sf;\n\n// Defini\u00e7\u00e3o da classe Cube\nclass Cube {\nprivate:\n   // V\u00e9rtices do cubo (8 v\u00e9rtices para um cubo 3D)\n   std::array&lt;Vector3f, 8&gt; vertices;\n\n   // Faces do cubo (6 faces, cada uma definida por 4 \u00edndices de v\u00e9rtices)\n   std::array&lt;std::array&lt;int, 4&gt;, 6&gt; faces;\n\n   // Cor do cubo\n   Color color;\n\n   // Matriz de proje\u00e7\u00e3o para simular a proje\u00e7\u00e3o 3D para 2D\n   float projectionMatrix[4][4];\n\n   // Fun\u00e7\u00e3o privada que atualiza a proje\u00e7\u00e3o dos v\u00e9rtices do cubo para coordenadas 2D\n   void projectVertices();\n\npublic:\n   // Construtor da classe Cube, que inicializa o cubo com um tamanho espec\u00edfico\n   Cube(float size);\n\n   // Fun\u00e7\u00e3o p\u00fablica que atualiza a rota\u00e7\u00e3o do cubo em torno dos eixos X, Y e Z\n   void rotate(float angleX, float angleY, float angleZ);\n\n   // Fun\u00e7\u00e3o p\u00fablica que desenha o cubo na janela fornecida\n   void draw(RenderWindow &amp;window);\n};\n\n#endif // CUBE_H\n</code></pre></p> </li> <li> <p>Crie um arquivo de c\u00f3digo-fonte principal, <code>WIN.cpp</code>:    <pre><code>nano WIN.cpp\n</code></pre></p> </li> <li> <p>Escreva o seguinte c\u00f3digo b\u00e1sico no arquivo <code>WIN.cpp</code> para testar a integra\u00e7\u00e3o com o SFML:    <pre><code>#include \"WIN.h\"\n\n// Construtor\n// O construtor da classe WIN inicializa os atributos da janela, como largura, altura, t\u00edtulo, cor de fundo e limite de quadros por segundo.\n// Al\u00e9m disso, inicializa o cubo com um tamanho fixo de 300 e cria a janela SFML.\nWIN::WIN(int width, int height, const std::string &amp;title, Color backgroundColor, int frameRateLimit)\n   : cube(300) // Inicializa o cubo com tamanho 300\n{\n   this-&gt;width = width; // Define a largura da janela\n   this-&gt;height = height; // Define a altura da janela\n   this-&gt;title = title; // Define o t\u00edtulo da janela\n   this-&gt;backgroundColor = backgroundColor; // Define a cor de fundo da janela\n   this-&gt;frameRateLimit = frameRateLimit; // Define o limite de quadros por segundo\n\n\n   // Cria a janela SFML com as configura\u00e7\u00f5es especificadas\n   window.create(VideoMode(width, height), title, Style::Titlebar | Style::Close);\n}\n\n// Destrutor\n// O destrutor da classe WIN \u00e9 declarado, mas n\u00e3o possui implementa\u00e7\u00e3o espec\u00edfica no momento.\nWIN::~WIN() {\n   // Implementa\u00e7\u00e3o do destrutor (vazia por enquanto)\n}\n\n// Inicializa a janela\n// Configura o limite de quadros por segundo e limpa a janela com a cor de fundo especificada.\nvoid WIN::initWindow() {\n   window.setFramerateLimit(frameRateLimit); // Define o limite de quadros por segundo\n   window.clear(backgroundColor); // Limpa a janela com a cor de fundo\n}\n\n// Loop principal da janela\n// O m\u00e9todo run \u00e9 respons\u00e1vel por executar o loop principal da aplica\u00e7\u00e3o.\n// Ele inicializa a janela, lida com eventos, atualiza o estado e renderiza o conte\u00fado.\nvoid WIN::run() {\n   initWindow(); // Inicializa a janela\n\n   // Loop principal da aplica\u00e7\u00e3o\n   while (window.isOpen()) {\n      handleEvents(); // Lida com os eventos da janela\n      update();       // Atualiza o estado da aplica\u00e7\u00e3o\n      render();       // Renderiza o conte\u00fado na janela\n   }\n}\n\n// Lida com eventos\n// Este m\u00e9todo processa os eventos da janela, como o fechamento da mesma.\nvoid WIN::handleEvents() {\n   Event event; // Objeto para armazenar eventos\n   while (window.pollEvent(event)) { // Verifica se h\u00e1 eventos na fila\n      if (event.type == Event::Closed) { // Se o evento for de fechamento\n            window.close(); // Fecha a janela\n      }\n   }\n}\n\n// Atualiza a janela\n// Atualiza o estado do cubo, aplicando uma rota\u00e7\u00e3o cont\u00ednua.\nvoid WIN::update() {\n   cube.rotate(0.01f, 0.01f, 0.01f); // Rotaciona o cubo em torno dos eixos X, Y e Z\n}\n\n// Renderiza a janela\n// Limpa a janela, desenha o cubo e exibe o conte\u00fado renderizado.\nvoid WIN::render() {\n   window.clear(backgroundColor); // Limpa a janela com a cor de fundo\n   cube.draw(window);             // Desenha o cubo na janela\n   window.display();              // Exibe o conte\u00fado renderizado na janela\n}\n</code></pre></p> </li> <li> <p>Crie um arquivo de c\u00f3digo-fonte principal, <code>WIN.h</code>:       <pre><code>nano WIN.h\n</code></pre></p> </li> <li> <p>Escreva o seguinte c\u00f3digo b\u00e1sico no arquivo <code>WIN.h</code> para testar a integra\u00e7\u00e3o com o SFML:       <pre><code>#ifndef WIN_H\n#define WIN_H\n\n#include &lt;SFML/Graphics.hpp&gt;\n#include \"CUBE.h\"\n\nusing namespace sf;\n\n// Classe que representa a janela principal do programa\nclass WIN {\nprivate:\n   // Propriedades da janela\n   RenderWindow window; // Objeto da janela SFML\n   int width, height; // Largura e altura da janela\n   std::string title; // T\u00edtulo da janela\n   Color backgroundColor; // Cor de fundo da janela\n   int frameRateLimit; // Limite de taxa de quadros por segundo\n\n   // Objeto do cubo\n   Cube cube; // Inst\u00e2ncia da classe Cube\n\npublic:\n   // Construtor\n   WIN(int width, int height, const std::string &amp;title, Color backgroundColor, int frameRateLimit);\n   // Inicializa os atributos da classe com os valores fornecidos\n\n   // Destrutor\n   ~WIN();\n   // Libera recursos, se necess\u00e1rio\n\n   // Inicializa a janela\n   void initWindow();\n   // Configura a janela com os par\u00e2metros fornecidos\n\n   // Executa o loop principal da janela\n   void run();\n   // Mant\u00e9m a janela aberta e gerencia o ciclo de eventos, atualiza\u00e7\u00e3o e renderiza\u00e7\u00e3o\n\n   // Lida com os eventos da janela\n   void handleEvents();\n   // Processa eventos como entrada do teclado, mouse, etc.\n\n   // Atualiza o estado da janela\n   void update();\n   // Atualiza os elementos da janela, como o cubo\n\n   // Renderiza o conte\u00fado na janela\n   void render();\n   // Desenha os elementos na tela\n};\n\n#endif // WIN_H\n</code></pre></p> </li> <li> <p>Compile o c\u00f3digo usando o <code>g++</code>:    <pre><code>g++ *.cpp -o meu_projeto -lsfml-graphics -lsfml-window -lsfml-system\n./meu_projeto\n</code></pre>    Caso seja Windows <pre><code>g++ *.cpp -o meu_projeto -I\"path\\to\\vcpkg\\installed\\x64-windows\\include\" -L\"path\\to\\vcpkg\\installed\\x64-windows\\lib\" -lsfml-graphics -lsfml-window -lsfml-system\n</code></pre> <code>path\\to\\...</code> substitua pelo caminho correto.</p> </li> </ol>","tags":["github","programa\u00e7\u00e3o","queroajudar","C++"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/","title":"O que \u00e9 o GIT?","text":"<p>Git \u00e9 um sistema de controle de vers\u00e3o distribu\u00eddo acess\u00edvel pela linha de comando (CLI), que permite criar, rastrear e colaborar em um ou v\u00e1rios reposit\u00f3rios diretamente no terminal. Com ele, \u00e9 poss\u00edvel registrar altera\u00e7\u00f5es, criar branches, fazer merges e manter o hist\u00f3rico do c\u00f3digo com seguran\u00e7a.</p>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#como-instalar-o-git","title":"Como instalar o GIT?","text":"","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":"<ul> <li>Acesso ao terminal/linha de comando</li> <li>Privil\u00e9gios de administrador (sudo)</li> </ul>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#linux","title":"\ud83d\udc27 Linux","text":"","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#distribuicoes-baseadas-no-debian-ubuntu-mint-etc","title":"Distribui\u00e7\u00f5es baseadas no Debian (Ubuntu, Mint, etc.)","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install git\n</code></pre>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#distribuicoes-fedorarhelcentos","title":"Distribui\u00e7\u00f5es Fedora/RHEL/CentOS","text":"<pre><code>sudo dnf install git\n</code></pre>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#arch-linux","title":"Arch Linux","text":"<pre><code>sudo pacman -S git\n</code></pre>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#macos","title":"\ud83c\udf4e macOS","text":"","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#usando-homebrew-recomendado","title":"Usando Homebrew (Recomendado)","text":"<pre><code>brew install git\n</code></pre>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#usando-macports","title":"Usando MacPorts","text":"<pre><code>sudo port install git\n</code></pre> <p>\ud83d\udca1 Curiosidade: O Homebrew tamb\u00e9m pode ser usado no Linux como alternativa aos gerenciadores nativos!</p>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#windows","title":"\ud83e\ude9f Windows","text":"","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#opcao-1-windows-subsystem-for-linux-wsl","title":"Op\u00e7\u00e3o 1: Windows Subsystem for Linux (WSL)","text":"<ol> <li> <p>Instalar WSL: <pre><code>wsl --install -d Debian\n</code></pre></p> </li> <li> <p>Configurar WSL 2 como padr\u00e3o: <pre><code>wsl --set-default-version 2\n</code></pre></p> </li> <li> <p>Instalar Git no Debian: <pre><code>sudo apt update &amp;&amp; sudo apt install git\n</code></pre> Veja o t\u00f3pico acima de como instalar no Debian.</p> </li> </ol>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#opcao-2-instalacao-nativa","title":"Op\u00e7\u00e3o 2: Instala\u00e7\u00e3o Nativa","text":"<p>Download autom\u00e1tico via PowerShell: <pre><code>winget install --id Git.Git -e --source winget\n</code></pre></p> <p>Caso n\u00e3o funcione, voc\u00ea pode baixar o instalador diretamente do site oficial: git-scm.com. e instalar manualmente a vers\u00e3o GUI.</p>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#configuracao-inicial","title":"\u2699\ufe0f Configura\u00e7\u00e3o Inicial","text":"<p>Configurar identidade: <pre><code>git config --global user.name \"Seu Nome\"\ngit config --global user.email \"seuemail@exemplo.com\"\n</code></pre></p> <p>No VSCode</p> <p>1\ufe0f\u20e3 Clonar um reposit\u00f3rio para testar o funcionamento(metodo f\u00e1cil): <pre><code># Institucional da codaqui por exemplo\ngit clone https://github.com/codaqui/institucional.git\n</code></pre></p>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/18/o-que-%C3%A9-o-git/#clonando-um-repositorio-no-vscode","title":"\ud83d\ude80 Clonando um Reposit\u00f3rio no VSCode","text":"<p>2\ufe0f\u20e3 No seu VSCode, clique no \u00edcone de controle de c\u00f3digo-fonte </p> <p></p> <p>3\ufe0f\u20e3 Clique em CLONE REPOSITORY </p> <p></p> <p>4\ufe0f\u20e3 Na parte inferior da barra de pesquisa, selecione CLONE FROM GITHUB </p> <p></p> <p>5\ufe0f\u20e3 Ser\u00e1 exibida a seguinte mensagem: </p> <p></p> <p>6\ufe0f\u20e3 Clique em \u2705 Allow </p> <p>7\ufe0f\u20e3 Fa\u00e7a login no GitHub \ud83d\udd11</p>","tags":["github","linux","queroajudar"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/","title":"Cloudflare Tunnel: economizando IPv4 ao expor servi\u00e7os em VMs","text":"<p>Este tutorial mostra, passo a passo e com exemplos pr\u00e1ticos, como expor servi\u00e7os que rodam em uma m\u00e1quina virtual (VM) sem precisar de um IPv4 p\u00fablico dedicado, usando o Cloudflare Tunnel (cloudflared) no plano gratuito. O objetivo \u00e9 um laborat\u00f3rio reprodut\u00edvel: criar uma VM, instalar sua aplica\u00e7\u00e3o (ex.: um \"piping server\"), configurar o t\u00fanel e publicar um hostname gerenciado pelo Cloudflare.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#o-que-voce-vai-aprender","title":"O que voc\u00ea vai aprender","text":"<ul> <li>Por que usar uma VM para projetos e laborat\u00f3rios r\u00e1pidos</li> <li>Como criar uma VM (vis\u00e3o geral) \u2014 foco no Azure (passos essenciais)</li> <li>Criar conta no Cloudflare e preparar o dom\u00ednio</li> <li>Configurar Zero Trust / Access de forma b\u00e1sica</li> <li>Instalar e configurar o Cloudflare Tunnel (cloudflared) na VM</li> <li>Expor um servi\u00e7o (ex.: piping server) atrav\u00e9s do t\u00fanel e testar</li> </ul>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#motivador","title":"Motivador","text":"<p>Projetos caseiros muitas vezes precisam ser acess\u00edveis pela internet. Tradicionalmente isso exige um IPv4 p\u00fablico, que pode ter custo elevado ou ser limitado pelo provedor. O Cloudflare Tunnel permite que voc\u00ea exponha servi\u00e7os locais por meio de um t\u00fanel seguro at\u00e9 a rede Cloudflare, sem precisar de IP p\u00fablico. No plano gratuito \u00e9 poss\u00edvel reduzir custos e manter controle sobre DNS, pol\u00edticas e roteamento.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#checklist-rapido-pre-requisitos","title":"Checklist r\u00e1pido (pr\u00e9-requisitos)","text":"<ul> <li>Conta em um provedor de nuvem (ex.: Azure) com permiss\u00e3o para criar uma VM.</li> <li>Conta gratuita no Cloudflare e dom\u00ednio gerenci\u00e1vel no Cloudflare (DNS).</li> <li>Acesso SSH \u00e0 VM.<ul> <li>Recomenda-se usar o painel do Provider apenas para instalar o Cloudflared, e depois usar o Browser SSH do Cloudflare.</li> </ul> </li> <li>Ferramentas b\u00e1sicas: curl, sudo, systemd</li> </ul> <p>Se alguma etapa n\u00e3o for poss\u00edvel (ex.: voc\u00ea n\u00e3o tem dom\u00ednio), h\u00e1 alternativas: testar localmente com <code>cloudflared tunnel run</code> e usar um subdom\u00ednio tempor\u00e1rio do Cloudflare durante o login interativo.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#1-breve-explicacao-maquinas-virtuais-e-por-que-usa-las","title":"1 \u2014 Breve explica\u00e7\u00e3o: m\u00e1quinas virtuais e por que us\u00e1-las","text":"<p>M\u00e1quinas virtuais s\u00e3o inst\u00e2ncias isoladas que rodem um sistema operacional completo. Mesmo com arquiteturas modernas (containers, serverless), VMs ainda s\u00e3o \u00fateis para:</p> <ul> <li>Ambientes persistentes para servi\u00e7os de background</li> <li>Testes de rede e configura\u00e7\u00f5es de baixo n\u00edvel</li> <li>Executar bin\u00e1rios e ferramentas que exigem ambiente full-OS</li> </ul> <p>Para este tutorial usamos uma VM como host do servi\u00e7o (piping server) e do agente <code>cloudflared</code> que estabelece o t\u00fanel.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#2-criando-a-vm-visao-geral-azure","title":"2 \u2014 Criando a VM (vis\u00e3o geral \u2014 Azure)","text":"","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#20-pre-requisitos","title":"2.0 - Pr\u00e9-requisitos","text":"<p>Instala\u00e7\u00e3o do Azure CLI e login na conta Azure.</p> <pre><code>az login\n</code></pre>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#21-criar-grupo-de-recurso","title":"2.1 - Criar grupo de recurso","text":"<pre><code>az group create --name tutorial-codaqui --location eastus\n</code></pre>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#22-criar-a-vm-sem-ipv4","title":"2.2 - Criar a VM sem IPv4","text":"<p>Para um fluxo mais controlado (e reprodut\u00edvel) use um ARM template com um arquivo de par\u00e2metros JSON \u2014 esse \u00e9 o esquema esperado para o arquivo de par\u00e2metros. Salve o JSON abaixo como <code>vm-parameters.json</code> e tenha o template ARM (<code>vm-template.json</code>) ao lado.</p> <p>Exemplo do comando de deploy:</p> <pre><code>az deployment group create \\\n   --resource-group tutorial-codaqui \\\n   --template-file vm-template.json \\\n   --parameters @vm-parameters.json\n</code></pre> Exemplo de vm-template.json <pre><code>{\n    \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n        \"location\": {\n            \"type\": \"string\"\n        },\n        \"networkInterfaceName\": {\n            \"type\": \"string\"\n        },\n        \"networkSecurityGroupName\": {\n            \"type\": \"string\"\n        },\n        \"networkSecurityGroupRules\": {\n            \"type\": \"array\"\n        },\n        \"subnetName\": {\n            \"type\": \"string\"\n        },\n        \"virtualNetworkName\": {\n            \"type\": \"string\"\n        },\n        \"addressPrefixes\": {\n            \"type\": \"array\"\n        },\n        \"subnets\": {\n            \"type\": \"array\"\n        },\n\n        \"virtualMachineName\": {\n            \"type\": \"string\"\n        },\n        \"virtualMachineComputerName\": {\n            \"type\": \"string\"\n        },\n        \"virtualMachineRG\": {\n            \"type\": \"string\"\n        },\n        \"osDiskType\": {\n            \"type\": \"string\"\n        },\n        \"osDiskSizeGiB\": {\n            \"type\": \"int\"\n        },\n        \"osDiskDeleteOption\": {\n            \"type\": \"string\"\n        },\n        \"virtualMachineSize\": {\n            \"type\": \"string\"\n        },\n        \"nicDeleteOption\": {\n            \"type\": \"string\"\n        },\n        \"adminUsername\": {\n            \"type\": \"string\"\n        },\n        \"adminPassword\": {\n            \"type\": \"secureString\"\n        }\n    },\n    \"variables\": {\n        \"nsgId\": \"[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]\",\n        \"vnetName\": \"[parameters('virtualNetworkName')]\",\n        \"vnetId\": \"[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]\",\n        \"subnetRef\": \"[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]\"\n    },\n    \"resources\": [\n        {\n            \"name\": \"[parameters('networkInterfaceName')]\",\n            \"type\": \"Microsoft.Network/networkInterfaces\",\n            \"apiVersion\": \"2022-11-01\",\n            \"location\": \"[parameters('location')]\",\n            \"dependsOn\": [\n                \"[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]\",\n                \"[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]\"\n            ],\n            \"properties\": {\n                \"ipConfigurations\": [\n                    {\n                        \"name\": \"ipconfig1\",\n                        \"properties\": {\n                            \"subnet\": {\n                                \"id\": \"[variables('subnetRef')]\"\n                            },\n                            \"privateIPAllocationMethod\": \"Dynamic\"\n                        }\n                    }\n                ],\n                \"networkSecurityGroup\": {\n                    \"id\": \"[variables('nsgId')]\"\n                }\n            }\n        },\n        {\n            \"name\": \"[parameters('networkSecurityGroupName')]\",\n            \"type\": \"Microsoft.Network/networkSecurityGroups\",\n            \"apiVersion\": \"2020-05-01\",\n            \"location\": \"[parameters('location')]\",\n            \"properties\": {\n                \"securityRules\": \"[parameters('networkSecurityGroupRules')]\"\n            }\n        },\n        {\n            \"name\": \"[parameters('virtualNetworkName')]\",\n            \"type\": \"Microsoft.Network/virtualNetworks\",\n            \"apiVersion\": \"2024-01-01\",\n            \"location\": \"[parameters('location')]\",\n            \"properties\": {\n                \"addressSpace\": {\n                    \"addressPrefixes\": \"[parameters('addressPrefixes')]\"\n                },\n                \"subnets\": \"[parameters('subnets')]\"\n            }\n        },\n\n        {\n            \"name\": \"[parameters('virtualMachineName')]\",\n            \"type\": \"Microsoft.Compute/virtualMachines\",\n            \"apiVersion\": \"2024-03-01\",\n            \"location\": \"[parameters('location')]\",\n            \"dependsOn\": [\n                \"[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfaceName'))]\"\n            ],\n            \"properties\": {\n                \"hardwareProfile\": {\n                    \"vmSize\": \"[parameters('virtualMachineSize')]\"\n                },\n                \"storageProfile\": {\n                    \"osDisk\": {\n                        \"createOption\": \"fromImage\",\n                        \"managedDisk\": {\n                            \"storageAccountType\": \"[parameters('osDiskType')]\"\n                        },\n                        \"diskSizeGB\": \"[parameters('osDiskSizeGiB')]\",\n                        \"deleteOption\": \"[parameters('osDiskDeleteOption')]\"\n                    },\n                    \"imageReference\": {\n                        \"publisher\": \"Canonical\",\n                        \"offer\": \"0001-com-ubuntu-server-jammy\",\n                        \"sku\": \"22_04-lts-gen2\",\n                        \"version\": \"latest\"\n                    }\n                },\n                \"networkProfile\": {\n                    \"networkInterfaces\": [\n                        {\n                            \"id\": \"[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaceName'))]\",\n                            \"properties\": {\n                                \"deleteOption\": \"[parameters('nicDeleteOption')]\"\n                            }\n                        }\n                    ]\n                },\n                \"securityProfile\": {},\n                \"osProfile\": {\n                    \"computerName\": \"[parameters('virtualMachineComputerName')]\",\n                    \"adminUsername\": \"[parameters('adminUsername')]\",\n                    \"adminPassword\": \"[parameters('adminPassword')]\"\n                }\n            }\n        }\n    ],\n    \"outputs\": {\n        \"adminUsername\": {\n            \"type\": \"string\",\n            \"value\": \"[parameters('adminUsername')]\"\n        }\n    }\n}\n</code></pre> Exemplo de `vm-parameters.json` (schema/valores) <pre><code>{\n\"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\",\n\"contentVersion\": \"1.0.0.0\",\n\"parameters\": {\n    \"location\": { \"value\": \"eastus\" },\n    \"networkInterfaceName\": { \"value\": \"tutorial-codaqui329\" },\n    \"networkSecurityGroupName\": { \"value\": \"tutorial-codaqui-nsg\" },\n    \"networkSecurityGroupRules\": { \"value\": [] },\n    \"subnetName\": { \"value\": \"default\" },\n    \"virtualNetworkName\": { \"value\": \"tutorial-codaqui-vnet\" },\n    \"addressPrefixes\": { \"value\": [\"10.1.0.0/16\"] },\n    \"subnets\": { \"value\": [{ \"name\": \"default\", \"properties\": { \"addressPrefix\": \"10.1.1.0/24\" } }] },\n    \"virtualMachineName\": { \"value\": \"tutorial-codaqui\" },\n    \"virtualMachineComputerName\": { \"value\": \"tutorial-codaqu\" },\n    \"virtualMachineRG\": { \"value\": \"teste\" },\n    \"osDiskType\": { \"value\": \"Premium_LRS\" },\n    \"osDiskSizeGiB\": { \"value\": 64 },\n    \"osDiskDeleteOption\": { \"value\": \"Delete\" },\n    \"virtualMachineSize\": { \"value\": \"Standard_B1s\" },\n    \"nicDeleteOption\": { \"value\": \"Detach\" },\n    \"adminUsername\": { \"value\": \"codaqui\" },\n    \"adminPassword\": { \"value\": \"CoDAqui123!\" }\n}\n}\n</code></pre> <p>Observa\u00e7\u00f5es:</p> <ul> <li>O template cria uma VM Ubuntu Linux (gratuita) com autentica\u00e7\u00e3o por senha.</li> <li>Use uma senha forte (exemplo: <code>CoDAqui123!</code>) ou altere no arquivo de par\u00e2metros.</li> <li>Sem IP p\u00fablico, use o Azure Serial Console ou Azure Bastion para acessar a VM ap\u00f3s o deploy.</li> <li>O Cloudflare Tunnel far\u00e1 o roteamento, eliminando a necessidade de IP p\u00fablico fixo.</li> </ul> <p>Depois do deploy, voc\u00ea pode conectar via console do Azure Portal (Serial Console) usando o usu\u00e1rio <code>codaqui</code> e a senha definida.</p> <p>Observa\u00e7\u00e3o: a VM precisa de sa\u00edda para internet para que o <code>cloudflared</code> consiga estabelecer o t\u00fanel.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#3-criar-conta-no-cloudflare-e-configurar-dns","title":"3 \u2014 Criar conta no Cloudflare e configurar DNS","text":"<ol> <li>Crie uma conta gratuita em https://dash.cloudflare.com</li> <li>Adicione seu dom\u00ednio e aponte NS para o Cloudflare</li> <li>No painel DNS, adicione um registro CNAME ou A para o subdom\u00ednio que voc\u00ea quer usar; mais adiante vamos mapear esse hostname para o t\u00fanel (Cloudflare criar\u00e1 o registro correto quando usarmos <code>cloudflared tunnel route dns</code>).</li> </ol> <p>Dica: no plano gratuito voc\u00ea j\u00e1 tem acesso ao servi\u00e7o de DNS e a funcionalidades b\u00e1sicas de Zero Trust (Access). N\u00e3o \u00e9 necess\u00e1rio contratar plano pago para este fluxo b\u00e1sico.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#4-nocoes-basicas-de-zero-trust-opcional-nessa-etapa","title":"4 \u2014 No\u00e7\u00f5es b\u00e1sicas de Zero Trust (opcional nessa etapa)","text":"<p>O Zero Trust no Cloudflare (Access) permite proteger o acesso ao host com pol\u00edticas (e.g., SSO, lista de usu\u00e1rios). Para um laborat\u00f3rio voc\u00ea pode:</p> <ul> <li>Criar uma aplica\u00e7\u00e3o em Access e exigir autentica\u00e7\u00e3o via GitHub/Google</li> <li>Usar pol\u00edticas por endere\u00e7o IP ou por identidade</li> </ul> <p>Essas configura\u00e7\u00f5es ficam no painel \"Zero Trust\" (antigo Access) e podem ser aplicadas ao hostname que vamos criar.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#5-instalar-e-configurar-o-cloudflare-tunnel-na-vm","title":"5 \u2014 Instalar e configurar o Cloudflare Tunnel na VM","text":"<p>Passos principais:</p> <ol> <li>Instalar <code>cloudflared</code></li> <li>Logar o <code>cloudflared</code> na conta Cloudflare (gera um arquivo de credenciais)</li> <li>Criar o t\u00fanel e mapear um hostname</li> <li>Criar arquivo de configura\u00e7\u00e3o e rodar como servi\u00e7o</li> </ol> <p>Exemplo (Ubuntu/Debian):</p> <pre><code># baixar o bin\u00e1rio mais recente\ncurl -L -o cloudflared \\\n   https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64\nchmod +x cloudflared\nsudo mv cloudflared /usr/local/bin/\n\n# fazer login (abre uma URL para autentica\u00e7\u00e3o no Cloudflare)\ncloudflared tunnel login\n\n# criar o t\u00fanel (gera um UUID)\ncloudflared tunnel create lab-tunnel\n\n# vincular um hostname DNS gerenciado pelo Cloudflare ao t\u00fanel\ncloudflared tunnel route dns lab-tunnel app.example.com\n\n# criar config em /etc/cloudflared/config.yml\nsudo mkdir -p /etc/cloudflared\nsudo tee /etc/cloudflared/config.yml &gt; /dev/null &lt;&lt;'YAML'\ntunnel: &lt;TUNNEL-UUID&gt;\ncredentials-file: /etc/cloudflared/&lt;TUNNEL-UUID&gt;.json\ningress:\n   - hostname: app.example.com\n      service: http://localhost:8080\n   - service: http_status:404\nYAML\n\n# instalar como servi\u00e7o systemd (opcional: cloudflared oferece comando helper)\nsudo tee /etc/systemd/system/cloudflared.service &gt; /dev/null &lt;&lt;'UNIT'\n[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/local/bin/cloudflared --config /etc/cloudflared/config.yml run\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nUNIT\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now cloudflared\n</code></pre> <p>Notas: - Substitua <code>&lt;TUNNEL-UUID&gt;</code> e <code>app.example.com</code> pelos valores reais retornados pelos comandos. - Se <code>cloudflared tunnel login</code> n\u00e3o puder abrir um navegador na VM, execute o login em uma m\u00e1quina local e copie o arquivo de credenciais para a VM, ou use um Service Token/Account para automa\u00e7\u00e3o.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#6-exemplo-deploy-de-um-piping-server-local-e-exposicao-via-tunnel","title":"6 \u2014 Exemplo: Deploy de um \"Piping Server\" local e exposi\u00e7\u00e3o via Tunnel","text":"<p>Para o exemplo vamos supor que exista um servi\u00e7o HTTP simples rodando na porta 8080 (poderia ser o piping server ou qualquer app). Se voc\u00ea quiser testar r\u00e1pido:</p> <pre><code># exemplo r\u00e1pido com Python (na VM)\npython3 -m http.server 8080 --bind 127.0.0.1\n</code></pre> <p>Com o t\u00fanel configurado e o DNS apontado, a URL https://app.example.com ficar\u00e1 dispon\u00edvel publicamente e ser\u00e1 roteada para a aplica\u00e7\u00e3o local.</p> <p>Teste:</p> <pre><code>curl -I https://app.example.com\n</code></pre> <p>Voc\u00ea deve receber uma resposta HTTP 200 (ou o cabe\u00e7alho do servidor simples).</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#7-seguranca-e-boas-praticas","title":"7 \u2014 Seguran\u00e7a e boas pr\u00e1ticas","text":"<ul> <li>Use <code>cloudflared tunnel route dns</code> para que o Cloudflare gerencie o DNS do hostname</li> <li>Restrinja o acesso com Zero Trust/Access quando expor servi\u00e7os administrativos</li> <li>Mantenha <code>cloudflared</code> atualizado</li> <li>Automatize o deploy do tunnel com scripts/secrets quando usar em produ\u00e7\u00e3o</li> </ul>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#8-limitacoes-e-casos-de-uso","title":"8 \u2014 Limita\u00e7\u00f5es e casos de uso","text":"<ul> <li>Cloudflare Tunnel n\u00e3o substitui redes privadas complexas ou balanceamento interno avan\u00e7ado</li> <li>Para servi\u00e7os com alto throughput verifique limites do plano e lat\u00eancia</li> <li>Economiza custo de IP p\u00fablico e simplifica roteamento para pequenos servi\u00e7os e laborat\u00f3rios</li> </ul>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"blog/2025/08/22/cloudflare-tunnel-economizando-ipv4-ao-expor-servi%C3%A7os-em-vms/#conclusao","title":"Conclus\u00e3o","text":"<p>O Cloudflare Tunnel \u00e9 uma solu\u00e7\u00e3o pr\u00e1tica para expor servi\u00e7os rodando em VMs sem a necessidade de um IPv4 p\u00fablico dedicado. Para laborat\u00f3rios e projetos pessoais ele reduz custo e adiciona camadas \u00fateis de seguran\u00e7a e gest\u00e3o via Cloudflare.</p> <p>Se quiser, no pr\u00f3ximo artigo podemos:</p> <ul> <li>Automatizar cria\u00e7\u00e3o do t\u00fanel via CI/CD</li> <li>Integrar autentica\u00e7\u00e3o SSO (Zero Trust) ao hostname</li> <li>Expor m\u00faltiplos servi\u00e7os com path-based routing</li> </ul> <p>Se preferir que eu atualize tamb\u00e9m um passo a passo completo com prints, arquivos de configura\u00e7\u00e3o e exemplos de systemd mais avan\u00e7ados, me diga que eu adiciono na sequ\u00eancia.</p>","tags":["cloudflare","networking","ipv4","virtual-machine"]},{"location":"quero/apoiar/","title":"Quero Apoiar!","text":""},{"location":"quero/apoiar/#apoio-financeiro","title":"Apoio Financeiro","text":"<p>A Codaqui \u00e9 uma comunidade sem fins lucrativos, mas precisa do apoio financeiro para manter seus projetos e infraestrutura. N\u00f3s temos atualmente uma campanha de financiamento coletivo no Open Collective, onde voc\u00ea pode contribuir com qualquer valor mensalmente.</p>"},{"location":"quero/apoiar/#apoio-institucional","title":"Apoio Institucional","text":"<p>Uma das formas de apoiar a Codaqui hoje, \u00e9 solicitando novos materiais e interagindo na resolu\u00e7\u00e3o desses problemas. </p> <p>Para criar solicita\u00e7\u00f5es ou discuss\u00f5es voc\u00ea pode acessar aqui, n\u00e3o se preocupe se o tema n\u00e3o estiver pr\u00e9 descrito, apenas tentamos reunir os mais comuns.</p>"},{"location":"quero/apoiar/#qual-o-processo","title":"Qual o processo?","text":"<ol> <li> <p>O espa\u00e7o de discuss\u00f5es \u00e9 o primeiro ponto para uma contribui\u00e7\u00e3o da Codaqui se tornar real, como somos uma Comunidade, todos possuem opini\u00e3o e direito de comentar qualquer assunto pertinente aos nossos objetivos.</p> </li> <li> <p>Uma discuss\u00e3o pode se tornar um Problema(Issue) no GitHub, que \u00e9 o espa\u00e7o para que a comunidade ou o volunt\u00e1rio que iniciou a discuss\u00e3o, possa estruturar a resolu\u00e7\u00e3o desse problema.</p> </li> <li> <p>Um problema ganha uma solu\u00e7\u00e3o com um PullRequest, \u00e9 quando o volunt\u00e1rio ou um grupo de volunt\u00e1rios faz uma solicita\u00e7\u00e3o na altera\u00e7\u00e3o de nossos c\u00f3digos. Seja a base <code>institucional</code> ou outros reposit\u00f3rios em propriedade da Codaqui.</p> </li> <li> <p>Todo esse processo est\u00e1 pautado em nosso c\u00f3digo que conduta, que pode ser lido clicando aqui</p> </li> </ol>"},{"location":"quero/apoiar/#com-o-que-posso-ajudar","title":"Com o que posso ajudar?","text":"<p>Nas discuss\u00f5es voc\u00ea pode:</p> <ul> <li>Sugerir temas para novas trilhas de aprendizado;</li> <li>Interagir com postagens do Blog;</li> <li>Opinar sobre os certificados;</li> <li>Criar enquetes;</li> <li>Sugerir ideias no geral;</li> <li>Criar e/ou responder perguntas para a comunidade;</li> <li>Falar sobre algum outro assunto.</li> </ul> <p>Se ainda lhe restou alguma d\u00favida, voc\u00ea pode criar uma Discuss\u00e3o na categoria <code>Geral</code> e logo algu\u00e9m te responde =]</p>"},{"location":"quero/apoiar/#preciso-de-ajuda-nao-sei-usar-o-github","title":"Preciso de ajuda, n\u00e3o sei usar o GitHub.","text":"<p>Se voc\u00ea \u00e9 novo no GitHub, com certeza nossa trilha inicial de Git ir\u00e1 te ajudar, clique aqui e comece a estudar.</p> <p>Enquanto isso, voc\u00ea pode enviar uma solicita\u00e7\u00e3o de ajuda para contato@codaqui.dev, iremos transpor as suas ajudas e te ajudar a contribuir.</p>"},{"location":"quero/apoiar/#links-uteis","title":"Links \u00dateis","text":"<ul> <li> <p> WhatsApp</p> <p></p> </li> </ul>"},{"location":"quero/estudar/","title":"Quero Estudar!","text":""},{"location":"quero/estudar/#inscricoes-2025","title":"Inscri\u00e7\u00f5es 2025","text":"Clique para abrir o formul\u00e1rio de inscri\u00e7\u00e3o! <p>Carregando\u2026</p>"},{"location":"quero/estudar/#publico-alvo","title":"P\u00fablico Alvo","text":"<p>Nosso formato de aulas em grupo \u00e9 ideal para jovens de 12 a 17 anos que desejam aprender programa\u00e7\u00e3o e desenvolver produtos tecnol\u00f3gicos, jogos, aplicativos e sites. Al\u00e9m disso, a escola oferece uma excelente base para aqueles que t\u00eam interesse em trilhar um caminho empreendedor.</p> <p>Se voc\u00ea possui mais de 17 anos possu\u00edmos um programa de mentoria individual, onde voc\u00ea pode aprender a programar e desenvolver projetos de acordo com o seu interesse. Acesse aqui para saber mais.</p>"},{"location":"quero/estudar/#como-funciona","title":"Como funciona?","text":""},{"location":"quero/estudar/#o-que-esperar","title":"O que esperar?","text":"<p>Nossos alunos t\u00eam encontros semanais com um mentor, abordando conte\u00fados que dizem respeito ao mundo da tecnologia e variam conforme o n\u00edvel de conhecimento da turma. Fazem parte da trilha pedag\u00f3gica as linguagens de programa\u00e7\u00e3o, a l\u00f3gica computacional, os componentes dos computadores, dentre outros conte\u00fados.</p> <p>Os encontros de mentoria acontecem de forma virtual, e nos demais dias os alunos ainda podem consumir conte\u00fado de ensino, seja por meio de atividades ou por outro tipo de material fornecido pelo mentor.</p> <p>Nossos alunos podem tirar d\u00favidas a qualquer momento em nosso canal do Discord, que re\u00fane toda a comunidade de alunos, mentores e colaboradores da Codaqui.</p>"},{"location":"quero/estudar/#o-que-poderei-aprender","title":"O que poderei aprender?","text":"<ul> <li> <p> Python</p> <p>Estude <code>Python</code> de forma aut\u00f4noma e acesse nosso discord caso precise de ajuda!</p> <p> Come\u00e7ar</p> </li> <li> <p> GitHub</p> <p>Se possui d\u00favidas, pode come\u00e7ar com a Trilha de <code>GitHub</code> e depois veja as outras.</p> <p> Come\u00e7ar</p> </li> </ul>"},{"location":"quero/estudar/#cronograma-2025","title":"Cronograma 2025","text":""},{"location":"quero/estudar/#cronograma-datas","title":"Cronograma - Datas","text":"Semestre In\u00edcio T\u00e9rmino 01/2025 10/02 01/07 02/2025 08/07 02/12"},{"location":"quero/estudar/#cronograma-turmas","title":"Cronograma - Turmas","text":"Semestre Modalidade Hor\u00e1rio Instrutor Plataforma/Local Turma 01/2025 Remoto Segundas-feiras \u00e0s 18:15 Enderson Menezes Discord Python 101 02/2025 Remoto Segundas-feiras \u00e0s 18:15 Enderson Menezes Discord Grupo de Estudos Livre 02/2025 Remoto Ter\u00e7as-feiras \u00e0s 19:30 - 21:30 Ana Carolyne Discord Python 101 - Turma Feminina"},{"location":"quero/estudar/#certificado","title":"Certificado","text":"<p>Em desenvolvimento</p> <ol> <li>Aceitar o convite para iniciar o certificado</li> <li>O convite ir\u00e1 criar um reposit\u00f3rio autom\u00e1tico para voc\u00ea: https://github.com/codaqui/python-101-SEUNOMEDEUSU\u00c1RIO</li> <li>Responda todos os exercicios, crie os arquivos necess\u00e1rios.</li> <li>Acesse o seguinte endere\u00e7o, e crie em \"[CERTIFICADO] Solicita\u00e7\u00e3o de Certificado\", preencha os campos e nos coment\u00e1rios coloque como foi realizar os exerc\u00edcios. </li> </ol>"},{"location":"quero/estudar/#plataformas-digitais","title":"Plataformas Digitais","text":"<p>Participe da nossa comunidade no WhatsApp para interagir com outros membros. Al\u00e9m disso, voc\u00ea tamb\u00e9m pode utilizar o Discord para encontrar seus colegas e estudar em comunidade. Essas plataformas oferecem \u00f3timas oportunidades para trocar ideias, compartilhar conhecimento e colaborar com outros estudantes.</p> <ul> <li> <p> WhatsApp</p> <p></p> </li> <li> <p> Discord</p> <p></p> </li> </ul>"},{"location":"quero/mentoria/","title":"Quero Mentoria! [BETA]","text":""},{"location":"quero/mentoria/#publico-alvo","title":"P\u00fablico Alvo","text":"A Codaqui \u00e9 uma escola Gratuita! <p>A Codaqui \u00e9 uma escola gratuita de tecnologia que tem como objetivo ensinar programa\u00e7\u00e3o e desenvolvimento de produtos tecnol\u00f3gicos para jovens de 12 a 17 anos. Se voc\u00ea possui mais de 17 anos, temos um programa de mentoria individual, onde voc\u00ea pode aprender a programar e desenvolver projetos de acordo com o seu interesse.</p> <p>O Projeto #QueroMentoria \u00e9 uma iniciativa da Codaqui que envolve o projeto #QueroEstudar e #QueroApoiar e queremos oferecer mentorias e aulas particulares a pessoas que est\u00e3o iniciando na \u00e1rea de tecnologia. Para esse projeto voc\u00ea pode se inscrever como mentor ou mentorado.</p>"},{"location":"quero/mentoria/#onde","title":"Onde?","text":"<p>As mentorias e aulas particulares ser\u00e3o realizadas online, atrav\u00e9s de ferramentas como Discord e Google Meet.</p>"},{"location":"quero/mentoria/#quero-uma-mentoria","title":"Quero uma mentoria!","text":"Turma Mentor Foco Disponibilidade DevOps e Iniciantes Enderson Menezes Conversar sobre carreira em tecnologia, dia a dia, ferramentas, dicas e atividades de projetos para acompanhamento. Segundas das 19:30h \u00e0s 21h Frontend e Arquitetura Guilherme Siquinelli Mentoria para quem est\u00e1 com os primeiros passos em Frontend e tamb\u00e9m para quem quer entender sobre arquitetura. Quarta das 19h \u00e0s 21h Backend e .NET Matheus Luis Para pessoas que desejam aprender e seguir carreira dentro do Ambiente .NET Segunda, Quarta e Sexta das 19h \u00e0s 20h Como organizar eventos na sua cidade Ivo Batistela Mentoria para quem quer organizar um evento na sua pr\u00f3pria cidade Segunda \u00e0 Sexta, 18h \u00e0s 18:30h Empreendedorismo Renan Ceratto Mentoria para quem deseja empreender e n\u00e3o sabe por onde come\u00e7ar Quinta das 19h \u00e0s 20h"},{"location":"trilhas/github/","title":"\ud83e\udd13 Vis\u00e3o geral do curso e resultados de aprendizado","text":"<p>O objetivo deste curso \u00e9 fornecer uma breve introdu\u00e7\u00e3o ao GitHub. Tamb\u00e9m forneceremos materiais para aprendizado adicional e algumas ideias para voc\u00ea come\u00e7ar em nossa plataforma. \ud83d\ude80</p>"},{"location":"trilhas/github/page-1/","title":"Git e GitHub","text":"<p>O Git \u00e9 um Sistema de Controle de Vers\u00e3o (VCS) distribu\u00eddo, o que significa que \u00e9 uma ferramenta \u00fatil para rastrear facilmente altera\u00e7\u00f5es em seu c\u00f3digo, colaborar e compartilhar. Com o Git, voc\u00ea pode rastrear as altera\u00e7\u00f5es feitas em seu projeto para que sempre tenha um registro do que trabalhou e possa reverter facilmente para uma vers\u00e3o mais antiga, se necess\u00e1rio. Tamb\u00e9m facilita o trabalho com outras pessoas - grupos de pessoas podem trabalhar juntos no mesmo projeto e mesclar suas altera\u00e7\u00f5es em uma fonte final!</p> <p>O GitHub \u00e9 uma maneira de usar o mesmo poder do Git online com uma interface f\u00e1cil de usar. \u00c9 usado em todo o mundo do software e al\u00e9m para colaborar e manter o hist\u00f3rico de projetos.</p> <p>O GitHub \u00e9 o lar de algumas das tecnologias mais avan\u00e7adas do mundo. Esteja voc\u00ea visualizando dados ou criando um novo jogo, h\u00e1 toda uma comunidade e um conjunto de ferramentas no GitHub que podem levar voc\u00ea ao pr\u00f3ximo passo. Este curso come\u00e7a com o b\u00e1sico do GitHub, mas vamos nos aprofundar no resto mais tarde.</p>"},{"location":"trilhas/github/page-2/","title":"\ud83c\udf0a Entendendo o fluxo do GitHub","text":"<p>O fluxo do GitHub \u00e9 um fluxo de trabalho leve que permite que voc\u00ea experimente e colabore em seus projetos com facilidade, sem o risco de perder seu trabalho anterior.</p>"},{"location":"trilhas/github/page-2/#repositories-repositorios","title":"Repositories (Reposit\u00f3rios)","text":"<p>Um reposit\u00f3rio \u00e9 onde o trabalho do seu projeto acontece - pense nele como a pasta do seu projeto. Ele cont\u00e9m todos os arquivos do seu projeto e hist\u00f3rico de revis\u00f5es. Voc\u00ea pode trabalhar em um reposit\u00f3rio sozinho ou convidar outras pessoas para colaborar com voc\u00ea nesses arquivos.</p>"},{"location":"trilhas/github/page-2/#cloning-clonagem","title":"Cloning (Clonagem)","text":"<p>Quando um reposit\u00f3rio \u00e9 criado com o GitHub, ele \u00e9 armazenado remotamente na \u2601\ufe0f. Voc\u00ea pode clonar um reposit\u00f3rio para criar uma c\u00f3pia local em seu computador e usar o Git para sincronizar os dois. Isso torna mais f\u00e1cil corrigir problemas, adicionar ou remover arquivos e enviar confirma\u00e7\u00f5es maiores. Voc\u00ea tamb\u00e9m pode usar a ferramenta de edi\u00e7\u00e3o de sua escolha em vez da Interface de Usu\u00e1rio (UI) do GitHub. A clonagem de um reposit\u00f3rio tamb\u00e9m baixa todos os dados do reposit\u00f3rio que o GitHub possui naquele momento, incluindo todas as vers\u00f5es de cada arquivo e pasta do projeto! Isso pode ser \u00fatil se voc\u00ea experimentar seu projeto e perceber que gostou mais de uma vers\u00e3o anterior.  Para saber mais sobre clonagem, leia \"Clonar um reposit\u00f3rio\". </p>"},{"location":"trilhas/github/page-2/#committing-and-pushing-comentando-e-empurrando","title":"Committing and pushing (Comentando e empurrando)","text":"<p>Committing e pushing s\u00e3o como voc\u00ea pode adicionar as altera\u00e7\u00f5es feitas em sua m\u00e1quina local ao reposit\u00f3rio remoto no GitHub. Dessa forma, seu instrutor e/ou colegas de equipe podem ver seu trabalho mais recente quando voc\u00ea estiver pronto para compartilh\u00e1-lo. Voc\u00ea pode fazer um commit quando tiver feito altera\u00e7\u00f5es em seu projeto que deseja \u201ccheckpoint.\u201d Voc\u00ea tamb\u00e9m pode adicionar uma mensagem de confirma\u00e7\u00e3o \u00fatil para lembrar a si mesmo ou a seus colegas de equipe o trabalho que voc\u00ea fez (por exemplo, \"Adicionou um README com informa\u00e7\u00f5es sobre nosso projeto\").</p> <p>Depois de ter um commit ou v\u00e1rios commits que voc\u00ea est\u00e1 pronto para adicionar ao seu reposit\u00f3rio, voc\u00ea pode usar o comando push para adicionar essas altera\u00e7\u00f5es ao seu reposit\u00f3rio remoto. Committing e pushing pode parecer novo no come\u00e7o, mas prometemos que voc\u00ea se acostumar\u00e1 \ud83d\ude42</p>"},{"location":"trilhas/github/page-3/","title":"\ud83d\udcbb Termos do GitHub para saber","text":""},{"location":"trilhas/github/page-3/#repositories-repositorios","title":"Repositories (Reposit\u00f3rios)","text":"<p>J\u00e1 mencionamos os reposit\u00f3rios, eles s\u00e3o onde o trabalho do seu projeto acontece, mas vamos falar um pouco mais sobre os detalhes deles! \u00c0 medida que voc\u00ea trabalha mais no GitHub, voc\u00ea ter\u00e1 muitos reposit\u00f3rios que podem parecer confusos no in\u00edcio. Felizmente, seu \"Painel do GitHub\" ajuda a navegar facilmente para seus reposit\u00f3rios e ver informa\u00e7\u00f5es \u00fateis sobre eles. Certifique-se de estar logado para v\u00ea-lo!</p> <p>Os reposit\u00f3rios tamb\u00e9m cont\u00eam READMEs. Voc\u00ea pode adicionar um arquivo README ao seu reposit\u00f3rio para dizer a outras pessoas por que seu projeto \u00e9 \u00fatil, o que elas podem fazer com seu projeto e como podem us\u00e1-lo. Estamos usando este README para comunicar como aprender Git e GitHub com voc\u00ea. \ud83d\ude04  Para saber mais sobre reposit\u00f3rios, leia \"Criando, clonando e arquivando reposit\u00f3rios\" e \"Sobre os READMEs\". </p>"},{"location":"trilhas/github/page-3/#branches-ramificacoes","title":"Branches (Ramifica\u00e7\u00f5es)","text":"<p>Voc\u00ea pode usar ramifica\u00e7\u00f5es no GitHub para isolar o trabalho que ainda n\u00e3o deseja mesclar em seu projeto final. As ramifica\u00e7\u00f5es permitem que voc\u00ea desenvolva recursos, corrija bugs ou experimente novas ideias com seguran\u00e7a em uma \u00e1rea contida do seu reposit\u00f3rio. Normalmente, voc\u00ea pode criar uma nova ramifica\u00e7\u00e3o a partir da ramifica\u00e7\u00e3o padr\u00e3o do seu reposit\u00f3rio\u2014main. Isso cria uma nova c\u00f3pia de trabalho do seu reposit\u00f3rio para voc\u00ea experimentar. Depois que suas novas altera\u00e7\u00f5es forem revisadas por um colega de equipe ou voc\u00ea estiver satisfeito com elas, voc\u00ea poder\u00e1 mesclar suas altera\u00e7\u00f5es na ramifica\u00e7\u00e3o padr\u00e3o do seu reposit\u00f3rio. Para saber mais sobre ramifica\u00e7\u00e3o, leia \"Sobre as Ramifica\u00e7\u00f5es\".</p>"},{"location":"trilhas/github/page-3/#forks-bifurcacoes","title":"Forks (Bifurca\u00e7\u00f5es)","text":"<p>Um fork \u00e9 outra maneira de copiar um reposit\u00f3rio, mas geralmente \u00e9 usado quando voc\u00ea deseja contribuir com o projeto de outra pessoa. Bifurcar um reposit\u00f3rio permite que voc\u00ea experimente livremente as altera\u00e7\u00f5es sem afetar o projeto original e \u00e9 muito popular ao contribuir para projetos de software de c\u00f3digo aberto! Para saber mais sobre bifurca\u00e7\u00e3o, leia \"Bifurcar um reposit\u00f3rio\"</p>"},{"location":"trilhas/github/page-3/#pull-requests-solicitacoes-de-pull","title":"Pull requests (Solicita\u00e7\u00f5es de pull)","text":"<p>Ao trabalhar com ramifica\u00e7\u00f5es, voc\u00ea pode usar um pull request para informar a outras pessoas sobre as altera\u00e7\u00f5es que deseja fazer e solicitar feedback. Depois que uma solicita\u00e7\u00e3o pull for aberta, voc\u00ea poder\u00e1 discutir e revisar as poss\u00edveis altera\u00e7\u00f5es com os colaboradores e adicionar mais altera\u00e7\u00f5es, se necess\u00e1rio. Voc\u00ea pode adicionar pessoas espec\u00edficas como revisores de seu pull request, o que mostra que voc\u00ea deseja o feedback delas sobre suas altera\u00e7\u00f5es! Quando um pull request estiver pronto, ele poder\u00e1 ser mesclado em sua ramifica\u00e7\u00e3o principal. Para aprender mais sobre pull requests, leia \"Sobre Pull Requests\". </p>"},{"location":"trilhas/github/page-3/#issues-problemas","title":"Issues (Problemas)","text":"<p>As issues s\u00e3o uma maneira de rastrear aprimoramentos, tarefas ou bugs para seu trabalho no GitHub. As issues s\u00e3o uma \u00f3tima maneira de acompanhar todas as tarefas nas quais voc\u00ea deseja trabalhar para seu projeto e informar aos outros no que voc\u00ea planeja trabalhar. Voc\u00ea tamb\u00e9m pode usar as issues para informar a um projeto de c\u00f3digo aberto favorito sobre um bug que voc\u00ea encontrou ou um recurso que voc\u00ea acha que seria \u00f3timo adicionar!</p> <p>Para projetos maiores, voc\u00ea pode acompanhar muitas issues em um quadro de projeto. Os projetos do GitHub ajudam voc\u00ea a organizar e priorizar seu trabalho e voc\u00ea pode ler mais sobre eles neste documento \"Sobre os quadros do projeto\". Voc\u00ea provavelmente n\u00e3o precisar\u00e1 de um quadro de projeto para suas tarefas, mas depois de passar para projetos ainda maiores, eles s\u00e3o uma \u00f3tima maneira de organizar o trabalho de sua equipe! Voc\u00ea tamb\u00e9m pode vincular pull requests e issues para mostrar que uma corre\u00e7\u00e3o est\u00e1 em andamento e fechar automaticamente a issue quando algu\u00e9m mesclar o pull request. Para saber mais sobre issues e vincul\u00e1-las \u00e0s seus pull requests, leia \"Sobre Issues\". </p>"},{"location":"trilhas/github/page-3/#seu-perfil-de-usuario","title":"Seu perfil de usu\u00e1rio","text":"<p>Sua p\u00e1gina de perfil conta \u00e0s pessoas a hist\u00f3ria do seu trabalho por meio dos reposit\u00f3rios nos quais voc\u00ea est\u00e1 interessado, as contribui\u00e7\u00f5es que voc\u00ea fez e as conversas que teve. Voc\u00ea tamb\u00e9m pode dar ao mundo uma vis\u00e3o \u00fanica de quem voc\u00ea \u00e9 com o seu perfil README. Voc\u00ea pode usar seu perfil para que futuros empregadores saibam tudo sobre voc\u00ea! Para saber mais sobre seu perfil de usu\u00e1rio e adicionar e atualizar seu perfil README, leia \"Gerenciando seu perfil README\". </p>"},{"location":"trilhas/github/page-3/#usando-markdown-no-github","title":"Usando markdown no GitHub","text":"<p>Voc\u00ea j\u00e1 deve ter notado, mas pode adicionar um estilo divertido aos seus problemas, pull requests e arquivos. \"Markdown\" \u00e9 uma maneira f\u00e1cil de estilizar seus problemas, solicita\u00e7\u00f5es pull e arquivos com uma sintaxe simples. Isso pode ser \u00fatil para organizar suas informa\u00e7\u00f5es e facilitar a leitura de outras pessoas. Voc\u00ea tamb\u00e9m pode colocar gifs e imagens para ajudar a transmitir seu ponto! Para saber mais sobre como usar o sabor de markdown do GitHub, leia \"Sintaxe b\u00e1sica de escrita e formata\u00e7\u00e3o\". </p>"},{"location":"trilhas/github/page-3/#envolvimento-com-a-comunidade-do-github","title":"Envolvimento com a comunidade do GitHub","text":"<p>A comunidade do GitHub \u00e9 vasta. Existem muitos tipos de pessoas que usam o GitHub em seu dia a dia - estudantes como voc\u00ea, desenvolvedores profissionais, amadores trabalhando em projetos de c\u00f3digo aberto e exploradores que est\u00e3o entrando no mundo do desenvolvimento de software por conta pr\u00f3pria. H\u00e1 muitas maneiras de interagir com a grande comunidade do GitHub, mas aqui est\u00e3o tr\u00eas lugares onde voc\u00ea pode come\u00e7ar. </p>"},{"location":"trilhas/github/page-3/#repositorios-com-estrela","title":"Reposit\u00f3rios com estrela","text":"<p>Se voc\u00ea achar um reposit\u00f3rio interessante ou quiser acompanh\u00e1-lo, marque-o com uma estrela! Quando voc\u00ea marca um reposit\u00f3rio com estrela, ele tamb\u00e9m \u00e9 usado como um sinal para apresentar melhores recomenda\u00e7\u00f5es em github.com/explore. Se voc\u00ea quiser voltar aos seus reposit\u00f3rios com estrela, pode faz\u00ea-lo atrav\u00e9s do seu perfil de usu\u00e1rio. Para saber mais sobre reposit\u00f3rios estrelados, leia \"Salvando reposit\u00f3rios com estrelas\". </p>"},{"location":"trilhas/github/page-3/#seguindo-usuarios","title":"Seguindo usu\u00e1rios","text":"<p>Voc\u00ea pode seguir pessoas no GitHub para receber notifica\u00e7\u00f5es sobre suas atividades e descobrir projetos em suas comunidades. Quando voc\u00ea segue um usu\u00e1rio, sua atividade p\u00fablica no GitHub aparecer\u00e1 em seu painel para que voc\u00ea possa ver todas as coisas legais em que ele est\u00e1 trabalhando.  Para saber mais sobre como seguir usu\u00e1rios, leia \"Seguindo pessoas\".</p>"},{"location":"trilhas/github/page-3/#navegando-no-github-explore","title":"Navegando no GitHub Explore","text":"<p>O GitHub Explore \u00e9 um \u00f3timo lugar para fazer exatamente isso... explorar  Voc\u00ea pode encontrar novos projetos, eventos e desenvolvedores para interagir.</p> <p>Voc\u00ea pode conferir o site do GitHub Explore em github.com/explore. Quanto mais voc\u00ea interagir com o GitHub, mais personalizada ser\u00e1 sua visualiza\u00e7\u00e3o do Explore.</p>"},{"location":"trilhas/github/page-4/","title":"\ud83d\udcdd Tarefas para Realizar","text":""},{"location":"trilhas/github/page-4/#tarefa-1","title":"Tarefa 1","text":"<ul> <li>Crie uma conta pessoal no GitHub.</li> <li>Crie um novo reposit\u00f3rio em sua conta pessoal no GitHub, mantenha o reposit\u00f3rio p\u00fablico.</li> <li>Crie um arquivo no seu reposit\u00f3rio.</li> <li>Edite seu arquivo utilizando um Pull Request.</li> <li>Crie um arquivo <code>README.md</code> no seu reposit\u00f3rio e conte o que voc\u00ea aprendeu com este curso, e tamb\u00e9m sobre as d\u00favidas que ainda ficaram. Experimente com estilos diferentes!</li> </ul>"},{"location":"trilhas/github/page-4/#tarefa-2","title":"Tarefa 2","text":"<ul> <li>Crie um reposit\u00f3rio chamado <code>seuusuario.github.io</code> e esse reposit\u00f3rio com um arquivo <code>README.md</code> vai se tornar um site em poucos minutos.</li> </ul>"},{"location":"trilhas/github/page-4/#tarefa-3","title":"Tarefa 3","text":"<ul> <li>Crie um reposit\u00f3rio chamado <code>seuusuario</code> e esse reposit\u00f3rio vai se tornar o seu Perfil do GitHub de maneira diferente.</li> <li>Complemente com imagens, emojis e deixe a criatividade te inspirar \ud83d\ude80</li> <li>\"Gerenciando seu perfil README\".</li> </ul> <p>Deixe-nos saber o que voc\u00ea gostou ou n\u00e3o gostou sobre o conte\u00fado deste curso. O que voc\u00ea gostaria de ver mais? O que seria interessante ou \u00fatil para sua jornada de aprendizado?</p>"},{"location":"trilhas/github/page-5/","title":"Tarefa 1","text":""},{"location":"trilhas/github/page-5/#crie-uma-conta-no-github","title":"Crie uma conta no GitHub","text":"<p>Acesse o site de registro clicando aqui., preencha os campos necess\u00e1rios e voc\u00ea vai ser capaz de criar a sua conta e utilizar no GitHub.</p> <p></p> <p>Ser\u00e1 solicitado que voc\u00ea encontre um c\u00f3digo no seu e-mail para confirmar a validade.</p> <p></p>"},{"location":"trilhas/github/page-5/#crie-o-seu-primeiro-repositorio","title":"Crie o seu primeiro reposit\u00f3rio","text":""},{"location":"trilhas/github/page-5/#edite-seu-arquivo-utilizando-um-pull-request","title":"Edite seu arquivo utilizando um Pull Request","text":""},{"location":"trilhas/github/page-5/#edite-o-seu-arquivo-readmemd","title":"Edite o seu arquivo README.md","text":"<p>Edite o seu arquivo <code>README.md</code> e conte como foi sua experi\u00eancia estudando com a Codaqui. Compartilhe no WhatsApp ou no nosso ambiente de discuss\u00f5es.</p>"},{"location":"trilhas/github/page-6/","title":"Em constru\u00e7\u00e3o.","text":"<p>Caso voc\u00ea queira contribuir com este curso, fique \u00e0 vontade para abrir uma issue ou um pull request. \ud83d\ude80</p>"},{"location":"trilhas/github/page-7/","title":"Em constru\u00e7\u00e3o.","text":"<p>Caso voc\u00ea queira contribuir com este curso, fique \u00e0 vontade para abrir uma issue ou um pull request. \ud83d\ude80</p>"},{"location":"trilhas/github/page-8/","title":"\ud83d\udcda  Recursos","text":"<ul> <li>Um pequeno v\u00eddeo explicando o que \u00e9 o GitHub</li> <li>Recursos de aprendizagem Git e GitHub</li> <li>Compreendendo o fluxo do GitHub</li> <li>Como usar branches (ramifica\u00e7\u00f5es) do GitHub</li> <li>Materiais de treinamento interativos do Git</li> <li>Laborat\u00f3rio de aprendizagem do GitHub</li> <li>F\u00f3rum da comunidade educacional</li> <li>F\u00f3rum da comunidade do GitHub</li> </ul>"},{"location":"trilhas/github/page-8/#referencia","title":"Refer\u00eancia","text":"<p>Esse material foi copiado do GitHub Starter e traduzido pelo LuizFernando-TC com o auxilio de ferramentas de tradu\u00e7\u00e3o e conhecimentos do mesmo.</p>"},{"location":"trilhas/python/","title":"Python 101","text":""},{"location":"trilhas/python/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Python \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, interpretada, de prop\u00f3sito geral e f\u00e1cil de aprender. \u00c9 Open-Source (c\u00f3digo aberto) e amplamente utilizada em diversas \u00e1reas como data science, machine learning, desenvolvimento web, desenvolvimento de aplicativos, automa\u00e7\u00e3o de scripts, fintechs e muito mais.</p> <p>Essa linguagem de programa\u00e7\u00e3o foi lan\u00e7ada por Guido van Rossum em 1991 e tem se tornado cada vez mais popular devido \u00e0 sua simplicidade, legibilidade e versatilidade.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Conhecer os fundamentos da linguagem Python</li> <li>Entender a sintaxe b\u00e1sica e estrutura de controle</li> <li>Aprender sobre vari\u00e1veis, tipos de dados e cole\u00e7\u00f5es</li> <li>Desenvolver habilidades para criar programas simples em Python</li> </ul>"},{"location":"trilhas/python/#por-que-python","title":"Por que Python?","text":"<p>Python se tornou uma das linguagens de programa\u00e7\u00e3o mais populares do mundo por v\u00e1rios motivos:</p> <ol> <li>Sintaxe clara e leg\u00edvel: O c\u00f3digo Python \u00e9 f\u00e1cil de ler e escrever</li> <li>Versatilidade: \u00datil para desenvolvimento web, an\u00e1lise de dados, IA, automa\u00e7\u00e3o, etc.</li> <li>Grande comunidade: Extensa documenta\u00e7\u00e3o e bibliotecas para quase qualquer tarefa</li> <li>Multiplataforma: Funciona em Windows, macOS, Linux e outros sistemas</li> <li>Ecossistema rico: Possui frameworks e bibliotecas para praticamente qualquer necessidade</li> </ol>"},{"location":"trilhas/python/#exemplos-basicos","title":"Exemplos b\u00e1sicos","text":"Hello WorldVari\u00e1veis <pre><code># Um simples programa \"Hello World\" em Python\nprint(\"Hello World!\")\n</code></pre> <pre><code># Exemplos de vari\u00e1veis em Python\nnome = \"Maria\"       # String\nidade = 25           # Inteiro\naltura = 1.65        # Ponto flutuante\nestudante = True     # Booleano\n\n# Mostrando os valores das vari\u00e1veis\nprint(f\"Nome: {nome}\")\nprint(f\"Idade: {idade} anos\")\nprint(f\"Altura: {altura}m\")\nprint(f\"\u00c9 estudante? {estudante}\")\n</code></pre>"},{"location":"trilhas/python/#estrutura-do-curso","title":"Estrutura do curso","text":"<p>Este curso est\u00e1 organizado em v\u00e1rias li\u00e7\u00f5es progressivas, come\u00e7ando dos conceitos b\u00e1sicos e avan\u00e7ando para t\u00f3picos mais complexos:</p> <ol> <li>Vari\u00e1veis e Tipos de Dados - Aprenda sobre os blocos fundamentais da linguagem</li> <li>Estruturas de Controle - Domine condicionais e loops</li> <li>Fun\u00e7\u00f5es - Organize seu c\u00f3digo de forma eficiente</li> <li>Cole\u00e7\u00f5es Avan\u00e7adas - Trabalhe com estruturas de dados mais complexas</li> <li>Orienta\u00e7\u00e3o a Objetos - Entenda os princ\u00edpios de POO em Python</li> </ol> <p>Dica de estudo</p> <p>Para aprender Python efetivamente, \u00e9 importante praticar regularmente. Tente modificar os exemplos fornecidos e criar seus pr\u00f3prios programas pequenos para refor\u00e7ar o que voc\u00ea aprendeu.</p>"},{"location":"trilhas/python/#recursos-oficiais","title":"Recursos Oficiais","text":"<p>Python possui uma extensa documenta\u00e7\u00e3o oficial e recursos de aprendizado de alta qualidade:</p> <ul> <li>Documenta\u00e7\u00e3o oficial do Python</li> <li>Tutorial oficial do Python</li> <li>Refer\u00eancia da linguagem Python</li> <li>PEP 8 - Guia de Estilo para Python</li> <li>Python Package Index (PyPI)</li> </ul>"},{"location":"trilhas/python/#referencias-adicionais","title":"Refer\u00eancias Adicionais","text":"<ul> <li>Introdu\u00e7\u00e3o a Programa\u00e7\u00e3o Python - IFSP</li> <li>Python Brasil - Apresenta\u00e7\u00e3o</li> <li>WikiPython Brasil</li> </ul> <p>Pronto para come\u00e7ar?</p> <p>Agora que voc\u00ea j\u00e1 conhece um pouco sobre Python, est\u00e1 na hora de mergulhar nos detalhes e come\u00e7ar a aprender de verdade!</p> <p>Comece com Vari\u00e1veis e Tipos de Dados \u2192</p>"},{"location":"trilhas/python/page-1/","title":"Vari\u00e1veis e Tipos de Dados em Python","text":""},{"location":"trilhas/python/page-1/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Python \u00e9 uma linguagem de programa\u00e7\u00e3o de alto n\u00edvel, interpretada, de prop\u00f3sito geral e f\u00e1cil de aprender, conhecida por sua simplicidade e legibilidade. Uma das primeiras coisas que voc\u00ea aprender\u00e1 ao programar em Python s\u00e3o as vari\u00e1veis e os diferentes tipos de dados dispon\u00edveis.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito de vari\u00e1veis em Python</li> <li>Conhecer os principais tipos de dados</li> <li>Praticar a cria\u00e7\u00e3o e manipula\u00e7\u00e3o de vari\u00e1veis</li> <li>Compreender as regras de nomenclatura de vari\u00e1veis</li> </ul>"},{"location":"trilhas/python/page-1/#por-que-python","title":"Por que Python?","text":"<p>Python se tornou uma das linguagens de programa\u00e7\u00e3o mais populares do mundo por v\u00e1rios motivos:</p> <ol> <li>Sintaxe clara e leg\u00edvel: O c\u00f3digo Python \u00e9 f\u00e1cil de ler e escrever</li> <li>Versatilidade: \u00datil para desenvolvimento web, an\u00e1lise de dados, IA, automa\u00e7\u00e3o, etc.</li> <li>Grande comunidade: Extensa documenta\u00e7\u00e3o e bibliotecas para quase qualquer tarefa</li> <li>Multiplataforma: Funciona em Windows, macOS, Linux e outros sistemas</li> </ol>"},{"location":"trilhas/python/page-1/#o-que-sao-variaveis","title":"O que s\u00e3o Vari\u00e1veis?","text":"<p>Uma vari\u00e1vel \u00e9 um espa\u00e7o na mem\u00f3ria do computador destinado a um dado que \u00e9 alterado durante a execu\u00e7\u00e3o do algoritmo. Para funcionar corretamente, as vari\u00e1veis precisam ser definidas por nomes e tipos. Em Python, diferente de outras linguagens como C ou Java, n\u00e3o \u00e9 necess\u00e1rio declarar explicitamente o tipo da vari\u00e1vel - ele \u00e9 inferido automaticamente pelo interpretador.</p> Conceito <pre><code># Criando vari\u00e1veis em Python\nnome = \"Maria\"       # (1)\nidade = 25           # (2)\naltura = 1.65        # (3)\nestudante = True     # (4)\n</code></pre> <ol> <li>Uma vari\u00e1vel do tipo string (texto) - <code>str</code></li> <li>Uma vari\u00e1vel do tipo inteiro - <code>int</code></li> <li>Uma vari\u00e1vel do tipo ponto flutuante - <code>float</code></li> <li>Uma vari\u00e1vel do tipo booleano - <code>bool</code></li> </ol> <p>Tipagem Din\u00e2mica</p> <p>Python \u00e9 uma linguagem de tipagem din\u00e2mica, o que significa que voc\u00ea n\u00e3o precisa declarar o tipo da vari\u00e1vel ao cri\u00e1-la. O interpretador infere o tipo baseado no valor atribu\u00eddo.</p> Conceito <pre><code>x = 10        # x \u00e9 um inteiro\nx = \"Python\"  # Agora x \u00e9 uma string\n</code></pre> <p>Isso oferece flexibilidade, mas tamb\u00e9m exige cuidado para evitar erros relacionados a tipos.</p>"},{"location":"trilhas/python/page-1/#regras-para-nomes-de-variaveis-em-python","title":"Regras para Nomes de Vari\u00e1veis em Python","text":"Regras Importantes <ul> <li>Devem come\u00e7ar com uma letra ou underscore (<code>_</code>)</li> <li>Podem conter letras, n\u00fameros e underscores</li> <li>N\u00e3o podem come\u00e7ar com um n\u00famero</li> <li>S\u00e3o case-sensitive (<code>idade</code>, <code>Idade</code> e <code>IDADE</code> s\u00e3o vari\u00e1veis diferentes)</li> <li>N\u00e3o podem ser palavras reservadas da linguagem (como <code>if</code>, <code>for</code>, <code>while</code>, etc.)</li> </ul> <p>Exemplos de nomes v\u00e1lidos e inv\u00e1lidos</p> Nomes V\u00e1lidosNomes Inv\u00e1lidos <pre><code>idade = 25\n_contador = 0\nnome_completo = \"Jo\u00e3o Silva\"\nUsuario1 = \"Maria\"\nCONSTANTE = 3.14\n</code></pre> <pre><code>1nome = \"Pedro\"    # N\u00e3o pode come\u00e7ar com n\u00famero\nnome-completo = \"Ana\"  # N\u00e3o pode conter h\u00edfen\nfor = 10           # N\u00e3o pode ser palavra reservada\n</code></pre>"},{"location":"trilhas/python/page-1/#tipos-de-dados-basicos-em-python","title":"Tipos de Dados B\u00e1sicos em Python","text":"<p>Python possui diversos tipos de dados incorporados que podem ser organizados nas seguintes categorias:</p>"},{"location":"trilhas/python/page-1/#1-tipos-numericos","title":"1. Tipos Num\u00e9ricos","text":"Inteiros (int)Ponto Flutuante (float)Complexos (complex) <p><pre><code>idade = 25\nquantidade_produtos = 100\ntemperatura_negativa = -10\n</code></pre> Representam n\u00fameros inteiros positivos ou negativos, sem parte decimal.</p> <p><pre><code>altura = 1.75\npi = 3.14159\ntemperatura = -2.5\n</code></pre> Representam n\u00fameros reais, com parte decimal.</p> <p><pre><code>numero = 1 + 2j\nimpedancia = 3 - 4j\n</code></pre> Usados principalmente em c\u00e1lculos matem\u00e1ticos e engenharia.</p> <p>Saiba mais</p> <p>Os n\u00fameros em Python podem ser manipulados com v\u00e1rios operadores matem\u00e1ticos como <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code> (divis\u00e3o inteira), <code>%</code> (resto da divis\u00e3o) e <code>**</code> (pot\u00eancia).</p> <p>Documenta\u00e7\u00e3o oficial sobre tipos num\u00e9ricos</p>"},{"location":"trilhas/python/page-1/#2-texto-str","title":"2. Texto (str)","text":"<p>Exemplos de strings</p> <pre><code>nome = \"Python\"\nmensagem = 'Ol\u00e1, mundo!'\ntexto_longo = \"\"\"Este \u00e9 um texto\nque ocupa v\u00e1rias\nlinhas.\"\"\"\n</code></pre> <p>As strings em Python s\u00e3o cole\u00e7\u00f5es de caracteres delimitadas por aspas simples ou duplas. Podem ser manipuladas de v\u00e1rias formas:</p> Conceito <pre><code>nome = \"Python\"\nsobrenome = \"Programming\"\n\n# Concatena\u00e7\u00e3o\nnome_completo = nome + \" \" + sobrenome  # \"Python Programming\"\n\n# Repeti\u00e7\u00e3o\nrepetir = nome * 3  # \"PythonPythonPython\"\n\n# Indexa\u00e7\u00e3o (acessando caracteres individuais)\nprimeira_letra = nome[0]  # \"P\" (1)\nultima_letra = nome[-1]   # \"n\" (2)\n\n# Fatiamento (slicing) - obtendo partes da string\ntres_primeiras = nome[0:3]  # \"Pyt\" (3)\n</code></pre> <ol> <li>Em Python, o \u00edndice come\u00e7a em 0, ent\u00e3o o primeiro caractere \u00e9 acessado com [0]</li> <li>\u00cdndices negativos contam a partir do final da string, com [-1] representando o \u00faltimo caractere</li> <li>O fatiamento [0:3] retorna do \u00edndice 0 at\u00e9 o \u00edndice 2 (o \u00edndice final n\u00e3o \u00e9 inclu\u00eddo)</li> </ol> <p>Dica: M\u00e9todos de string \u00fateis</p> <p>Python oferece muitos m\u00e9todos \u00fateis para manipular strings:</p> Conceito <pre><code>texto = \"python \u00e9 incr\u00edvel\"\nprint(texto.upper())         # PYTHON \u00c9 INCR\u00cdVEL\nprint(texto.capitalize())    # Python \u00e9 incr\u00edvel\nprint(texto.replace(\"\u00e9\", \"\u00e9 muito\"))  # python \u00e9 muito incr\u00edvel\nprint(texto.split())         # ['python', '\u00e9', 'incr\u00edvel']\nprint(len(texto))            # 17 (comprimento da string)\n</code></pre> <p>Documenta\u00e7\u00e3o oficial sobre strings</p>"},{"location":"trilhas/python/page-1/#3-booleanos-bool","title":"3. Booleanos (bool)","text":"<p>Os booleanos representam valores de verdade e podem ser apenas <code>True</code> (Verdadeiro) ou <code>False</code> (Falso).</p> Conceito <pre><code>python_e_facil = True\nterra_e_plana = False\n\n# Opera\u00e7\u00f5es l\u00f3gicas\nresultado1 = python_e_facil and terra_e_plana  # False (1)\nresultado2 = python_e_facil or terra_e_plana   # True  (2)\nresultado3 = not terra_e_plana                # True  (3)\n</code></pre> <ol> <li>O operador <code>and</code> retorna <code>True</code> apenas se ambas as condi\u00e7\u00f5es forem verdadeiras</li> <li>O operador <code>or</code> retorna <code>True</code> se pelo menos uma das condi\u00e7\u00f5es for verdadeira</li> <li>O operador <code>not</code> inverte o valor booleano</li> </ol> <p>Aten\u00e7\u00e3o</p> <p>Em Python, valores diferentes podem ser convertidos implicitamente para booleanos:</p> Conceito <pre><code># Valores que s\u00e3o considerados False:\nprint(bool(0))        # False - zero inteiro\nprint(bool(0.0))      # False - zero flutuante\nprint(bool(\"\"))       # False - string vazia\nprint(bool([]))       # False - lista vazia\nprint(bool({}))       # False - dicion\u00e1rio vazio\nprint(bool(None))     # False - valor None\n\n# Todos os outros valores s\u00e3o considerados True:\nprint(bool(1))        # True - inteiro n\u00e3o-zero\nprint(bool(-1))       # True - inteiro negativo\nprint(bool(\"False\"))  # True - string n\u00e3o-vazia, mesmo que o conte\u00fado seja \"False\"\nprint(bool([0]))      # True - lista n\u00e3o-vazia, mesmo com valores \"falsos\" dentro\n</code></pre> <p>Documenta\u00e7\u00e3o oficial sobre booleanos</p>"},{"location":"trilhas/python/page-1/#4-colecoes","title":"4. Cole\u00e7\u00f5es","text":"<p>Python oferece diversos tipos de cole\u00e7\u00f5es para armazenar m\u00faltiplos valores:</p> Listas (list)Tuplas (tuple)Dicion\u00e1rios (dict)Conjuntos (set) <pre><code>frutas = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\"]  # (1)\nnumeros = [1, 2, 3, 4, 5]               # (2)\nmisturada = [1, \"dois\", 3.0, True]      # (3)\n\n# Acessando elementos\nprimeira_fruta = frutas[0]  # \"ma\u00e7\u00e3\"\n\n# Modificando elementos\nfrutas[1] = \"morango\"  # Agora a lista \u00e9 [\"ma\u00e7\u00e3\", \"morango\", \"laranja\"]\n\n# Adicionando elementos\nfrutas.append(\"uva\")  # Adiciona ao final\nfrutas.insert(1, \"p\u00eara\")  # Insere na posi\u00e7\u00e3o 1\n\n# Removendo elementos\nfrutas.remove(\"ma\u00e7\u00e3\")  # Remove pelo valor\nultima_fruta = frutas.pop()  # Remove e retorna o \u00faltimo item\n</code></pre> <ol> <li>Lista de strings</li> <li>Lista de n\u00fameros</li> <li>Lista com diferentes tipos de dados</li> </ol> <p>Cole\u00e7\u00f5es ordenadas e mut\u00e1veis. Podem conter elementos de diferentes tipos.</p> <pre><code>coordenadas = (10, 20)           # (1)\ncores_rgb = (255, 0, 0)          # (2)\nsingleton = (42,)                # (3)\n\n# Acessando elementos (semelhante \u00e0s listas)\nx = coordenadas[0]  # 10\ny = coordenadas[1]  # 20\n\n# Diferentemente das listas, n\u00e3o podemos modificar elementos:\n# coordenadas[0] = 15  # Isso geraria um erro!\n\n# Desempacotamento de tuplas\nr, g, b = cores_rgb  # r=255, g=0, b=0\n</code></pre> <ol> <li>Tupla com dois elementos</li> <li>Tupla com tr\u00eas elementos </li> <li>A v\u00edrgula \u00e9 necess\u00e1ria para tuplas de um elemento</li> </ol> <p>Cole\u00e7\u00f5es ordenadas e imut\u00e1veis (n\u00e3o podem ser alteradas ap\u00f3s cria\u00e7\u00e3o).</p> <pre><code>pessoa = {\"nome\": \"Ana\", \"idade\": 30, \"profissao\": \"Engenheira\"}  # (1)\nconfig = {\"debug\": True, \"max_connections\": 100}                  # (2)\n\n# Acessando valores\nnome = pessoa[\"nome\"]  # \"Ana\"\n\n# M\u00e9todo seguro para acessar (n\u00e3o gera erro se a chave n\u00e3o existir)\nemail = pessoa.get(\"email\", \"n\u00e3o informado\")  # \"n\u00e3o informado\"\n\n# Adicionando ou modificando valores\npessoa[\"email\"] = \"ana@exemplo.com\"\n\n# Removendo valores\ndel pessoa[\"profissao\"]\n\n# Iterando sobre o dicion\u00e1rio\nfor chave in pessoa:\n    print(f\"{chave}: {pessoa[chave]}\")\n\n# Obtendo chaves e valores\ntodas_chaves = pessoa.keys()\ntodos_valores = pessoa.values()\n</code></pre> <ol> <li>Dicion\u00e1rio com strings e n\u00fameros como valores</li> <li>Dicion\u00e1rio com booleano e n\u00famero como valores</li> </ol> <p>Cole\u00e7\u00f5es de pares chave-valor. As chaves devem ser \u00fanicas e imut\u00e1veis.</p> <pre><code>vogais = {\"a\", \"e\", \"i\", \"o\", \"u\"}                # (1)\nnumeros_primos = {2, 3, 5, 7, 11, 13}             # (2)\n\n# N\u00e3o permite elementos duplicados\nletras = {\"a\", \"b\", \"a\", \"c\"}  # Ser\u00e1 {\"a\", \"b\", \"c\"}\n\n# Adicionando elementos\nvogais.add(\"y\")  # Em alguns idiomas, y pode ser considerada uma vogal\n\n# Removendo elementos\nvogais.remove(\"y\")\n\n# Opera\u00e7\u00f5es de conjuntos\nconjunto1 = {1, 2, 3, 4}\nconjunto2 = {3, 4, 5, 6}\n\nuniao = conjunto1 | conjunto2        # {1, 2, 3, 4, 5, 6}\nintersecao = conjunto1 &amp; conjunto2   # {3, 4}\ndiferenca = conjunto1 - conjunto2    # {1, 2}\n</code></pre> <ol> <li>Conjunto de vogais</li> <li>Conjunto de n\u00fameros primos</li> </ol> <p>Cole\u00e7\u00f5es n\u00e3o ordenadas de itens \u00fanicos.</p> <p>Recursos Adicionais</p> <ul> <li>Documenta\u00e7\u00e3o sobre listas</li> <li>Documenta\u00e7\u00e3o sobre tuplas</li> <li>Documenta\u00e7\u00e3o sobre dicion\u00e1rios</li> <li>Documenta\u00e7\u00e3o sobre conjuntos</li> </ul>"},{"location":"trilhas/python/page-1/#5-none","title":"5. None","text":"<p>O tipo <code>None</code> em Python representa a aus\u00eancia de valor ou um valor nulo.</p> Conceito <pre><code># None \u00e9 frequentemente usado para inicializar vari\u00e1veis\nresultado = None\n\n# Verificando se uma vari\u00e1vel \u00e9 None\nif resultado is None:  # (1)\n    print(\"Ainda n\u00e3o temos um resultado\")\n\n# Fun\u00e7\u00f5es que n\u00e3o retornam valor explicitamente retornam None\ndef funcao_sem_retorno():\n    print(\"Esta fun\u00e7\u00e3o n\u00e3o retorna nada explicitamente\")\n\nvalor = funcao_sem_retorno()\nprint(valor)  # Imprime: None\n</code></pre> <ol> <li>Para verificar se uma vari\u00e1vel \u00e9 <code>None</code>, use o operador <code>is</code> em vez de <code>==</code></li> </ol> <p>Documenta\u00e7\u00e3o oficial sobre None</p>"},{"location":"trilhas/python/page-1/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Vari\u00e1veis em Python - espa\u00e7os na mem\u00f3ria para armazenar dados</li> <li>Tipos de dados b\u00e1sicos:</li> <li>N\u00fameros: <code>int</code>, <code>float</code>, <code>complex</code></li> <li>Strings: <code>str</code></li> <li>Booleanos: <code>bool</code></li> <li>Cole\u00e7\u00f5es: <code>list</code>, <code>tuple</code>, <code>dict</code>, <code>set</code></li> <li>Regras para nomes de vari\u00e1veis </li> <li>Como verificar o tipo de uma vari\u00e1vel usando a fun\u00e7\u00e3o <code>type()</code></li> </ul> <p>Parab\u00e9ns!</p> <p>Voc\u00ea agora tem uma base s\u00f3lida sobre vari\u00e1veis e tipos de dados em Python! Na pr\u00f3xima aula, vamos explorar estruturas l\u00f3gicas e condicionais.</p> <p>Recursos de aprendizado</p> <p>N\u00e3o se esque\u00e7a de consultar a documenta\u00e7\u00e3o oficial do Python para aprofundar seus conhecimentos. A se\u00e7\u00e3o de Tutorial \u00e9 especialmente \u00fatil para iniciantes.</p>"},{"location":"trilhas/python/page-1/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Continue aprofundando seus conhecimentos em Python! Na pr\u00f3xima aula, vamos explorar estruturas l\u00f3gicas e condicionais com <code>if</code>, <code>else</code> e <code>elif</code>.</p> <p>Avance para a pr\u00f3xima aula \u2192</p>"},{"location":"trilhas/python/page-10/","title":"Manipula\u00e7\u00e3o de Arquivos","text":""},{"location":"trilhas/python/page-10/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A manipula\u00e7\u00e3o de arquivos \u00e9 uma habilidade fundamental em programa\u00e7\u00e3o, permitindo que aplica\u00e7\u00f5es salvem dados persistentemente, processem informa\u00e7\u00f5es externas e compartilhem resultados. Python oferece ferramentas robustas e intuitivas para trabalhar com diversos formatos de arquivos.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender os conceitos b\u00e1sicos de manipula\u00e7\u00e3o de arquivos</li> <li>Aprender a ler e escrever arquivos de texto</li> <li>Trabalhar com formatos estruturados como JSON e CSV</li> <li>Manipular arquivos bin\u00e1rios</li> <li>Gerenciar caminhos de arquivo com o m\u00f3dulo <code>os.path</code></li> <li>Aplicar boas pr\u00e1ticas no trabalho com arquivos</li> </ul>"},{"location":"trilhas/python/page-10/#conceitos-basicos","title":"Conceitos B\u00e1sicos","text":"Abrindo e Fechando ArquivosModos de AberturaEncodings <pre><code># M\u00e9todo tradicional\narquivo = open(\"dados.txt\", \"r\")  # Modo de leitura\nconteudo = arquivo.read()\narquivo.close()  # Importante: sempre feche os arquivos!\n\n# M\u00e9todo recomendado: using context manager (with)\nwith open(\"dados.txt\", \"r\") as arquivo:\n    conteudo = arquivo.read()\n# O arquivo \u00e9 fechado automaticamente ao sair do bloco with\n</code></pre> <pre><code># Principais modos de abertura\n\n# \"r\" - Leitura (padr\u00e3o). Arquivo deve existir.\nwith open(\"arquivo.txt\", \"r\") as f:\n    dados = f.read()\n\n# \"w\" - Escrita. Cria arquivo novo ou sobrescreve existente.\nwith open(\"arquivo.txt\", \"w\") as f:\n    f.write(\"Ol\u00e1, mundo!\")\n\n# \"a\" - Append (anexar). Adiciona ao final do arquivo.\nwith open(\"arquivo.txt\", \"a\") as f:\n    f.write(\"\\nNova linha.\")\n\n# \"x\" - Cria\u00e7\u00e3o exclusiva. Falha se o arquivo j\u00e1 existir.\nwith open(\"novo_arquivo.txt\", \"x\") as f:\n    f.write(\"Arquivo novo\")\n\n# \"b\" - Modo bin\u00e1rio (usado junto com outros modos)\nwith open(\"imagem.jpg\", \"rb\") as f:\n    dados_binarios = f.read()\n\n# \"t\" - Modo texto (padr\u00e3o, usado junto com outros modos)\nwith open(\"arquivo.txt\", \"rt\") as f:\n    texto = f.read()\n\n# \"+\" - Atualiza\u00e7\u00e3o (leitura e escrita)\nwith open(\"arquivo.txt\", \"r+\") as f:\n    texto = f.read()\n    f.write(\"Nova informa\u00e7\u00e3o\")\n</code></pre> <pre><code># Especificando o encoding (importante para caracteres n\u00e3o-ASCII)\n\n# UTF-8 (recomendado para compatibilidade)\nwith open(\"arquivo.txt\", \"r\", encoding=\"utf-8\") as f:\n    texto = f.read()\n\n# Latin-1 (ISO-8859-1)\nwith open(\"arquivo_latin1.txt\", \"r\", encoding=\"latin-1\") as f:\n    texto = f.read()\n\n# Tratando erros de encoding\nwith open(\"arquivo_problematico.txt\", \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n    texto = f.read()  # Ignora caracteres inv\u00e1lidos\n\nwith open(\"arquivo_problematico.txt\", \"r\", encoding=\"utf-8\", errors=\"replace\") as f:\n    texto = f.read()  # Substitui caracteres inv\u00e1lidos por '\ufffd'\n</code></pre>"},{"location":"trilhas/python/page-10/#trabalhando-com-arquivos-de-texto","title":"Trabalhando com Arquivos de Texto","text":"Leitura B\u00e1sicaLeitura ControladaEscrita B\u00e1sicaOpera\u00e7\u00f5es Combinadas <pre><code># Lendo arquivo inteiro\nwith open(\"exemplo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    conteudo = arquivo.read()\n    print(conteudo)\n\n# Lendo linha por linha\nwith open(\"exemplo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    for linha in arquivo:\n        print(linha.strip())  # strip() remove espa\u00e7os e quebras de linha extras\n\n# Lendo todas as linhas em uma lista\nwith open(\"exemplo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    linhas = arquivo.readlines()\n    print(f\"O arquivo tem {len(linhas)} linhas\")\n    for i, linha in enumerate(linhas):\n        print(f\"Linha {i+1}: {linha.strip()}\")\n</code></pre> <pre><code># Lendo um n\u00famero espec\u00edfico de caracteres\nwith open(\"exemplo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    inicio = arquivo.read(10)  # Primeiros 10 caracteres\n    print(f\"In\u00edcio do arquivo: {inicio}\")\n\n# Lendo linha por linha com readline()\nwith open(\"exemplo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    primeira_linha = arquivo.readline()\n    segunda_linha = arquivo.readline()\n    print(f\"1\u00aa linha: {primeira_linha.strip()}\")\n    print(f\"2\u00aa linha: {segunda_linha.strip()}\")\n\n# Navegando no arquivo\nwith open(\"exemplo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    arquivo.seek(10)  # Move o cursor para o 10\u00ba byte\n    trecho = arquivo.read(5)\n    print(f\"5 caracteres a partir do 10\u00ba byte: {trecho}\")\n\n    posicao_atual = arquivo.tell()  # Retorna a posi\u00e7\u00e3o atual\n    print(f\"Posi\u00e7\u00e3o atual: {posicao_atual}\")\n</code></pre> <pre><code># Escrevendo texto simples\nwith open(\"saida.txt\", \"w\", encoding=\"utf-8\") as arquivo:\n    arquivo.write(\"Ol\u00e1, mundo!\\n\")\n    arquivo.write(\"Esta \u00e9 a segunda linha.\\n\")\n\n# Escrevendo m\u00faltiplas linhas de uma vez\nlinhas = [\"Primeira linha\", \"Segunda linha\", \"Terceira linha\"]\nwith open(\"saida.txt\", \"w\", encoding=\"utf-8\") as arquivo:\n    arquivo.writelines(f\"{linha}\\n\" for linha in linhas)\n\n# Anexando ao final do arquivo\nwith open(\"saida.txt\", \"a\", encoding=\"utf-8\") as arquivo:\n    arquivo.write(\"Esta linha ser\u00e1 anexada ao final.\\n\")\n</code></pre> <pre><code># Lendo, modificando e reescrevendo\nwith open(\"arquivo.txt\", \"r\", encoding=\"utf-8\") as arquivo:\n    conteudo = arquivo.read()\n\n# Processa o conte\u00fado\nconteudo_modificado = conteudo.replace(\"antigo\", \"novo\")\n\nwith open(\"arquivo.txt\", \"w\", encoding=\"utf-8\") as arquivo:\n    arquivo.write(conteudo_modificado)\n\n# Copiando conte\u00fado de um arquivo para outro\nwith open(\"origem.txt\", \"r\", encoding=\"utf-8\") as origem:\n    with open(\"destino.txt\", \"w\", encoding=\"utf-8\") as destino:\n        for linha in origem:\n            destino.write(linha)\n</code></pre> <p>Arquivos grandes</p> <p>Para arquivos muito grandes, evite usar <code>read()</code> para ler todo o conte\u00fado de uma vez, pois isso pode consumir muita mem\u00f3ria. Prefira ler linha por linha ou em pequenos blocos, usando um loop.</p>"},{"location":"trilhas/python/page-10/#arquivos-csv-comma-separated-values","title":"Arquivos CSV (Comma-Separated Values)","text":"<p>CSV \u00e9 um formato popular para armazenar dados tabulares (como planilhas) como texto.</p> Lendo Arquivos CSVEscrevendo Arquivos CSVExemplo Pr\u00e1tico: An\u00e1lise de Dados <pre><code>import csv\n\n# Lendo um CSV simples\nwith open(\"dados.csv\", \"r\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    leitor = csv.reader(arquivo)\n    for linha in leitor:\n        print(linha)  # linha \u00e9 uma lista de valores\n\n# Lendo com cabe\u00e7alhos\nwith open(\"dados.csv\", \"r\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    leitor = csv.DictReader(arquivo)  # Usa a primeira linha como chaves\n    for linha in leitor:\n        print(linha)  # linha \u00e9 um dicion\u00e1rio\n        print(f\"Nome: {linha['nome']}, Idade: {linha['idade']}\")\n\n# Especificando delimitador\nwith open(\"dados.tsv\", \"r\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    leitor = csv.reader(arquivo, delimiter=\"\\t\")  # Tabula\u00e7\u00e3o como delimitador\n    for linha in leitor:\n        print(linha)\n</code></pre> <pre><code>import csv\n\n# Escrevendo um CSV simples\ndados = [\n    [\"Nome\", \"Idade\", \"Cidade\"],\n    [\"Jo\u00e3o\", \"25\", \"S\u00e3o Paulo\"],\n    [\"Maria\", \"30\", \"Rio de Janeiro\"],\n    [\"Pedro\", \"22\", \"Belo Horizonte\"]\n]\n\nwith open(\"pessoas.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    escritor = csv.writer(arquivo)\n    for linha in dados:\n        escritor.writerow(linha)  # Escreve uma linha\n\n# Ou, mais diretamente:\nwith open(\"pessoas.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    escritor = csv.writer(arquivo)\n    escritor.writerows(dados)  # Escreve todas as linhas\n\n# Escrevendo com dicion\u00e1rios\ndados_dict = [\n    {\"nome\": \"Jo\u00e3o\", \"idade\": 25, \"cidade\": \"S\u00e3o Paulo\"},\n    {\"nome\": \"Maria\", \"idade\": 30, \"cidade\": \"Rio de Janeiro\"},\n    {\"nome\": \"Pedro\", \"idade\": 22, \"cidade\": \"Belo Horizonte\"}\n]\n\nwith open(\"pessoas_dict.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    campos = [\"nome\", \"idade\", \"cidade\"]\n    escritor = csv.DictWriter(arquivo, fieldnames=campos)\n    escritor.writeheader()  # Escreve a linha de cabe\u00e7alho\n    escritor.writerows(dados_dict)\n</code></pre> <pre><code>import csv\nfrom collections import defaultdict\n\n# Suponha um CSV com dados de vendas (produto, quantidade, valor)\n\n# Analisar vendas por produto\nvendas_por_produto = defaultdict(int)\ntotal_vendas = 0\n\nwith open(\"vendas.csv\", \"r\", encoding=\"utf-8\", newline=\"\") as arquivo:\n    leitor = csv.DictReader(arquivo)\n    for venda in leitor:\n        produto = venda[\"produto\"]\n        quantidade = int(venda[\"quantidade\"])\n        valor = float(venda[\"valor\"])\n\n        vendas_por_produto[produto] += quantidade\n        total_vendas += quantidade * valor\n\n# Exibir resultados\nprint(f\"Total de vendas: R$ {total_vendas:.2f}\")\nprint(\"\\nQuantidade vendida por produto:\")\nfor produto, quantidade in sorted(vendas_por_produto.items()):\n    print(f\"{produto}: {quantidade} unidades\")\n</code></pre>"},{"location":"trilhas/python/page-10/#arquivos-json","title":"Arquivos JSON","text":"<p>JSON (JavaScript Object Notation) \u00e9 um formato leve para troca de dados, f\u00e1cil de ler e escrever.</p> Lendo Arquivos JSONEscrevendo Arquivos JSONTrabalhando com JSON ComplexoConvertendo entre JSON e CSV <pre><code>import json\n\n# Lendo um arquivo JSON\nwith open(\"dados.json\", \"r\", encoding=\"utf-8\") as arquivo:\n    dados = json.load(arquivo)\n\nprint(type(dados))  # &lt;class 'dict'&gt; ou &lt;class 'list'&gt; dependendo do JSON\n\n# Acessando dados\nif isinstance(dados, dict):\n    print(f\"Nome: {dados.get('nome')}\")\n    print(f\"Idade: {dados.get('idade')}\")\nelif isinstance(dados, list):\n    for item in dados:\n        print(f\"Item: {item}\")\n</code></pre> <pre><code>import json\n\n# Criando um dicion\u00e1rio\npessoa = {\n    \"nome\": \"Jo\u00e3o Silva\",\n    \"idade\": 30,\n    \"cidade\": \"S\u00e3o Paulo\",\n    \"habilidades\": [\"Python\", \"JavaScript\", \"SQL\"],\n    \"ativo\": True,\n    \"contatos\": {\n        \"email\": \"joao@exemplo.com\",\n        \"telefone\": \"123-456-789\"\n    }\n}\n\n# Salvando como JSON\nwith open(\"pessoa.json\", \"w\", encoding=\"utf-8\") as arquivo:\n    json.dump(pessoa, arquivo, indent=4, ensure_ascii=False)\n    # indent: formata o JSON para f\u00e1cil leitura\n    # ensure_ascii=False: preserva caracteres n\u00e3o-ASCII (acentos, etc.)\n\n# Convertendo para string JSON\njson_str = json.dumps(pessoa, indent=4, ensure_ascii=False)\nprint(json_str)\n\n# Salvando uma lista de objetos\npessoas = [\n    {\"nome\": \"Jo\u00e3o\", \"idade\": 30},\n    {\"nome\": \"Maria\", \"idade\": 25},\n    {\"nome\": \"Pedro\", \"idade\": 40}\n]\n\nwith open(\"pessoas.json\", \"w\", encoding=\"utf-8\") as arquivo:\n    json.dump(pessoas, arquivo, indent=4, ensure_ascii=False)\n</code></pre> <pre><code>import json\n\n# Carregando um JSON complexo\nwith open(\"dados_complexos.json\", \"r\", encoding=\"utf-8\") as arquivo:\n    dados = json.load(arquivo)\n\n# Navegando em uma estrutura aninhada\nif \"usuarios\" in dados:\n    for usuario in dados[\"usuarios\"]:\n        print(f\"Nome: {usuario['nome']}\")\n\n        if \"enderecos\" in usuario:\n            for endereco in usuario[\"enderecos\"]:\n                print(f\"  Rua: {endereco['rua']}, Cidade: {endereco['cidade']}\")\n\n        if \"pedidos\" in usuario:\n            total_pedidos = sum(pedido[\"valor\"] for pedido in usuario[\"pedidos\"])\n            print(f\"  Total de pedidos: R$ {total_pedidos:.2f}\")\n\n# Modificando e salvando\ndados[\"ultima_atualizacao\"] = \"2023-05-10\"\n\nwith open(\"dados_atualizados.json\", \"w\", encoding=\"utf-8\") as arquivo:\n    json.dump(dados, arquivo, indent=2, ensure_ascii=False)\n</code></pre> <pre><code>import json\nimport csv\n\n# JSON para CSV\nwith open(\"dados.json\", \"r\", encoding=\"utf-8\") as arquivo_json:\n    dados = json.load(arquivo_json)\n\n# Supondo que dados \u00e9 uma lista de dicion\u00e1rios\nif dados and isinstance(dados, list):\n    # Extrai as chaves do primeiro item como cabe\u00e7alhos\n    campos = dados[0].keys()\n\n    with open(\"dados.csv\", \"w\", encoding=\"utf-8\", newline=\"\") as arquivo_csv:\n        escritor = csv.DictWriter(arquivo_csv, fieldnames=campos)\n        escritor.writeheader()\n        escritor.writerows(dados)\n\n# CSV para JSON\ndados_json = []\n\nwith open(\"dados.csv\", \"r\", encoding=\"utf-8\", newline=\"\") as arquivo_csv:\n    leitor = csv.DictReader(arquivo_csv)\n    for linha in leitor:\n        dados_json.append(linha)\n\nwith open(\"dados_convertidos.json\", \"w\", encoding=\"utf-8\") as arquivo_json:\n    json.dump(dados_json, arquivo_json, indent=4, ensure_ascii=False)\n</code></pre>"},{"location":"trilhas/python/page-10/#trabalhando-com-arquivos-binarios","title":"Trabalhando com Arquivos Bin\u00e1rios","text":"Leitura e Escrita Bin\u00e1riaCopiando Arquivos Bin\u00e1riosManipulando Imagens (com Pillow) <pre><code># Lendo arquivo bin\u00e1rio\nwith open(\"imagem.jpg\", \"rb\") as arquivo:\n    dados = arquivo.read()\n    print(f\"Tamanho: {len(dados)} bytes\")\n    print(f\"Primeiros bytes: {dados[:10].hex()}\")\n\n# Escrevendo arquivo bin\u00e1rio\ndados_binarios = bytes([0x48, 0x65, 0x6C, 0x6C, 0x6F])  # \"Hello\" em ASCII\nwith open(\"dados.bin\", \"wb\") as arquivo:\n    arquivo.write(dados_binarios)\n</code></pre> <pre><code>def copiar_arquivo(origem, destino, tamanho_buffer=4096):\n    \"\"\"Copia um arquivo bin\u00e1rio em blocos para economizar mem\u00f3ria.\"\"\"\n    with open(origem, \"rb\") as arquivo_origem:\n        with open(destino, \"wb\") as arquivo_destino:\n            while True:\n                buffer = arquivo_origem.read(tamanho_buffer)\n                if not buffer:\n                    break\n                arquivo_destino.write(buffer)\n\n# Uso\ncopiar_arquivo(\"imagem_original.jpg\", \"imagem_copia.jpg\")\n</code></pre> <pre><code># Precisa instalar: pip install Pillow\nfrom PIL import Image\n\n# Abrir uma imagem\nimagem = Image.open(\"foto.jpg\")\nprint(f\"Formato: {imagem.format}\")\nprint(f\"Tamanho: {imagem.size}\")\nprint(f\"Modo: {imagem.mode}\")\n\n# Redimensionar\nimagem_redimensionada = imagem.resize((800, 600))\nimagem_redimensionada.save(\"foto_redimensionada.jpg\")\n\n# Converter para escala de cinza\nimagem_pb = imagem.convert(\"L\")\nimagem_pb.save(\"foto_pb.jpg\")\n\n# Recortar\narea = (100, 100, 400, 400)  # (left, upper, right, lower)\nimagem_recortada = imagem.crop(area)\nimagem_recortada.save(\"foto_recortada.jpg\")\n</code></pre>"},{"location":"trilhas/python/page-10/#gerenciamento-de-caminhos-e-diretorios","title":"Gerenciamento de Caminhos e Diret\u00f3rios","text":"Trabalhando com CaminhosOpera\u00e7\u00f5es com Diret\u00f3riosCaminhando em uma \u00c1rvore de Diret\u00f3rios <pre><code>import os\nimport os.path\n\n# Caminhos absolutos vs. relativos\ncaminho_absoluto = \"/home/usuario/documentos/arquivo.txt\"\ncaminho_relativo = \"documentos/arquivo.txt\"\n\n# Obtendo o diret\u00f3rio atual\ndiretorio_atual = os.getcwd()\nprint(f\"Diret\u00f3rio atual: {diretorio_atual}\")\n\n# Juntando caminhos (funciona em todos os sistemas operacionais)\ncaminho = os.path.join(\"pasta\", \"subpasta\", \"arquivo.txt\")\nprint(caminho)  # Ex: pasta/subpasta/arquivo.txt (no Unix)\n\n# Extraindo componentes do caminho\narquivo = \"/home/usuario/documentos/relatorio.pdf\"\nprint(f\"Diret\u00f3rio: {os.path.dirname(arquivo)}\")       # /home/usuario/documentos\nprint(f\"Nome do arquivo: {os.path.basename(arquivo)}\") # relatorio.pdf\nprint(f\"Nome sem extens\u00e3o: {os.path.splitext(os.path.basename(arquivo))[0]}\")  # relatorio\nprint(f\"Extens\u00e3o: {os.path.splitext(arquivo)[1]}\")    # .pdf\n\n# Verificando exist\u00eancia\nexiste = os.path.exists(arquivo)\ne_arquivo = os.path.isfile(arquivo)\ne_diretorio = os.path.isdir(os.path.dirname(arquivo))\n\nprint(f\"Existe? {existe}\")\nprint(f\"\u00c9 arquivo? {e_arquivo}\")\nprint(f\"\u00c9 diret\u00f3rio? {e_diretorio}\")\n\n# Obtendo informa\u00e7\u00f5es do arquivo\nif os.path.exists(arquivo):\n    tamanho = os.path.getsize(arquivo)  # tamanho em bytes\n    data_mod = os.path.getmtime(arquivo)  # timestamp da \u00faltima modifica\u00e7\u00e3o\n\n    import datetime\n    data_formatada = datetime.datetime.fromtimestamp(data_mod).strftime('%Y-%m-%d %H:%M:%S')\n\n    print(f\"Tamanho: {tamanho} bytes\")\n    print(f\"\u00daltima modifica\u00e7\u00e3o: {data_formatada}\")\n</code></pre> <pre><code>import os\nimport shutil\n\n# Listar conte\u00fado de um diret\u00f3rio\nfor item in os.listdir(\".\"):  # \".\" representa o diret\u00f3rio atual\n    tipo = \"Diret\u00f3rio\" if os.path.isdir(item) else \"Arquivo\"\n    print(f\"{item} - {tipo}\")\n\n# Listar com mais detalhes usando glob\nimport glob\n\n# Todos os arquivos Python no diret\u00f3rio atual\narquivos_py = glob.glob(\"*.py\")\nprint(f\"Arquivos Python: {arquivos_py}\")\n\n# Todos os arquivos em uma estrutura de diret\u00f3rios\narquivos_txt = glob.glob(\"**/*.txt\", recursive=True)\nprint(f\"Arquivos de texto em todos os subdiret\u00f3rios: {arquivos_txt}\")\n\n# Criar diret\u00f3rio\nos.makedirs(\"nova_pasta/subpasta\", exist_ok=True)\n\n# Copiar arquivo\nshutil.copy2(\"origem.txt\", \"destino.txt\")\n\n# Mover arquivo\nshutil.move(\"arquivo.txt\", \"nova_pasta/arquivo.txt\")\n\n# Remover arquivo\nos.remove(\"arquivo_para_remover.txt\")\n\n# Remover diret\u00f3rio vazio\nos.rmdir(\"diretorio_vazio\")\n\n# Remover diret\u00f3rio com conte\u00fado\nshutil.rmtree(\"diretorio_com_arquivos\")\n</code></pre> <pre><code>import os\n\ndef listar_arquivos_recursivamente(diretorio):\n    \"\"\"Lista todos os arquivos em um diret\u00f3rio e seus subdiret\u00f3rios.\"\"\"\n    for raiz, dirs, arquivos in os.walk(diretorio):\n        print(f\"\\nDiret\u00f3rio: {raiz}\")\n\n        if arquivos:\n            print(\"Arquivos:\")\n            for arquivo in arquivos:\n                caminho_completo = os.path.join(raiz, arquivo)\n                tamanho = os.path.getsize(caminho_completo)\n                print(f\"  - {arquivo} ({tamanho} bytes)\")\n\n# Uso\nlistar_arquivos_recursivamente(\".\")  # Lista a partir do diret\u00f3rio atual\n</code></pre>"},{"location":"trilhas/python/page-10/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"Gerenciamento de RecursosTratamento de Exce\u00e7\u00f5esDesempenhoSanitiza\u00e7\u00e3o de Caminhos <pre><code># SEMPRE use 'with' para abrir arquivos\n\n# Correto:\nwith open(\"arquivo.txt\", \"r\") as arquivo:\n    conteudo = arquivo.read()\n\n# Evite:\narquivo = open(\"arquivo.txt\", \"r\")\ntry:\n    conteudo = arquivo.read()\nfinally:\n    arquivo.close()\n\n# Ruim (pode deixar o arquivo aberto em caso de exce\u00e7\u00e3o):\narquivo = open(\"arquivo.txt\", \"r\")\nconteudo = arquivo.read()\narquivo.close()\n</code></pre> <pre><code># Sempre trate exce\u00e7\u00f5es ao trabalhar com arquivos\ntry:\n    with open(\"arquivo.txt\", \"r\") as arquivo:\n        conteudo = arquivo.read()\nexcept FileNotFoundError:\n    print(\"Arquivo n\u00e3o encontrado.\")\nexcept PermissionError:\n    print(\"Sem permiss\u00e3o para acessar o arquivo.\")\nexcept UnicodeDecodeError:\n    print(\"Erro de decodifica\u00e7\u00e3o. Verifique o encoding do arquivo.\")\nexcept Exception as e:\n    print(f\"Erro n\u00e3o esperado: {e}\")\n\n# Para opera\u00e7\u00f5es em lote, continue mesmo ap\u00f3s erro\narquivos = [\"arquivo1.txt\", \"arquivo2.txt\", \"arquivo3.txt\"]\n\nfor nome_arquivo in arquivos:\n    try:\n        with open(nome_arquivo, \"r\") as arquivo:\n            # Processa o arquivo\n            print(f\"Processando {nome_arquivo}...\")\n    except Exception as e:\n        print(f\"Erro ao processar {nome_arquivo}: {e}\")\n        continue  # Continue para o pr\u00f3ximo arquivo\n</code></pre> <pre><code># Otimizando leitura de grandes arquivos\n\n# Em vez de ler todo o arquivo de uma vez:\ndef processar_arquivo_grande(nome_arquivo):\n    with open(nome_arquivo, \"r\") as arquivo:\n        # Processa uma linha por vez\n        for linha in arquivo:\n            # Faz algo com a linha\n            processar_linha(linha)\n\n# Otimizando a escrita com buffers\ndef escrever_muitas_linhas(nome_arquivo, num_linhas):\n    with open(nome_arquivo, \"w\", buffering=8192) as arquivo:\n        for i in range(num_linhas):\n            arquivo.write(f\"Linha {i}\\n\")\n</code></pre> <pre><code>import os\n\n# Sempre sanitize caminhos fornecidos por usu\u00e1rios\ndef caminho_seguro(base_dir, caminho_usuario):\n    \"\"\"Garante que o caminho do usu\u00e1rio n\u00e3o escape do diret\u00f3rio base.\"\"\"\n    # Obter o caminho absoluto normalizado\n    caminho_completo = os.path.normpath(os.path.join(base_dir, caminho_usuario))\n\n    # Verificar se o caminho est\u00e1 dentro do diret\u00f3rio base\n    if n\u00e3o caminho_completo.startswith(os.path.abspath(base_dir)):\n        raise ValueError(\"Tentativa de acesso a um diret\u00f3rio n\u00e3o permitido\")\n\n    return caminho_completo\n\n# Uso\ntry:\n    arquivo = caminho_seguro(\"/home/usuario/arquivos\", \"../../../etc/passwd\")\n    # Isso levantar\u00e1 uma exce\u00e7\u00e3o\nexcept ValueError as e:\n    print(f\"Erro: {e}\")\n</code></pre>"},{"location":"trilhas/python/page-10/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":"Analisador de LogConversor de FormatoBackup de Diret\u00f3rio <pre><code># Analisador de arquivo de log simples\ndef analisar_log(arquivo_log):\n    erros = []\n    avisos = []\n    infos = 0\n\n    try:\n        with open(arquivo_log, \"r\", encoding=\"utf-8\") as log:\n            for linha in log:\n                if \"ERROR\" in linha:\n                    erros.append(linha.strip())\n                elif \"WARNING\" in linha:\n                    avisos.append(linha.strip())\n                elif \"INFO\" in linha:\n                    infos += 1\n\n        print(f\"An\u00e1lise do arquivo de log: {arquivo_log}\")\n        print(f\"Total de mensagens INFO: {infos}\")\n        print(f\"Total de avisos: {len(avisos)}\")\n        print(f\"Total de erros: {len(erros)}\")\n\n        if erros:\n            print(\"\\nErros encontrados:\")\n            for erro em erros[:5]:  # Primeiros 5 erros\n                print(f\"  {erro}\")\n            if len(erros) &gt; 5:\n                print(f\"  ... e mais {len(erros) - 5} erros\")\n\n    except Exception as e:\n        print(f\"Erro ao analisar o arquivo de log: {e}\")\n\n# Uso\nanalisar_log(\"aplicacao.log\")\n</code></pre> <pre><code>import json\nimport csv\nimport os\n\ndef converter_csv_para_json(arquivo_csv, arquivo_json=None):\n    \"\"\"Converte um arquivo CSV para JSON.\"\"\"\n    if arquivo_json is None:\n        nome_base = os.path.splitext(arquivo_csv)[0]\n        arquivo_json = f\"{nome_base}.json\"\n\n    dados = []\n\n    try:\n        with open(arquivo_csv, \"r\", encoding=\"utf-8\", newline=\"\") as csv_file:\n            leitor = csv.DictReader(csv_file)\n            for linha em leitor:\n                # Converter strings num\u00e9ricas para n\u00fameros\n                for chave, valor em linha.items():\n                    if valor.isdigit():\n                        linha[chave] = int(valor)\n                    elif valor.replace(\".\", \"\", 1).isdigit() and valor.count(\".\") &lt;= 1:\n                        linha[chave] = float(valor)\n                dados.append(linha)\n\n        with open(arquivo_json, \"w\", encoding=\"utf-8\") as json_file:\n            json.dump(dados, json_file, indent=2, ensure_ascii=False)\n\n        print(f\"Arquivo convertido com sucesso: {arquivo_csv} -&gt; {arquivo_json}\")\n        print(f\"Total de registros: {len(dados)}\")\n        return True\n\n    except Exception as e:\n        print(f\"Erro durante a convers\u00e3o: {e}\")\n        return False\n\n# Uso\nconverter_csv_para_json(\"dados.csv\")\n</code></pre> <pre><code>import os\nimport shutil\nimport zipfile\nimport datetime\n\ndef fazer_backup(diretorio_origem, diretorio_destino=None):\n    \"\"\"Cria um backup compactado de um diret\u00f3rio.\"\"\"\n    # Nome do arquivo de backup\n    data_atual = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    nome_diretorio = os.path.basename(os.path.normpath(diretorio_origem))\n    nome_backup = f\"backup_{nome_diretorio}_{data_atual}.zip\"\n\n    # Diret\u00f3rio de destino\n    if diretorio_destino is None:\n        diretorio_destino = os.getcwd()\n\n    caminho_backup = os.path.join(diretorio_destino, nome_backup)\n\n    try:\n        # Criar arquivo ZIP\n        with zipfile.ZipFile(caminho_backup, \"w\", zipfile.ZIP_DEFLATED) as zipf:\n            # Percorrer todos os arquivos e subdiret\u00f3rios\n            for raiz, _, arquivos em os.walk(diretorio_origem):\n                for arquivo em arquivos:\n                    caminho_completo = os.path.join(raiz, arquivo)\n                    # Caminho relativo dentro do ZIP\n                    caminho_relativo = os.path.relpath(caminho_completo, diretorio_origem)\n                    zipf.write(caminho_completo, caminho_relativo)\n\n        print(f\"Backup criado com sucesso: {caminho_backup}\")\n        return caminho_backup\n\n    except Exception as e:\n        print(f\"Erro ao criar backup: {e}\")\n        return None\n\n# Uso\nfazer_backup(\"./meus_documentos\", \"./backups\")\n</code></pre>"},{"location":"trilhas/python/page-10/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Opera\u00e7\u00f5es b\u00e1sicas de leitura e escrita em arquivos</li> <li>Diferentes modos de abertura de arquivos</li> <li>Trabalhando com encodings para lidar com diferentes conjuntos de caracteres</li> <li>Manipula\u00e7\u00e3o de arquivos CSV para dados tabulares</li> <li>Manipula\u00e7\u00e3o de arquivos JSON para dados estruturados</li> <li>Trabalhando com arquivos bin\u00e1rios</li> <li>Gerenciamento de caminhos e diret\u00f3rios com os m\u00f3dulos <code>os</code> e <code>os.path</code></li> <li>Boas pr\u00e1ticas para trabalhar com arquivos em Python</li> <li>Exemplos pr\u00e1ticos de manipula\u00e7\u00e3o de arquivos</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre manipula\u00e7\u00e3o de arquivos</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo csv</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo json</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo os.path</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo shutil</li> </ul>"},{"location":"trilhas/python/page-10/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos iteradores e geradores, poderosas ferramentas para processamento de dados de forma eficiente.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para M\u00f3dulos</p>"},{"location":"trilhas/python/page-11/","title":"Aula 11: Iteradores e Geradores","text":""},{"location":"trilhas/python/page-11/#iteradores-e-geradores","title":"Iteradores e Geradores","text":""},{"location":"trilhas/python/page-11/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Iteradores e geradores s\u00e3o componentes fundamentais da programa\u00e7\u00e3o em Python que facilitam o processamento eficiente de sequ\u00eancias de dados. Enquanto os iteradores fornecem uma interface padronizada para percorrer cole\u00e7\u00f5es, os geradores oferecem uma maneira elegante e eficiente de criar iteradores com m\u00ednimo consumo de mem\u00f3ria.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o protocolo de itera\u00e7\u00e3o em Python</li> <li>Diferenciar entre iter\u00e1veis e iteradores</li> <li>Aprender a criar e usar iteradores personalizados</li> <li>Dominar o conceito e uso de geradores</li> <li>Compreender express\u00f5es geradoras</li> <li>Aplicar iteradores e geradores em situa\u00e7\u00f5es pr\u00e1ticas</li> </ul>"},{"location":"trilhas/python/page-11/#protocolo-de-iteracao-em-python","title":"Protocolo de Itera\u00e7\u00e3o em Python","text":"<p>O protocolo de itera\u00e7\u00e3o \u00e9 o fundamento para percorrer sequ\u00eancias em Python, como loops <code>for</code> e compreens\u00f5es de lista.</p> Iter\u00e1veis vs. IteradoresComo Funciona o Loop ForManipulando Iteradores Manualmente <pre><code># Um iter\u00e1vel \u00e9 qualquer objeto que pode ser percorrido\n# Exemplos: listas, tuplas, dicion\u00e1rios, strings, arquivos\n\n# Um iterador \u00e9 um objeto que gerencia o estado da itera\u00e7\u00e3o\n# Um iterador sabe qual \u00e9 o elemento atual e qual o pr\u00f3ximo\n\n# M\u00e9todos necess\u00e1rios para um objeto ser iterador:\n# - __iter__(): retorna o pr\u00f3prio iterador\n# - __next__(): retorna o pr\u00f3ximo item ou levanta StopIteration\n</code></pre> <pre><code># O loop for funciona assim por baixo dos panos:\n\n# Quando escrevemos:\nfor item in minha_lista:\n    print(item)\n\n# O Python na verdade faz:\niterador = iter(minha_lista)  # Chama minha_lista.__iter__()\nwhile True:\n    try:\n        item = next(iterador)  # Chama iterador.__next__()\n        print(item)\n    except StopIteration:\n        break  # Fim da itera\u00e7\u00e3o\n</code></pre> <pre><code># Criando um iterador a partir de um iter\u00e1vel\nnumeros = [1, 2, 3, 4, 5]\niterador = iter(numeros)\n\n# Obtendo valores manualmente\nprint(next(iterador))  # 1\nprint(next(iterador))  # 2\nprint(next(iterador))  # 3\n\n# Percorrendo os itens restantes\nfor numero in iterador:\n    print(numero)  # 4, 5\n\n# Tentar obter mais valores resulta em StopIteration\ntry:\n    next(iterador)\nexcept StopIteration:\n    print(\"Itera\u00e7\u00e3o conclu\u00edda!\")\n\n# Importante: iteradores s\u00e3o esgot\u00e1veis\n# Uma vez percorridos, n\u00e3o podem ser reutilizados\nfor numero in iterador:\n    print(numero)  # N\u00e3o imprime nada, o iterador j\u00e1 foi esgotado\n</code></pre>"},{"location":"trilhas/python/page-11/#criando-iteradores-personalizados","title":"Criando Iteradores Personalizados","text":"<p>Voc\u00ea pode criar seus pr\u00f3prios iteradores implementando os m\u00e9todos <code>__iter__</code> e <code>__next__</code>.</p> Iterador SimplesIterador Mais ComplexoPadr\u00e3o Iterador-Iter\u00e1vel Separado <pre><code>class Contador:\n    \"\"\"Um iterador que conta de in\u00edcio at\u00e9 fim, pulando passo.\"\"\"\n\n    def __init__(self, inicio, fim, passo=1):\n        self.inicio = inicio\n        self.fim = fim\n        self.passo = passo\n        self.valor = inicio\n\n    def __iter__(self):\n        # Retorna o pr\u00f3prio objeto como iterador\n        self.valor = self.inicio\n        return self\n\n    def __next__(self):\n        # Verifica se a itera\u00e7\u00e3o deve terminar\n        if (self.passo &gt; 0 and self.valor &gt; self.fim) or \\\n           (self.passo &lt; 0 and self.valor &lt; self.fim):\n            raise StopIteration\n\n        valor_atual = self.valor\n        self.valor += self.passo\n        return valor_atual\n\n# Usando o iterador personalizado\ncontador = Contador(1, 10, 2)\nfor numero in contador:\n    print(numero)  # 1, 3, 5, 7, 9\n\n# Podemos reutilizar porque __iter__ reinicia o estado\nprint(\"Contagem regressiva:\")\ncontador_reverso = Contador(10, 1, -2)\nfor numero in contador_reverso:\n    print(numero)  # 10, 8, 6, 4, 2\n</code></pre> <pre><code>class FibonacciIterator:\n    \"\"\"Iterador que gera a sequ\u00eancia de Fibonacci at\u00e9 n.\"\"\"\n\n    def __init__(self, n):\n        self.n = n  # Quantidade m\u00e1xima de n\u00fameros\n        self.gerados = 0\n        self.a = 0\n        self.b = 1\n\n    def __iter__(self):\n        self.gerados = 0\n        self.a = 0\n        self.b = 1\n        return self\n\n    def __next__(self):\n        if self.gerados &gt;= self.n:\n            raise StopIteration\n\n        if self.gerados == 0:\n            self.gerados += 1\n            return 0\n        elif self.gerados == 1:\n            self.gerados += 1\n            return 1\n        else:\n            resultado = self.a + self.b\n            self.a, self.b = self.b, resultado\n            self.gerados += 1\n            return resultado\n\n# Usando o iterador Fibonacci\nfib = FibonacciIterator(8)\nfor numero in fib:\n    print(numero, end=\" \")  # 0 1 1 2 3 5 8 13\n\nprint()\n\n# Convertendo para lista\nfib = FibonacciIterator(10)\nfibonacci_lista = list(fib)\nprint(fibonacci_lista)  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n</code></pre> <pre><code>class ListaInvertidaIteravel:\n    \"\"\"Iter\u00e1vel que percorre os elementos na ordem inversa.\"\"\"\n\n    def __init__(self, dados):\n        self.dados = dados\n\n    def __iter__(self):\n        # Retorna um novo iterador a cada chamada\n        return ListaInvertidaIterador(self.dados)\n\n\nclass ListaInvertidaIterador:\n    \"\"\"Iterador que percorre os elementos na ordem inversa.\"\"\"\n\n    def __init__(self, dados):\n        self.dados = dados\n        self.indice = len(dados)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.indice &lt;= 0:\n            raise StopIteration\n\n        self.indice -= 1\n        return self.dados[self.indice]\n\n# Usando o padr\u00e3o iterador-iter\u00e1vel\nminha_lista = [1, 2, 3, 4, 5]\ninvertida = ListaInvertidaIteravel(minha_lista)\n\n# Podemos usar v\u00e1rias vezes porque cada uso cria um novo iterador\nprint(\"Primeira itera\u00e7\u00e3o:\")\nfor item in invertida:\n    print(item, end=\" \")  # 5 4 3 2 1\n\nprint(\"\\nSegunda itera\u00e7\u00e3o:\")\nfor item in invertida:\n    print(item, end=\" \")  # 5 4 3 2 1\n</code></pre> <p>Separa\u00e7\u00e3o Iter\u00e1vel-Iterador</p> <p>A separa\u00e7\u00e3o dos conceitos de iter\u00e1vel e iterador permite reutilizar o iter\u00e1vel m\u00faltiplas vezes, criando um novo iterador a cada itera\u00e7\u00e3o. Isso \u00e9 o que acontece com objetos embutidos do Python como listas, que podem ser percorridos v\u00e1rias vezes.</p>"},{"location":"trilhas/python/page-11/#geradores","title":"Geradores","text":"<p>Geradores s\u00e3o uma forma simplificada de criar iteradores usando fun\u00e7\u00f5es em vez de classes. Eles usam a palavra-chave <code>yield</code> para retornar valores sob demanda.</p> Fun\u00e7\u00f5es Geradoras B\u00e1sicasEstado e Fluxo de Execu\u00e7\u00e3oGeradores InfinitosEnviando Valores para Geradores <pre><code># Fun\u00e7\u00e3o geradora simples\ndef contador(inicio, fim, passo=1):\n    \"\"\"Gerador que conta de in\u00edcio at\u00e9 fim, pulando passo.\"\"\"\n    valor = inicio\n\n    # L\u00f3gica diferente dependendo da dire\u00e7\u00e3o\n    if passo &gt; 0:\n        while valor &lt;= fim:\n            yield valor\n            valor += passo\n    else:\n        while valor &gt;= fim:\n            yield valor\n            valor += passo\n\n# Usando o gerador\nfor numero in contador(1, 10, 2):\n    print(numero, end=\" \")  # 1 3 5 7 9\n\nprint()\n\n# Outro exemplo: gerador de Fibonacci\ndef fibonacci(n):\n    \"\"\"Gera os primeiros n n\u00fameros da sequ\u00eancia de Fibonacci.\"\"\"\n    a, b = 0, 1\n    gerados = 0\n\n    while gerados &lt; n:\n        yield a\n        a, b = b, a + b\n        gerados += 1\n\n# Usando o gerador Fibonacci\nfor numero in fibonacci(8):\n    print(numero, end=\" \")  # 0 1 1 2 3 5 8 13\n\nprint()\n</code></pre> <pre><code>def demonstracao_yield():\n    \"\"\"Demonstra como o yield pausa a execu\u00e7\u00e3o.\"\"\"\n    print(\"Iniciando o gerador\")\n    yield 1\n    print(\"Depois do primeiro yield\")\n    yield 2\n    print(\"Depois do segundo yield\")\n    yield 3\n    print(\"Gerador terminado\")\n\n# Usando o gerador para entender o fluxo\ngerador = demonstracao_yield()\n\n# Cada next() executa at\u00e9 o pr\u00f3ximo yield\nprint(\"Chamando next() pela primeira vez\")\nprint(next(gerador))  # Imprime \"Iniciando o gerador\" e retorna 1\n\nprint(\"Chamando next() pela segunda vez\")\nprint(next(gerador))  # Imprime \"Depois do primeiro yield\" e retorna 2\n\nprint(\"Chamando next() pela terceira vez\")\nprint(next(gerador))  # Imprime \"Depois do segundo yield\" e retorna 3\n\ntry:\n    print(\"Chamando next() pela quarta vez\")\n    print(next(gerador))  # Levanta StopIteration ap\u00f3s imprimir \"Gerador terminado\"\nexcept StopIteration:\n    print(\"Gerador esgotado!\")\n</code></pre> <pre><code>def numeros_primos():\n    \"\"\"Gerador infinito de n\u00fameros primos.\"\"\"\n\n    def eh_primo(n):\n        if n &lt;= 1:\n            return False\n        if n &lt;= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i &lt;= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    n = 2\n    while True:  # Loop infinito\n        if eh_primo(n):\n            yield n\n        n += 1\n\n# Usando o gerador infinito (com cuidado!)\nprimos = numeros_primos()\n\n# Obtendo os primeiros 10 primos\nprimeiros_primos = [next(primos) for _ in range(10)]\nprint(primeiros_primos)  # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n# Para geradores infinitos, use ferramentas como islice\nimport itertools\nproximos_primos = list(itertools.islice(numeros_primos(), 10, 20))\nprint(proximos_primos)  # [31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n</code></pre> <pre><code>def gerador_eco():\n    \"\"\"Um gerador que ecoa o valor enviado a ele.\"\"\"\n    valor = yield \"Pronto para receber\"\n\n    while True:\n        if valor is None:\n            valor = yield \"Envie algo!\"\n        else:\n            valor = yield f\"Eco: {valor}\"\n\n# Usando o m\u00e9todo send()\neco = gerador_eco()\n\n# Primeiro next() para iniciar o gerador (vai at\u00e9 o primeiro yield)\nprimeira_msg = next(eco)\nprint(primeira_msg)  # Pronto para receber\n\n# Enviando valores\nprint(eco.send(\"Ol\u00e1\"))        # Eco: Ol\u00e1\nprint(eco.send(\"Python\"))     # Eco: Python\nprint(eco.send(None))         # Envie algo!\nprint(eco.send(42))           # Eco: 42\n\n# Fechando um gerador\neco.close()\n\ntry:\n    next(eco)\nexcept StopIteration:\n    print(\"Gerador fechado\")\n</code></pre>"},{"location":"trilhas/python/page-11/#expressoes-geradoras","title":"Express\u00f5es Geradoras","text":"<p>As express\u00f5es geradoras s\u00e3o semelhantes \u00e0s compreens\u00f5es de lista, mas retornam um gerador em vez de uma lista, economizando mem\u00f3ria.</p> Compreens\u00e3o de Lista vs. Express\u00e3o GeradoraEncadeamento de GeradoresGeradores como Argumentos de Fun\u00e7\u00f5es <pre><code>import sys\n\n# Compreens\u00e3o de lista (cria toda a lista na mem\u00f3ria)\nlista = [x ** 2 for x in range(1000000)]\n\n# Express\u00e3o geradora (calcula valores sob demanda)\ngerador = (x ** 2 for x in range(1000000))\n\n# Comparando o uso de mem\u00f3ria\nprint(f\"Tamanho da lista: {sys.getsizeof(lista)} bytes\")        # ~8MB\nprint(f\"Tamanho do gerador: {sys.getsizeof(gerador)} bytes\")    # ~112 bytes\n\n# Ambos podem ser usados em loops\nlista_pequena = [x for x in range(5)]  # [0, 1, 2, 3, 4]\ngerador_pequeno = (x for x in range(5))\n\nfor num in lista_pequena:\n    print(num, end=\" \")  # 0 1 2 3 4\n\nprint()\n\nfor num in gerador_pequeno:\n    print(num, end=\" \")  # 0 1 2 3 4\n\nprint()\n</code></pre> <pre><code># Geradores podem ser encadeados para criar pipelines de processamento\n\n# Exemplo: pipeline para processar n\u00fameros\nnumeros = range(1, 11)  # 1 a 10\n\n# Filtrar pares, elevar ao quadrado, e somar 1\npares = (x for x in numeros if x % 2 == 0)           # 2, 4, 6, 8, 10\nquadrados = (x**2 for x in pares)                    # 4, 16, 36, 64, 100\nresultados = (x + 1 for x in quadrados)              # 5, 17, 37, 65, 101\n\n# O c\u00e1lculo s\u00f3 acontece quando o gerador \u00e9 consumido\nfor resultado in resultados:\n    print(resultado, end=\" \")  # 5 17 37 65 101\n\nprint()\n\n# Tamb\u00e9m podemos usar fun\u00e7\u00f5es embutidas que consomem iter\u00e1veis\nnumeros = range(1, 11)\nresultado = sum((x**2 for x in numeros if x % 2 == 0))\nprint(f\"Soma dos quadrados dos n\u00fameros pares: {resultado}\")  # 220\n</code></pre> <pre><code># Muitas fun\u00e7\u00f5es aceitam iter\u00e1veis, incluindo geradores\n\n# Exemplo: fun\u00e7\u00f5es embutidas\nnumeros = range(1, 101)\n\n# Com compreens\u00f5es de lista\nmultiplos_3_lista = [n for n in numeros if n % 3 == 0]\nprint(f\"Soma (lista): {sum(multiplos_3_lista)}\")  # 1683\nprint(f\"M\u00e1ximo (lista): {max(multiplos_3_lista)}\")  # 99\n\n# Com express\u00f5es geradoras\nmultiplos_3_gerador = (n for n in numeros if n % 3 == 0)\nprint(f\"Soma (gerador): {sum(multiplos_3_gerador)}\")  # 1683\n\n# ATEN\u00c7\u00c3O: gerador j\u00e1 foi consumido por sum()!\n# A pr\u00f3xima linha retornaria um erro ou resultado inesperado\n# print(f\"M\u00e1ximo (gerador): {max(multiplos_3_gerador)}\")  # N\u00e3o funciona!\n\n# Para usar v\u00e1rias vezes, crie novos geradores:\nprint(f\"M\u00e1ximo: {max(n for n in numeros if n % 3 == 0)}\")  # 99\n</code></pre>"},{"location":"trilhas/python/page-11/#o-modulo-itertools","title":"O M\u00f3dulo itertools","text":"<p>O m\u00f3dulo <code>itertools</code> oferece ferramentas poderosas para trabalhar com iteradores.</p> Fun\u00e7\u00f5es de Combina\u00e7\u00e3oFun\u00e7\u00f5es de FiltragemGeradores InfinitosCombinadores <pre><code>import itertools\n\n# product: produto cartesiano (todas as combina\u00e7\u00f5es)\ndados = [1, 2]\nfaces = [1, 2, 3, 4, 5, 6]\n\n# Todas as combina\u00e7\u00f5es poss\u00edveis ao jogar dois dados\njogadas = list(itertools.product(dados, faces))\nprint(f\"Jogadas poss\u00edveis: {len(jogadas)}\")  # 12\nprint(jogadas[:5])  # [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\n\n# permutations: todas as permuta\u00e7\u00f5es (ordem importa)\nletras = ['A', 'B', 'C']\npermutacoes = list(itertools.permutations(letras))\nprint(f\"Permuta\u00e7\u00f5es: {len(permutacoes)}\")  # 6\nprint(permutacoes)  # [('A', 'B', 'C'), ('A', 'C', 'B'), ..., ('C', 'B', 'A')]\n\n# combinations: combina\u00e7\u00f5es sem repeti\u00e7\u00e3o (ordem n\u00e3o importa)\ncombinacoes = list(itertools.combinations(letras, 2))\nprint(f\"Combina\u00e7\u00f5es de 2 letras: {len(combinacoes)}\")  # 3\nprint(combinacoes)  # [('A', 'B'), ('A', 'C'), ('B', 'C')]\n\n# combinations_with_replacement: combina\u00e7\u00f5es com repeti\u00e7\u00e3o\ncomb_rep = list(itertools.combinations_with_replacement(letras, 2))\nprint(f\"Combina\u00e7\u00f5es com repeti\u00e7\u00e3o: {len(comb_rep)}\")  # 6\nprint(comb_rep)  # [('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'B'), ('B', 'C'), ('C', 'C')]\n</code></pre> <pre><code>import itertools\n\n# islice: fatiar um iter\u00e1vel\nnumeros = itertools.count(1)  # Gerador infinito de n\u00fameros\nprimeiros = list(itertools.islice(numeros, 5))  # Primeiros 5 n\u00fameros\nprint(primeiros)  # [1, 2, 3, 4, 5]\n\n# Pulando elementos\nletras = \"ABCDEFGHIJ\"\nselecionadas = list(itertools.islice(letras, 1, 8, 2))  # In\u00edcio, fim, passo\nprint(selecionadas)  # ['B', 'D', 'F', 'H']\n\n# filterfalse: filtra elementos que N\u00c3O satisfazem o predicado\nnumeros = range(10)\nimpares = list(itertools.filterfalse(lambda x: x % 2 == 0, numeros))\nprint(impares)  # [1, 3, 5, 7, 9]\n\n# dropwhile e takewhile: descarta/pega elementos enquanto a condi\u00e7\u00e3o for True\nvalores = [1, 3, 5, 8, 7, 9, 2, 4]\n\n# Descarta enquanto for \u00edmpar, depois pega todos\nresultado1 = list(itertools.dropwhile(lambda x: x % 2 == 1, valores))\nprint(resultado1)  # [8, 7, 9, 2, 4]\n\n# Pega enquanto for menor que 7, depois descarta todos\nresultado2 = list(itertools.takewhile(lambda x: x &lt; 7, valores))\nprint(resultado2)  # [1, 3, 5]\n</code></pre> <pre><code>import itertools\n\n# count: conta a partir de um n\u00famero (parecido com range, mas infinito)\ncontador = itertools.count(10, 2)  # Come\u00e7a em 10, incrementa de 2 em 2\nprint(list(itertools.islice(contador, 5)))  # [10, 12, 14, 16, 18]\n\n# cycle: cicla por um iter\u00e1vel indefinidamente\nciclico = itertools.cycle(['A', 'B', 'C'])\nprint([next(ciclico) for _ in range(7)])  # ['A', 'B', 'C', 'A', 'B', 'C', 'A']\n\n# repeat: repete um elemento n vezes (ou infinitamente)\nrepetido = itertools.repeat('X', 5)\nprint(list(repetido))  # ['X', 'X', 'X', 'X', 'X']\n</code></pre> <pre><code>import itertools\n\n# chain: concatena iter\u00e1veis\nletras = ['A', 'B', 'C']\nnumeros = [1, 2, 3]\ncombinados = list(itertools.chain(letras, numeros))\nprint(combinados)  # ['A', 'B', 'C', 1, 2, 3]\n\n# zip_longest: como zip, mas continua at\u00e9 o iter\u00e1vel mais longo terminar\nnomes = ['Ana', 'Carlos', 'Maria', 'Pedro']\nidades = [25, 30, 22]\n\n# O zip normal para no iter\u00e1vel mais curto\nprint(list(zip(nomes, idades)))  # [('Ana', 25), ('Carlos', 30), ('Maria', 22)]\n\n# zip_longest usa o valor fillvalue para os elementos faltantes\nresultado = list(itertools.zip_longest(nomes, idades, fillvalue='Desconhecido'))\nprint(resultado)  # [('Ana', 25), ('Carlos', 30), ('Maria', 22), ('Pedro', 'Desconhecido')]\n\n# groupby: agrupa elementos consecutivos por uma chave\nanimais = ['cachorro', 'gato', 'coelho', 'cobra', 'camelo', 'galinha']\n\n# Agrupando por primeira letra\nanimais_ordenados = sorted(animais, key=lambda x: x[0])  # Importante ordenar primeiro!\nfor letra, grupo in itertools.groupby(animais_ordenados, key=lambda x: x[0]):\n    print(f\"Animais com {letra}: {list(grupo)}\")\n# Animais com c: ['cachorro', 'camelo', 'cobra', 'coelho']\n# Animais com g: ['galinha']\n# Animais com g: ['gato']\n</code></pre>"},{"location":"trilhas/python/page-11/#aplicacoes-praticas","title":"Aplica\u00e7\u00f5es Pr\u00e1ticas","text":"Processamento de Arquivos GrandesPipeline de Processamento de DadosSimula\u00e7\u00f5es e Modelagem <pre><code>def processar_arquivo_grande(nome_arquivo, tamanho_bloco=4096):\n    \"\"\"L\u00ea um arquivo grande em blocos para economizar mem\u00f3ria.\"\"\"\n    with open(nome_arquivo, 'r', encoding='utf-8') as arquivo:\n        while True:\n            bloco = arquivo.read(tamanho_bloco)\n            if not bloco:\n                break\n            yield bloco\n\n# Conta linha em um arquivo muito grande\ndef contar_linhas(nome_arquivo):\n    total = sum(bloco.count('\\n') for bloco in processar_arquivo_grande(nome_arquivo))\n    return total + 1  # +1 se o arquivo n\u00e3o terminar com quebra de linha\n\n# Procura texto em um arquivo grande\ndef procurar_texto(nome_arquivo, texto):\n    \"\"\"Encontra todas as ocorr\u00eancias de um texto em um arquivo grande.\"\"\"\n    for i, bloco in enumerate(processar_arquivo_grande(nome_arquivo)):\n        posicoes = [j for j in range(len(bloco)) if bloco.startswith(texto, j)]\n        for pos in posicoes:\n            posicao_absoluta = i * 4096 + pos\n            yield posicao_absoluta\n</code></pre> <pre><code># Pipeline para an\u00e1lise de logs\nimport re\n\ndef ler_arquivo_log(nome_arquivo):\n    \"\"\"Gerador que l\u00ea um arquivo de log linha por linha.\"\"\"\n    with open(nome_arquivo, 'r') as arquivo:\n        for linha in arquivo:\n            yield linha.strip()\n\ndef filtrar_erros(linhas):\n    \"\"\"Filtra apenas linhas com erros.\"\"\"\n    for linha in linhas:\n        if \"ERROR\" in linha:\n            yield linha\n\ndef extrair_codigo_erro(linhas_erro):\n    \"\"\"Extrai o c\u00f3digo de erro de cada linha.\"\"\"\n    padrao = r\"ERROR (\\d+):\"\n    for linha in linhas_erro:\n        match = re.search(padrao, linha)\n        if match:\n            yield int(match.group(1))\n\ndef contar_erros(codigos_erro):\n    \"\"\"Conta a frequ\u00eancia de cada c\u00f3digo de erro.\"\"\"\n    contagem = {}\n    for codigo in codigos_erro:\n        contagem[codigo] = contagem.get(codigo, 0) + 1\n    return contagem\n\n# Uso do pipeline\ndef analisar_erros_log(nome_arquivo):\n    linhas = ler_arquivo_log(nome_arquivo)\n    linhas_erro = filtrar_erros(linhas)\n    codigos = extrair_codigo_erro(linhas_erro)\n    return contar_erros(codigos)\n\n# Resultado: {404: 23, 500: 12, 403: 5}\n</code></pre> <pre><code>import random\n\ndef simulacao_clima(dias):\n    \"\"\"Simula o clima por um n\u00famero espec\u00edfico de dias.\"\"\"\n    # Estados poss\u00edveis: ensolarado, nublado, chuvoso\n    estado_atual = random.choice([\"ensolarado\", \"nublado\", \"chuvoso\"])\n\n    # Probabilidades de transi\u00e7\u00e3o (simplificadas)\n    transicoes = {\n        \"ensolarado\": {\"ensolarado\": 0.7, \"nublado\": 0.3, \"chuvoso\": 0.0},\n        \"nublado\": {\"ensolarado\": 0.3, \"nublado\": 0.4, \"chuvoso\": 0.3},\n        \"chuvoso\": {\"ensolarado\": 0.1, \"nublado\": 0.4, \"chuvoso\": 0.5}\n    }\n\n    for _ in range(dias):\n        yield estado_atual\n\n        # Determina o pr\u00f3ximo estado\n        probabilidades = transicoes[estado_atual]\n        estados = list(probabilidades.keys())\n        chances = list(probabilidades.values())\n        estado_atual = random.choices(estados, weights=chances)[0]\n\n# Simulando 10 dias\nprevisao = list(simulacao_clima(10))\nprint(f\"Previs\u00e3o para 10 dias: {previsao}\")\n\n# An\u00e1lise da simula\u00e7\u00e3o\ncontagem = {}\nfor clima in previsao:\n    contagem[clima] = contagem.get(clima, 0) + 1\n\nprint(\"Distribui\u00e7\u00e3o do clima:\")\nfor clima, dias in contagem.items():\n    print(f\"{clima}: {dias} dias ({dias/10*100:.1f}%)\")\n</code></pre>"},{"location":"trilhas/python/page-11/#boas-praticas-e-padroes","title":"Boas Pr\u00e1ticas e Padr\u00f5es","text":"Quando Usar GeradoresIteradores vs. GeradoresPatterns de Itera\u00e7\u00e3o <pre><code># Use geradores quando:\n\n# 1. Processando grandes volumes de dados\n# Ruim: n\u00fameros grandes demais para mem\u00f3ria\n# numeros_grandes = [n for n in range(10**10) if n % 42 == 0]\n\n# Bom: processa sob demanda\nnumeros_grandes = (n for n in range(10**10) if n % 42 == 0)\n\n# 2. Trabalhando com dados infinitos\ndef todos_os_numeros():\n    n = 0\n    while True:\n        yield n\n        n += 1\n\n# 3. Criando pipelines de processamento\ndef ler_dados(arquivo):\n    with open(arquivo) as f:\n        for linha in f:\n            yield linha.strip()\n\ndef filtrar_dados(linhas, filtro):\n    for linha in linhas:\n        if filtro in linha:\n            yield linha\n\ndef processar(linhas):\n    for linha in linhas:\n        yield linha.upper()\n\n# Uso: pipeline de processamento\ndados = ler_dados(\"dados.txt\")\nfiltrados = filtrar_dados(dados, \"importante\")\nresultado = processar(filtrados)\n</code></pre> <pre><code># Iteradores (classes) s\u00e3o ideais quando:\n# - Precisa de mais controle sobre o estado\n# - A l\u00f3gica \u00e9 complexa\n# - Precisa de v\u00e1rios m\u00e9todos auxiliares\n\n# Geradores (fun\u00e7\u00f5es) s\u00e3o ideais quando:\n# - A l\u00f3gica \u00e9 mais simples e linear\n# - Quer minimizar o c\u00f3digo boilerplate\n# - N\u00e3o precisa manter muito estado\n\n# Compare as duas implementa\u00e7\u00f5es:\n\n# 1. Com classe iterador\nclass Quadrados:\n    def __init__(self, n):\n        self.n = n\n        self.i = 0\n\n    def __iter__(self):\n        self.i = 0\n        return self\n\n    def __next__(self):\n        if self.i &gt;= self.n:\n            raise StopIteration\n        resultado = self.i ** 2\n        self.i += 1\n        return resultado\n\n# 2. Com gerador\ndef quadrados(n):\n    for i in range(n):\n        yield i ** 2\n\n# Ambos t\u00eam o mesmo resultado:\nprint(list(Quadrados(5)))   # [0, 1, 4, 9, 16]\nprint(list(quadrados(5)))   # [0, 1, 4, 9, 16]\n</code></pre> <pre><code># 1. Consumindo iter\u00e1veis par a par\ndados = [1, 2, 3, 4, 5, 6]\npares = zip(dados[::2], dados[1::2])  # [(1, 2), (3, 4), (5, 6)]\n\n# 2. Consumindo iter\u00e1veis com janela deslizante\ndef janela_deslizante(iterable, n=2):\n    \"\"\"Retorna uma janela deslizante de largura n sobre os dados.\"\"\"\n    iteraveis = [iter(iterable)] * n\n    return zip(*iteraveis)\n\n# Exemplo: m\u00e9dias m\u00f3veis\ndados = [1, 3, 5, 8, 11, 14, 16]\njanelas = list(janela_deslizante(dados, 3))\nprint(janelas)  # [(1, 3, 5), (8, 11, 14)]\n\n# Para janelas sobrepostas, use itertools.islice\nfrom itertools import islice\n\ndef janela_sobreposta(iterable, n=3):\n    \"\"\"Cria janelas sobrepostas de tamanho n.\"\"\"\n    it = iter(iterable)\n    window = list(islice(it, n))\n    yield tuple(window)\n\n    for item in it:\n        window = window[1:] + [item]\n        yield tuple(window)\n\n# Exemplo: m\u00e9dias m\u00f3veis com janelas sobrepostas\nsobrepostas = list(janela_sobreposta(dados, 3))\nprint(sobrepostas)  # [(1, 3, 5), (3, 5, 8), (5, 8, 11), (8, 11, 14), (11, 14, 16)]\n\n# 3. Agrupando dados (semelhante a GROUP BY em SQL)\nfrom itertools import groupby\n\n# Dados ordenados por categoria\ndados = [\n    (\"fruta\", \"ma\u00e7\u00e3\"),\n    (\"fruta\", \"banana\"),\n    (\"legume\", \"cenoura\"),\n    (\"legume\", \"batata\"),\n    (\"fruta\", \"uva\")\n]\n\n# Agrupa por categoria\ndados_ordenados = sorted(dados, key=lambda x: x[0])\n\nfor categoria, itens in groupby(dados_ordenados, key=lambda x: x[0]):\n    print(f\"{categoria}: {list(item[1] for item in itens)}\")\n# fruta: ['ma\u00e7\u00e3', 'banana', 'uva']\n# legume: ['cenoura', 'batata']\n</code></pre>"},{"location":"trilhas/python/page-11/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Protocolo de itera\u00e7\u00e3o do Python e como ele funciona nos bastidores</li> <li>A diferen\u00e7a entre iter\u00e1veis e iteradores</li> <li>Como criar iteradores personalizados implementando <code>__iter__</code> e <code>__next__</code></li> <li>Geradores como forma simplificada de criar iteradores</li> <li>Express\u00f5es geradoras como alternativas eficientes \u00e0s compreens\u00f5es de lista</li> <li>Ferramentas do m\u00f3dulo itertools para manipula\u00e7\u00e3o avan\u00e7ada de iteradores</li> <li>Aplica\u00e7\u00f5es pr\u00e1ticas de iteradores e geradores</li> <li>Boas pr\u00e1ticas e quando usar cada abordagem</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre iteradores</li> <li>Documenta\u00e7\u00e3o oficial sobre geradores</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo itertools</li> <li>PEP 255 - Express\u00f5es Geradoras</li> <li>PEP 289 - Express\u00f5es Geradoras</li> </ul>"},{"location":"trilhas/python/page-11/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos decoradores em Python, um poderoso mecanismo para modificar o comportamento de fun\u00e7\u00f5es e classes.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Manipula\u00e7\u00e3o de Arquivos</p>"},{"location":"trilhas/python/page-12/","title":"Aula 12: Decoradores","text":""},{"location":"trilhas/python/page-12/#decoradores","title":"Decoradores","text":""},{"location":"trilhas/python/page-12/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Decoradores s\u00e3o uma poderosa ferramenta em Python que permite modificar ou estender o comportamento de fun\u00e7\u00f5es e classes de forma limpa e reutiliz\u00e1vel. Eles seguem o padr\u00e3o de design Decorator, que permite adicionar funcionalidades a objetos sem modificar sua estrutura.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito de decoradores e sua import\u00e2ncia em Python</li> <li>Aprender a criar e aplicar decoradores b\u00e1sicos em fun\u00e7\u00f5es</li> <li>Compreender como funcionam decoradores com argumentos</li> <li>Explorar decoradores de classe e m\u00e9todos</li> <li>Conhecer decoradores comuns na biblioteca padr\u00e3o e frameworks</li> <li>Aplicar decoradores para resolver problemas pr\u00e1ticos</li> </ul>"},{"location":"trilhas/python/page-12/#conceitos-basicos-de-decoradores","title":"Conceitos B\u00e1sicos de Decoradores","text":"<p>Um decorador \u00e9 uma fun\u00e7\u00e3o que recebe outra fun\u00e7\u00e3o como entrada e retorna uma terceira fun\u00e7\u00e3o, geralmente estendendo a funcionalidade da fun\u00e7\u00e3o original sem modific\u00e1-la diretamente.</p> O Que S\u00e3o DecoradoresSintaxe com @Como Funciona <pre><code># Decoradores s\u00e3o fun\u00e7\u00f5es que envolvem outras fun\u00e7\u00f5es\n# Eles permitem modificar o comportamento de fun\u00e7\u00f5es sem alter\u00e1-las\n\n# Fun\u00e7\u00e3o que ser\u00e1 decorada\ndef saudacao(nome):\n    return f\"Ol\u00e1, {nome}!\"\n\n# Fun\u00e7\u00e3o decoradora\ndef fazer_educado(funcao):\n    # Esta fun\u00e7\u00e3o interna \u00e9 o \"wrapper\" (envolt\u00f3rio)\n    def wrapper(nome):\n        # Adiciona \"por favor\" e \"obrigado\"\n        print(\"Por favor...\")\n        resultado = funcao(nome)\n        print(\"Obrigado!\")\n        return resultado\n    # Retorna o wrapper, n\u00e3o o resultado da fun\u00e7\u00e3o\n    return wrapper\n\n# Aplicando o decorador manualmente\nsaudacao_educada = fazer_educado(saudacao)\n\n# Chamando a fun\u00e7\u00e3o decorada\nprint(saudacao_educada(\"Maria\"))\n# Sa\u00edda:\n# Por favor...\n# Obrigado!\n# Ol\u00e1, Maria!\n</code></pre> <pre><code># A sintaxe @ \u00e9 um a\u00e7\u00facar sint\u00e1tico para aplicar decoradores\n\n# Defini\u00e7\u00e3o do decorador\ndef fazer_educado(funcao):\n    def wrapper(nome):\n        print(\"Por favor...\")\n        resultado = funcao(nome)\n        print(\"Obrigado!\")\n        return resultado\n    return wrapper\n\n# Aplicando o decorador com a sintaxe @\n@fazer_educado\ndef saudacao(nome):\n    return f\"Ol\u00e1, {nome}!\"\n\n# Quando usamos @fazer_educado, \u00e9 o mesmo que:\n# saudacao = fazer_educado(saudacao)\n\n# Chamando a fun\u00e7\u00e3o decorada\nprint(saudacao(\"Jo\u00e3o\"))\n# Sa\u00edda:\n# Por favor...\n# Obrigado!\n# Ol\u00e1, Jo\u00e3o!\n</code></pre> <pre><code># A magia dos decoradores est\u00e1 na avalia\u00e7\u00e3o em tempo de defini\u00e7\u00e3o\n\ndef meu_decorador(funcao):\n    print(f\"Decorando {funcao.__name__}\")\n\n    def wrapper(*args, **kwargs):\n        print(f\"Iniciando {funcao.__name__}\")\n        resultado = funcao(*args, **kwargs)\n        print(f\"Finalizando {funcao.__name__}\")\n        return resultado\n\n    print(\"Decorador pronto!\")\n    return wrapper\n\nprint(\"Definindo fun\u00e7\u00e3o...\")\n\n@meu_decorador\ndef minha_funcao(x, y):\n    print(f\"Executando com {x} e {y}\")\n    return x + y\n\nprint(\"Fun\u00e7\u00e3o definida!\")\n\nresultado = minha_funcao(5, 3)\nprint(f\"Resultado: {resultado}\")\n\n# Sa\u00edda:\n# Definindo fun\u00e7\u00e3o...\n# Decorando minha_funcao\n# Decorador pronto!\n# Fun\u00e7\u00e3o definida!\n# Iniciando minha_funcao\n# Executando com 5 e 3\n# Finalizando minha_funcao\n# Resultado: 8\n</code></pre>"},{"location":"trilhas/python/page-12/#decoradores-com-functoolswraps","title":"Decoradores com functools.wraps","text":"<p>Quando criamos decoradores, a fun\u00e7\u00e3o original perde seus metadados (nome, docstring, etc.). O <code>functools.wraps</code> resolve esse problema.</p> Problema de MetadadosSolu\u00e7\u00e3o com wraps <pre><code>def meu_decorador(funcao):\n    def wrapper(*args, **kwargs):\n        \"\"\"Fun\u00e7\u00e3o wrapper interna\"\"\"\n        print(\"Antes\")\n        resultado = funcao(*args, **kwargs)\n        print(\"Depois\")\n        return resultado\n    return wrapper\n\n@meu_decorador\ndef soma(a, b):\n    \"\"\"Soma dois n\u00fameros.\"\"\"\n    return a + b\n\n# Verificando o nome e docstring da fun\u00e7\u00e3o decorada\nprint(f\"Nome: {soma.__name__}\")  # Nome: wrapper\nprint(f\"Docstring: {soma.__doc__}\")  # Docstring: Fun\u00e7\u00e3o wrapper interna\n\n# Isso \u00e9 um problema quando usamos ferramentas de documenta\u00e7\u00e3o\n# ou depura\u00e7\u00e3o que dependem desses metadados\n</code></pre> <pre><code>from functools import wraps\n\ndef meu_decorador(funcao):\n    @wraps(funcao)  # Preserva os metadados da fun\u00e7\u00e3o original\n    def wrapper(*args, **kwargs):\n        \"\"\"Fun\u00e7\u00e3o wrapper interna\"\"\"\n        print(\"Antes\")\n        resultado = funcao(*args, **kwargs)\n        print(\"Depois\")\n        return resultado\n    return wrapper\n\n@meu_decorador\ndef soma(a, b):\n    \"\"\"Soma dois n\u00fameros.\"\"\"\n    return a + b\n\n# Agora os metadados s\u00e3o preservados\nprint(f\"Nome: {soma.__name__}\")  # Nome: soma\nprint(f\"Docstring: {soma.__doc__}\")  # Docstring: Soma dois n\u00fameros.\n</code></pre> <p>Pr\u00e1tica Recomendada</p> <p>Sempre use <code>@functools.wraps</code> ao criar decoradores para preservar os metadados da fun\u00e7\u00e3o original. Isso \u00e9 importante para depura\u00e7\u00e3o, documenta\u00e7\u00e3o e introspection do c\u00f3digo.</p>"},{"location":"trilhas/python/page-12/#decoradores-com-argumentos","title":"Decoradores com Argumentos","text":"<p>Decoradores tamb\u00e9m podem aceitar argumentos, o que aumenta sua flexibilidade.</p> Decorador com ArgumentosUsando Valores Padr\u00e3oDecorador Flex\u00edvel <pre><code>from functools import wraps\n\ndef repetir(vezes=1):\n    \"\"\"Decorador que repete a execu\u00e7\u00e3o da fun\u00e7\u00e3o decorada.\"\"\"\n    # Esta fun\u00e7\u00e3o externa captura os argumentos do decorador\n    def decorador(funcao):\n        # Esta fun\u00e7\u00e3o intermedi\u00e1ria \u00e9 o decorador real\n        @wraps(funcao)\n        def wrapper(*args, **kwargs):\n            # Esta fun\u00e7\u00e3o interna envolve a fun\u00e7\u00e3o original\n            resultado = None\n            for _ in range(vezes):\n                resultado = funcao(*args, **kwargs)\n            return resultado\n        return wrapper\n    return decorador\n\n# Usando o decorador com argumentos\n@repetir(vezes=3)\ndef saudacao(nome):\n    print(f\"Ol\u00e1, {nome}!\")\n    return nome\n\n# Chamando a fun\u00e7\u00e3o decorada\nsaudacao(\"Ana\")\n# Sa\u00edda:\n# Ol\u00e1, Ana!\n# Ol\u00e1, Ana!\n# Ol\u00e1, Ana!\n</code></pre> <pre><code>from functools import wraps\n\ndef registrar(prefixo=\"INFO\"):\n    \"\"\"Decorador que registra informa\u00e7\u00f5es sobre a chamada da fun\u00e7\u00e3o.\"\"\"\n    def decorador(funcao):\n        @wraps(funcao)\n        def wrapper(*args, **kwargs):\n            print(f\"[{prefixo}] Chamando {funcao.__name__}\")\n\n            argumentos = [str(arg) for arg in args]\n            kwargs_str = [f\"{k}={v}\" for k, v in kwargs.items()]\n            todos_args = argumentos + kwargs_str\n\n            print(f\"[{prefixo}] Argumentos: {', '.join(todos_args)}\")\n\n            resultado = funcao(*args, **kwargs)\n\n            print(f\"[{prefixo}] {funcao.__name__} retornou: {resultado}\")\n            return resultado\n        return wrapper\n    return decorador\n\n# Usando com valor padr\u00e3o\n@registrar()  # Observe os par\u00eanteses vazios\ndef soma(a, b):\n    return a + b\n\n# Usando com argumento personalizado\n@registrar(prefixo=\"DEBUG\")\ndef multiplica(a, b):\n    return a * b\n\nsoma(5, 3)\n# [INFO] Chamando soma\n# [INFO] Argumentos: 5, 3\n# [INFO] soma retornou: 8\n\nmultiplica(4, 2)\n# [DEBUG] Chamando multiplica\n# [DEBUG] Argumentos: 4, 2\n# [DEBUG] multiplica retornou: 8\n</code></pre> <pre><code>from functools import wraps\nimport time\n\ndef cronometrar(funcao=None, *, decimal_places=4):\n    \"\"\"\n    Decorador que mede o tempo de execu\u00e7\u00e3o de uma fun\u00e7\u00e3o.\n    Pode ser usado com ou sem argumentos.\n    \"\"\"\n    # Se chamado sem argumentos como @cronometrar\n    if funcao is not None:\n        @wraps(funcao)\n        def wrapper_simples(*args, **kwargs):\n            inicio = time.time()\n            resultado = funcao(*args, **kwargs)\n            fim = time.time()\n            print(f\"{funcao.__name__} levou {fim - inicio:.4f} segundos\")\n            return resultado\n        return wrapper_simples\n\n    # Se chamado com argumentos como @cronometrar(decimal_places=2)\n    else:\n        def decorador(func):\n            @wraps(func)\n            def wrapper(*args, **kwargs):\n                inicio = time.time()\n                resultado = func(*args, **kwargs)\n                fim = time.time()\n                print(f\"{func.__name__} levou {fim - inicio:.{decimal_places}f} segundos\")\n                return resultado\n            return wrapper\n        return decorador\n\n# Uso sem argumentos\n@cronometrar\ndef operacao_lenta():\n    time.sleep(0.5)\n\n# Uso com argumentos\n@cronometrar(decimal_places=2)\ndef outra_operacao():\n    time.sleep(0.3)\n\noperacao_lenta()      # operacao_lenta levou 0.5001 segundos\noutra_operacao()      # outra_operacao levou 0.30 segundos\n</code></pre>"},{"location":"trilhas/python/page-12/#decoradores-encadeados","title":"Decoradores Encadeados","text":"<p>\u00c9 poss\u00edvel aplicar v\u00e1rios decoradores a uma mesma fun\u00e7\u00e3o, cada um adicionando sua pr\u00f3pria funcionalidade.</p> M\u00faltiplos DecoradoresOrdem de Aplica\u00e7\u00e3o <pre><code>from functools import wraps\n\n# Decorador para registrar a chamada\ndef registrar(funcao):\n    @wraps(funcao)\n    def wrapper(*args, **kwargs):\n        print(f\"Chamando {funcao.__name__}\")\n        return funcao(*args, **kwargs)\n    return wrapper\n\n# Decorador para verificar argumentos\ndef validar_positivos(funcao):\n    @wraps(funcao)\n    def wrapper(*args, **kwargs):\n        for arg in args:\n            if isinstance(arg, (int, float)) e arg &lt; 0:\n                raise ValueError(\"Argumento negativo n\u00e3o permitido\")\n        return funcao(*args, **kwargs)\n    return wrapper\n\n# Aplicando m\u00faltiplos decoradores\n@registrar\n@validar_positivos\ndef calcular_raiz_quadrada(numero):\n    import math\n    return math.sqrt(numero)\n\n# A ordem \u00e9 importante! \u00c9 aplicada de baixo para cima\n# Primeiro validar_positivos, depois registrar\n\ntry:\n    resultado = calcular_raiz_quadrada(16)\n    print(f\"Resultado: {resultado}\")\n\n    resultado = calcular_raiz_quadrada(-4)\n    print(f\"Resultado: {resultado}\")\nexcept ValueError as e:\n    print(f\"Erro: {e}\")\n\n# Sa\u00edda:\n# Chamando calcular_raiz_quadrada\n# Resultado: 4.0\n# Chamando calcular_raiz_quadrada\n# Erro: Argumento negativo n\u00e3o permitido\n</code></pre> <pre><code>def decorador1(funcao):\n    def wrapper(*args, **kwargs):\n        print(\"Decorador 1 - In\u00edcio\")\n        resultado = funcao(*args, **kwargs)\n        print(\"Decorador 1 - Fim\")\n        return resultado\n    return wrapper\n\ndef decorador2(funcao):\n    def wrapper(*args, **kwargs):\n        print(\"Decorador 2 - In\u00edcio\")\n        resultado = funcao(*args, **kwargs)\n        print(\"Decorador 2 - Fim\")\n        return resultado\n    return wrapper\n\ndef decorador3(funcao):\n    def wrapper(*args, **kwargs):\n        print(\"Decorador 3 - In\u00edcio\")\n        resultado = funcao(*args, **kwargs)\n        print(\"Decorador 3 - Fim\")\n        return resultado\n    return wrapper\n\n# Os decoradores s\u00e3o aplicados de baixo para cima\n@decorador1\n@decorador2\n@decorador3\ndef minha_funcao():\n    print(\"Executando a fun\u00e7\u00e3o principal\")\n\nminha_funcao()\n# Sa\u00edda:\n# Decorador 1 - In\u00edcio\n# Decorador 2 - In\u00edcio\n# Decorador 3 - In\u00edcio\n# Executando a fun\u00e7\u00e3o principal\n# Decorador 3 - Fim\n# Decorador 2 - Fim\n# Decorador 1 - Fim\n</code></pre> <p>Ordem dos Decoradores</p> <p>A ordem em que os decoradores s\u00e3o aplicados \u00e9 importante. Os decoradores mais pr\u00f3ximos da fun\u00e7\u00e3o s\u00e3o aplicados primeiro, e depois os mais externos. \u00c9 como vestir camadas de roupas: a primeira camada fica mais pr\u00f3xima do corpo.</p>"},{"location":"trilhas/python/page-12/#decoradores-de-classe","title":"Decoradores de Classe","text":"<p>Os decoradores n\u00e3o est\u00e3o limitados a fun\u00e7\u00f5es; eles tamb\u00e9m podem ser aplicados a classes.</p> Decorando ClassesClasses como DecoradoresDecoradores para M\u00e9todos <pre><code>def adicionar_saudacao(classe):\n    \"\"\"Decorador que adiciona um m\u00e9todo de sauda\u00e7\u00e3o \u00e0 classe.\"\"\"\n    def saudacao(self, nome):\n        return f\"{self.__class__.__name__} diz: Ol\u00e1, {nome}!\"\n\n    # Adicionando o m\u00e9todo \u00e0 classe\n    classe.saudacao = saudacao\n    return classe\n\n# Aplicando o decorador \u00e0 classe\n@adicionar_saudacao\nclass Pessoa:\n    def __init__(self, nome):\n        self.nome = nome\n\n    def apresentar(self):\n        return f\"Eu sou {self.nome}\"\n\n# Usando a classe decorada\npessoa = Pessoa(\"Carlos\")\nprint(pessoa.apresentar())  # Eu sou Carlos\nprint(pessoa.saudacao(\"Maria\"))  # Pessoa diz: Ol\u00e1, Maria!\n</code></pre> <pre><code>class Contador:\n    \"\"\"Uma classe que serve como decorador para contar chamadas de fun\u00e7\u00e3o.\"\"\"\n\n    def __init__(self, funcao):\n        self.funcao = funcao\n        self.contagem = 0\n        # Copiando os metadados da fun\u00e7\u00e3o original\n        self.__name__ = funcao.__name__\n        self.__doc__ = funcao.__doc__\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"M\u00e9todo chamado quando o objeto \u00e9 usado como uma fun\u00e7\u00e3o.\"\"\"\n        self.contagem += 1\n        print(f\"{self.funcao.__name__} foi chamada {self.contagem} vezes\")\n        return self.funcao(*args, **kwargs)\n\n# Usando a classe como decorador\n@Contador\ndef minha_funcao(x, y):\n    \"\"\"Uma fun\u00e7\u00e3o simples que soma dois n\u00fameros.\"\"\"\n    return x + y\n\n# Cada vez que chamamos a fun\u00e7\u00e3o, o contador \u00e9 incrementado\nprint(minha_funcao(1, 2))  # minha_funcao foi chamada 1 vezes, 3\nprint(minha_funcao(3, 4))  # minha_funcao foi chamada 2 vezes, 7\nprint(minha_funcao(5, 6))  # minha_funcao foi chamada 3 vezes, 11\n</code></pre> <pre><code>from functools import wraps\n\ndef registrar_metodo(metodo):\n    \"\"\"Decorador para registrar chamadas de m\u00e9todos.\"\"\"\n    @wraps(metodo)\n    def wrapper(self, *args, **kwargs):\n        print(f\"Chamando {metodo.__name__} para {self.__class__.__name__}\")\n        return metodo(self, *args, **kwargs)\n    return wrapper\n\nclass Calculadora:\n    @registrar_metodo\n    def somar(self, a, b):\n        return a + b\n\n    @registrar_metodo\n    def multiplicar(self, a, b):\n        return a * b\n\n# Usando os m\u00e9todos decorados\ncalc = Calculadora()\nprint(calc.somar(5, 3))  # Chamando somar para Calculadora, 8\nprint(calc.multiplicar(4, 2))  # Chamando multiplicar para Calculadora, 8\n</code></pre>"},{"location":"trilhas/python/page-12/#decoradores-especiais","title":"Decoradores Especiais","text":"<p>Python tem alguns decoradores especiais integrados e padr\u00f5es comuns para situa\u00e7\u00f5es espec\u00edficas.</p> M\u00e9todo de Classe e Est\u00e1ticoPropriedadesLRU Cache <pre><code>class Matematica:\n    valor = 10\n\n    def __init__(self, x):\n        self.x = x\n\n    # M\u00e9todo de inst\u00e2ncia (acessa self)\n    def dobrar(self):\n        return self.x * 2\n\n    # M\u00e9todo de classe (acessa a classe, n\u00e3o a inst\u00e2ncia)\n    @classmethod\n    def triplo_valor(cls):\n        return cls.valor * 3\n\n    # M\u00e9todo est\u00e1tico (n\u00e3o acessa nem a classe nem a inst\u00e2ncia)\n    @staticmethod\n    def quadrado(y):\n        return y * y\n\n# Usando m\u00e9todos de inst\u00e2ncia\nmat = Matematica(5)\nprint(mat.dobrar())  # 10 (dobro de 5)\n\n# Usando m\u00e9todo de classe\nprint(Matematica.triplo_valor())  # 30 (triplo de 10)\n\n# Usando m\u00e9todo est\u00e1tico\nprint(Matematica.quadrado(4))  # 16 (quadrado de 4)\nprint(mat.quadrado(4))  # 16 (tamb\u00e9m pode ser chamado pela inst\u00e2ncia)\n</code></pre> <pre><code>class Temperatura:\n    def __init__(self, celsius=0):\n        self._celsius = celsius\n\n    # Getter\n    @property\n    def celsius(self):\n        return self._celsius\n\n    # Setter\n    @celsius.setter\n    def celsius(self, valor):\n        if valor &lt; -273.15:\n            raise ValueError(\"Temperatura abaixo do zero absoluto!\")\n        self._celsius = valor\n\n    # Propriedade calculada\n    @property\n    def fahrenheit(self):\n        return self._celsius * 9/5 + 32\n\n    @fahrenheit.setter\n    def fahrenheit(self, valor):\n        self.celsius = (valor - 32) * 5/9\n\n    @property\n    def kelvin(self):\n        return self._celsius + 273.15\n\n    @kelvin.setter\n    def kelvin(self, valor):\n        self.celsius = valor - 273.15\n\n# Usando as propriedades\ntemp = Temperatura(25)\nprint(f\"Celsius: {temp.celsius}\")  # Celsius: 25\nprint(f\"Fahrenheit: {temp.fahrenheit}\")  # Fahrenheit: 77.0\nprint(f\"Kelvin: {temp.kelvin}\")  # Kelvin: 298.15\n\n# Alterando temperatura\ntemp.fahrenheit = 68\nprint(f\"Celsius: {temp.celsius}\")  # Celsius: 20.0\n\ntry:\n    temp.celsius = -300  # Abaixo do zero absoluto\nexcept ValueError as e:\n    print(f\"Erro: {e}\")  # Erro: Temperatura abaixo do zero absoluto!\n</code></pre> <pre><code>import time\nfrom functools import lru_cache\n\n# Fun\u00e7\u00e3o sem cache\ndef fibonacci_sem_cache(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci_sem_cache(n-1) + fibonacci_sem_cache(n-2)\n\n# Fun\u00e7\u00e3o com cache\n@lru_cache(maxsize=None)  # Cache ilimitado\ndef fibonacci_com_cache(n):\n    if n &lt;= 1:\n        return n\n    return fibonacci_com_cache(n-1) + fibonacci_com_cache(n-2)\n\n# Comparando desempenho\ndef testar_tempo(func, arg):\n    inicio = time.time()\n    resultado = func(arg)\n    fim = time.time()\n    print(f\"{func.__name__}({arg}) = {resultado}, tempo: {fim - inicio:.6f} segundos\")\n\n# Testando fun\u00e7\u00f5es\nn = 30\ntestar_tempo(fibonacci_sem_cache, n)  # Muito lento!\ntestar_tempo(fibonacci_com_cache, n)  # R\u00e1pido!\n\n# fibonacci_sem_cache(30) = 832040, tempo: 0.308167 segundos\n# fibonacci_com_cache(30) = 832040, tempo: 0.000026 segundos\n</code></pre>"},{"location":"trilhas/python/page-12/#casos-de-uso-comuns","title":"Casos de Uso Comuns","text":"Valida\u00e7\u00e3o de EntradaLog e Medi\u00e7\u00e3o de TempoRetry com BackoffInje\u00e7\u00e3o de Depend\u00eancia <pre><code>from functools import wraps\n\ndef validar_tipos(*tipos):\n    \"\"\"Verifica se os argumentos s\u00e3o dos tipos esperados.\"\"\"\n    def decorador(funcao):\n        @wraps(funcao)\n        def wrapper(*args, **kwargs):\n            # Verificando os argumentos posicionais\n            for i, (arg, tipo) in enumerate(zip(args, tipos)):\n                if not isinstance(arg, tipo):\n                    raise TypeError(\n                        f\"Argumento {i+1} deve ser {tipo.__name__}, \"\n                        f\"mas recebeu {type(arg).__name__}\"\n                    )\n            return funcao(*args, **kwargs)\n        return wrapper\n    return decorador\n\n@validar_tipos(int, int)\ndef soma(a, b):\n    return a + b\n\n@validar_tipos(str, int)\ndef repetir(texto, vezes):\n    return texto * vezes\n\n# Chamadas v\u00e1lidas\nprint(soma(5, 3))       # 8\nprint(repetir(\"abc\", 3))  # abcabcabc\n\n# Chamadas inv\u00e1lidas\ntry:\n    soma(\"5\", 3)\nexcept TypeError as e:\n    print(f\"Erro: {e}\")  # Erro: Argumento 1 deve ser int, mas recebeu str\n\ntry:\n    repetir(5, 3)\nexcept TypeError as e:\n    print(f\"Erro: {e}\")  # Erro: Argumento 1 deve ser str, mas recebeu int\n</code></pre> <pre><code>import time\nimport logging\nfrom functools import wraps\n\n# Configura\u00e7\u00e3o b\u00e1sica de logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\ndef log_tempo(funcao):\n    \"\"\"Registra o tempo de execu\u00e7\u00e3o de uma fun\u00e7\u00e3o.\"\"\"\n    @wraps(funcao)\n    def wrapper(*args, **kwargs):\n        args_repr = [repr(a) for a in args]\n        kwargs_repr = [f\"{k}={v!r}\" for k, v in kwargs.items()]\n        assinatura = \", \".join(args_repr + kwargs_repr)\n\n        logging.info(f\"Chamando {funcao.__name__}({assinatura})\")\n        inicio = time.time()\n\n        try:\n            resultado = funcao(*args, **kwargs)\n            return resultado\n        finally:\n            fim = time.time()\n            tempo_execucao = fim - inicio\n            logging.info(f\"{funcao.__name__} levou {tempo_execucao:.4f} segundos para executar\")\n\n    return wrapper\n\n@log_tempo\ndef operacao_pesada(tamanho, repeticoes=1):\n    \"\"\"Fun\u00e7\u00e3o que simula uma opera\u00e7\u00e3o pesada.\"\"\"\n    resultado = 0\n    for _ in range(repeticoes):\n        for i in range(tamanho):\n            resultado += i\n        time.sleep(0.01)  # Simula processamento\n    return resultado\n\n# Chamando a fun\u00e7\u00e3o decorada\nresultado = operacao_pesada(10000, repeticoes=2)\nprint(f\"Resultado: {resultado}\")\n\n# Logs gerados:\n# 2023-05-10 14:30:45,123 - INFO - Chamando operacao_pesada(10000, repeticoes=2)\n# 2023-05-10 14:30:45,369 - INFO - operacao_pesada levou 0.2461 segundos para executar\n</code></pre> <pre><code>import time\nimport random\nfrom functools import wraps\n\ndef retry(tentativas=3, delay_inicial=1, fator_backoff=2):\n    \"\"\"\n    Decorador que tenta executar a fun\u00e7\u00e3o v\u00e1rias vezes com backoff exponencial.\n\n    Args:\n        tentativas: N\u00famero m\u00e1ximo de tentativas\n        delay_inicial: Tempo inicial de espera (em segundos)\n        fator_backoff: Multiplicador para aumentar o tempo de espera\n    \"\"\"\n    def decorador(funcao):\n        @wraps(funcao)\n        def wrapper(*args, **kwargs):\n            delay = delay_inicial\n            ultima_excecao = None\n\n            for tentativa in range(1, tentativas + 1):\n                try:\n                    return funcao(*args, **kwargs)\n                except Exception as e:\n                    print(f\"Tentativa {tentativa}/{tentativas} falhou: {str(e)}\")\n                    ultima_excecao = e\n\n                    if tentativa &lt; tentativas:\n                        tempo_espera = delay * (0.5 + random.random())  # Jitter\n                        print(f\"Esperando {tempo_espera:.2f} segundos antes da pr\u00f3xima tentativa\")\n                        time.sleep(tempo_espera)\n                        delay *= fator_backoff\n\n            # Se chegou aqui, todas as tentativas falharam\n            raise ultima_excecao\n\n        return wrapper\n    return decorador\n\n# Simulando uma fun\u00e7\u00e3o inst\u00e1vel\n@retry(tentativas=4, delay_inicial=0.5, fator_backoff=2)\ndef operacao_instavel(chance_falha=0.7):\n    \"\"\"Simula uma opera\u00e7\u00e3o que falha aleatoriamente.\"\"\"\n    if random.random() &lt; chance_falha:\n        raise ConnectionError(\"Falha na conex\u00e3o\")\n    return \"Opera\u00e7\u00e3o bem-sucedida\"\n\n# Testando a fun\u00e7\u00e3o\ntry:\n    resultado = operacao_instavel()\n    print(resultado)\nexcept ConnectionError as e:\n    print(f\"Falha final: {e}\")\n</code></pre> <pre><code>from functools import wraps\n\ndef injetar(**dependencias):\n    \"\"\"\n    Injeta depend\u00eancias como argumentos nomeados em uma fun\u00e7\u00e3o.\n\n    Exemplo:\n        @injetar(db=obter_conexao_db, logger=obter_logger)\n        def minha_funcao(x, y, db=None, logger=None):\n            ...\n    \"\"\"\n    def decorador(funcao):\n        @wraps(funcao)\n        def wrapper(*args, **kwargs):\n            # Para cada depend\u00eancia especificada\n            for nome, provedor in dependencias.items():\n                # Se o argumento n\u00e3o foi fornecido explicitamente\n                if nome not in kwargs:\n                    # Injeta o valor resolvido da depend\u00eancia\n                    kwargs[nome] = provedor() if callable(provedor) else provedor\n            return funcao(*args, **kwargs)\n        return wrapper\n    return decorador\n\n# Simulando provedores de depend\u00eancia\ndef obter_logger():\n    class Logger:\n        def info(self, msg): print(f\"INFO: {msg}\")\n        def error(self, msg): print(f\"ERROR: {msg}\")\n    return Logger()\n\ndef obter_config():\n    return {\"timeout\": 30, \"retry\": True}\n\n# Usando o decorador\n@injetar(logger=obter_logger, config=obter_config)\ndef processar_dados(dados, logger=None, config=None):\n    \"\"\"Processa dados usando as depend\u00eancias injetadas.\"\"\"\n    logger.info(f\"Processando {len(dados)} itens\")\n    timeout = config.get(\"timeout\", 10)\n    logger.info(f\"Timeout configurado: {timeout}\")\n    # ... l\u00f3gica de processamento ...\n    return len(dados)\n\n# Chamando a fun\u00e7\u00e3o sem fornecer as depend\u00eancias\nresultado = processar_dados([1, 2, 3, 4, 5])\nprint(f\"Resultado: {resultado}\")\n\n# Chamando e substituindo uma depend\u00eancia\nclass MeuLogger:\n    def info(self, msg): print(f\"&gt;&gt; {msg}\")\n    def error(self, msg): print(f\"!! {msg}\")\n\nresultado = processar_dados([1, 2, 3], logger=MeuLogger())\n</code></pre>"},{"location":"trilhas/python/page-12/#decoradores-em-frameworks-e-bibliotecas","title":"Decoradores em Frameworks e Bibliotecas","text":"<p>Os decoradores s\u00e3o amplamente utilizados em frameworks e bibliotecas Python.</p> Flask (Web Framework)Django (Web Framework)Pytest (Framework de Teste)Click (CLI) <pre><code># Em Flask, decoradores s\u00e3o usados para definir rotas\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'P\u00e1gina inicial'\n\n@app.route('/usuario/&lt;nome&gt;')\ndef perfil(nome):\n    return f'Perfil de {nome}'\n\n@app.route('/api/dados', methods=['GET', 'POST'])\ndef api_dados():\n    return {'status': 'sucesso'}\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <pre><code># Em Django, decoradores s\u00e3o usados para muitas coisas\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.http import require_http_methods\n\n# Requer autentica\u00e7\u00e3o\n@login_required\ndef perfil(request):\n    return render(request, 'perfil.html')\n\n# Restringe m\u00e9todos HTTP\n@require_http_methods([\"GET\", \"POST\"])\ndef contato(request):\n    if request.method == \"POST\":\n        # Processa o formul\u00e1rio\n        return render(request, 'obrigado.html')\n    return render(request, 'contato.html')\n</code></pre> <pre><code># Pytest usa decoradores para marcar testes\nimport pytest\n\n# Marca este teste para pular\n@pytest.mark.skip(reason=\"Funcionalidade ainda n\u00e3o implementada\")\ndef test_futura_funcionalidade():\n    assert False\n\n# Marca que este teste deve falhar\n@pytest.mark.xfail\ndef test_bug_conhecido():\n    assert 1 == 2\n\n# Parametriza\u00e7\u00e3o de testes\n@pytest.mark.parametrize(\"entrada,esperado\", [\n    (1, 1),\n    (2, 4),\n    (3, 9),\n    (4, 16),\n])\ndef test_quadrado(entrada, esperado):\n    assert entrada ** 2 == esperado\n</code></pre> <pre><code># Click usa decoradores para criar interfaces de linha de comando\nimport click\n\n@click.group()\ndef cli():\n    \"\"\"Ferramenta de linha de comando de exemplo.\"\"\"\n    pass\n\n@cli.command()\n@click.argument('nome')\n@click.option('--saudacao', '-s', default='Ol\u00e1')\ndef cumprimentar(nome, saudacao):\n    \"\"\"Cumprimenta algu\u00e9m.\"\"\"\n    click.echo(f\"{saudacao}, {nome}!\")\n\n@cli.command()\n@click.argument('x', type=int)\n@click.argument('y', type=int)\ndef somar(x, y):\n    \"\"\"Soma dois n\u00fameros.\"\"\"\n    resultado = x + y\n    click.echo(f\"{x} + {y} = {resultado}\")\n\nif __name__ == '__main__':\n    cli()\n</code></pre>"},{"location":"trilhas/python/page-12/#boas-praticas-com-decoradores","title":"Boas Pr\u00e1ticas com Decoradores","text":"Design e ReusabilidadeTratamento de ErrosDocumenta\u00e7\u00e3o Efetiva <pre><code># Boas pr\u00e1ticas para decoradores\n\n# 1. Sempre use functools.wraps\nfrom functools import wraps\n\ndef meu_decorador(funcao):\n    @wraps(funcao)  # Preserva os metadados\n    def wrapper(*args, **kwargs):\n        return funcao(*args, **kwargs)\n    return wrapper\n\n# 2. Aceite *args e **kwargs para maior flexibilidade\ndef decorador_flexivel(funcao):\n    @wraps(funcao)\n    def wrapper(*args, **kwargs):  # Aceita qualquer argumento\n        return funcao(*args, **kwargs)\n    return wrapper\n\n# 3. Fa\u00e7a decoradores combinados para evitar repeti\u00e7\u00e3o\ndef combinar_decoradores(*decoradores):\n    def decorador_combinado(funcao):\n        for decorador in reversed(decoradores):  # Aplica na ordem correta\n            funcao = decorador(funcao)\n        return funcao\n    return decorador_combinado\n\n# Uso:\n@combinar_decoradores(decorador1, decorador2, decorador3)\ndef minha_funcao():\n    pass\n</code></pre> <pre><code>from functools import wraps\n\ndef decorador_seguro(funcao):\n    \"\"\"Decorador que captura exce\u00e7\u00f5es e fornece feedback \u00fatil.\"\"\"\n    @wraps(funcao)\n    def wrapper(*args, **kwargs):\n        try:\n            return funcao(*args, **kwargs)\n        except Exception as e:\n            print(f\"Erro ao executar {funcao.__name__}: {e}\")\n            # Decide se relan\u00e7a a exce\u00e7\u00e3o ou retorna um valor padr\u00e3o\n            # Aqui decidimos relan\u00e7ar\n            raise\n    return wrapper\n\n@decorador_seguro\ndef divisao(a, b):\n    return a / b\n\n# Teste\ntry:\n    resultado = divisao(10, 0)\nexcept ZeroDivisionError:\n    print(\"Capturei a exce\u00e7\u00e3o relan\u00e7ada\")\n</code></pre> <pre><code>def registrar(funcao):\n    \"\"\"\n    Decorador que registra chamadas de fun\u00e7\u00e3o.\n\n    Args:\n        funcao: A fun\u00e7\u00e3o a ser decorada.\n\n    Returns:\n        Uma fun\u00e7\u00e3o wrapper que registra a chamada e executa a fun\u00e7\u00e3o original.\n\n    Exemplo:\n        @registrar\n        def minha_funcao(x, y):\n            return x + y\n    \"\"\"\n    @wraps(funcao)\n    def wrapper(*args, **kwargs):\n        \"\"\"\n        Wrapper que registra a chamada da fun\u00e7\u00e3o decorada.\n\n        Args:\n            *args: Argumentos posicionais para a fun\u00e7\u00e3o original.\n            **kwargs: Argumentos nomeados para a fun\u00e7\u00e3o original.\n\n        Returns:\n            O resultado da fun\u00e7\u00e3o original.\n        \"\"\"\n        print(f\"Chamando {funcao.__name__} com {args} e {kwargs}\")\n        return funcao(*args, **kwargs)\n    return wrapper\n\n# A documenta\u00e7\u00e3o tanto do decorador quanto do wrapper fica dispon\u00edvel\nhelp(registrar)\n\n@registrar\ndef soma(a, b):\n    \"\"\"Soma dois n\u00fameros.\"\"\"\n    return a + b\n\n# A documenta\u00e7\u00e3o original da fun\u00e7\u00e3o \u00e9 preservada gra\u00e7as ao @wraps\nhelp(soma)\n</code></pre>"},{"location":"trilhas/python/page-12/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Conceitos b\u00e1sicos de decoradores em Python</li> <li>Como criar e aplicar decoradores em fun\u00e7\u00f5es</li> <li>A import\u00e2ncia do functools.wraps para preservar metadados</li> <li>Como implementar decoradores com argumentos</li> <li>Encadeamento de m\u00faltiplos decoradores</li> <li>Decoradores de classe e classes como decoradores</li> <li>Decoradores especiais como <code>@property</code>, <code>@classmethod</code> e <code>@lru_cache</code></li> <li>Casos de uso comuns para decoradores</li> <li>Como decoradores s\u00e3o usados em frameworks populares</li> <li>Boas pr\u00e1ticas para criar e usar decoradores</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre decoradores</li> <li>PEP 318 - Decoradores para Fun\u00e7\u00f5es e M\u00e9todos</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo functools</li> <li>Real Python: Decoradores em Python</li> </ul>"},{"location":"trilhas/python/page-12/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos Programa\u00e7\u00e3o Orientada a Objetos em Python, um paradigma fundamental para organizar c\u00f3digo em aplica\u00e7\u00f5es complexas.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Iteradores e Geradores</p>"},{"location":"trilhas/python/page-13/","title":"Programa\u00e7\u00e3o Orientada a Objetos em Python","text":""},{"location":"trilhas/python/page-13/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A Programa\u00e7\u00e3o Orientada a Objetos (POO) \u00e9 um paradigma de programa\u00e7\u00e3o baseado no conceito de \"objetos\", que podem conter dados na forma de atributos e c\u00f3digo na forma de m\u00e9todos. Em Python, tudo \u00e9 um objeto - at\u00e9 mesmo tipos b\u00e1sicos como inteiros e strings.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Compreender os fundamentos da Programa\u00e7\u00e3o Orientada a Objetos</li> <li>Aprender a criar e utilizar classes e objetos em Python</li> <li>Dominar os conceitos de atributos e m\u00e9todos de inst\u00e2ncia e de classe</li> <li>Entender o funcionamento de m\u00e9todos especiais (dunder methods)</li> <li>Aplicar encapsulamento, getters e setters</li> <li>Explorar a composi\u00e7\u00e3o de objetos</li> </ul>"},{"location":"trilhas/python/page-13/#conceitos-fundamentais-da-poo","title":"Conceitos Fundamentais da POO","text":"<p>A Programa\u00e7\u00e3o Orientada a Objetos se baseia em quatro pilares principais:</p> <ol> <li>Encapsulamento: agrupar dados e m\u00e9todos em uma \u00fanica unidade (objeto)</li> <li>Abstra\u00e7\u00e3o: expor apenas o necess\u00e1rio e esconder a implementa\u00e7\u00e3o</li> <li>Heran\u00e7a: criar novas classes a partir de classes existentes</li> <li>Polimorfismo: usar a mesma interface para diferentes tipos de objetos</li> </ol> Classes e ObjetosPar\u00e2metro selfVari\u00e1veis de ClasseM\u00e9todos de Classe e Est\u00e1ticos <pre><code># Uma classe \u00e9 um modelo para criar objetos\nclass Pessoa:\n    # O m\u00e9todo __init__ \u00e9 chamado quando um objeto \u00e9 criado\n    def __init__(self, nome, idade):\n        self.nome = nome  # Atributo de inst\u00e2ncia\n        self.idade = idade  # Atributo de inst\u00e2ncia\n\n    # M\u00e9todos definem comportamentos que os objetos podem ter\n    def apresentar(self):\n        return f\"Ol\u00e1, meu nome \u00e9 {self.nome} e tenho {self.idade} anos.\"\n\n    def fazer_aniversario(self):\n        self.idade += 1\n        return f\"Parab\u00e9ns! Agora {self.nome} tem {self.idade} anos.\"\n\n# Criando objetos (inst\u00e2ncias) da classe Pessoa\npessoa1 = Pessoa(\"Maria\", 30)\npessoa2 = Pessoa(\"Jo\u00e3o\", 25)\n\n# Chamando m\u00e9todos nos objetos\nprint(pessoa1.apresentar())  # Ol\u00e1, meu nome \u00e9 Maria e tenho 30 anos.\nprint(pessoa2.apresentar())  # Ol\u00e1, meu nome \u00e9 Jo\u00e3o e tenho 25 anos.\n\n# Acessando e modificando atributos\nprint(pessoa1.nome)  # Maria\npessoa1.nome = \"Maria Silva\"\nprint(pessoa1.apresentar())  # Ol\u00e1, meu nome \u00e9 Maria Silva e tenho 30 anos.\n\n# Chamando outro m\u00e9todo\nprint(pessoa1.fazer_aniversario())  # Parab\u00e9ns! Agora Maria Silva tem 31 anos.\n</code></pre> <pre><code>class Exemplo:\n    def __init__(self, valor):\n        # self se refere \u00e0 inst\u00e2ncia atual\n        self.valor = valor\n\n    def metodo_de_instancia(self, multiplicador):\n        # self permite acessar os atributos e outros m\u00e9todos da inst\u00e2ncia\n        return self.valor * multiplicador\n\n    def outro_metodo(self):\n        # Chamando outro m\u00e9todo da mesma classe usando self\n        return self.metodo_de_instancia(2)\n\n# Criando uma inst\u00e2ncia\nex = Exemplo(10)\n\n# Chamando m\u00e9todos\nprint(ex.metodo_de_instancia(3))  # 30\nprint(ex.outro_metodo())  # 20\n\n# O que acontece por baixo dos panos:\n# ex.metodo_de_instancia(3) \u00e9 equivalente a Exemplo.metodo_de_instancia(ex, 3)\nprint(Exemplo.metodo_de_instancia(ex, 3))  # 30\n</code></pre> <pre><code>class Contador:\n    # Vari\u00e1vel de classe - compartilhada por todas as inst\u00e2ncias\n    contagem = 0\n\n    def __init__(self, nome):\n        self.nome = nome  # Vari\u00e1vel de inst\u00e2ncia - \u00fanica para cada inst\u00e2ncia\n        # Incrementando a vari\u00e1vel de classe\n        Contador.contagem += 1\n\n    @classmethod\n    def mostrar_contagem(cls):\n        # cls \u00e9 uma refer\u00eancia \u00e0 classe\n        return f\"Existem {cls.contagem} contadores.\"\n\n# Criando inst\u00e2ncias\nc1 = Contador(\"Primeiro\")\nprint(Contador.mostrar_contagem())  # Existem 1 contadores.\n\nc2 = Contador(\"Segundo\")\nprint(Contador.mostrar_contagem())  # Existem 2 contadores.\n\n# Acessando a vari\u00e1vel de classe\nprint(Contador.contagem)  # 2\nprint(c1.contagem)  # 2 (acessa a mesma vari\u00e1vel)\nprint(c2.contagem)  # 2 (acessa a mesma vari\u00e1vel)\n\n# Cuidado com atribui\u00e7\u00f5es diretas em inst\u00e2ncias!\nc1.contagem = 10  # Isso cria uma vari\u00e1vel de inst\u00e2ncia com o mesmo nome\nprint(Contador.contagem)  # 2 (a vari\u00e1vel de classe n\u00e3o foi alterada)\nprint(c1.contagem)  # 10 (agora c1 tem sua pr\u00f3pria vari\u00e1vel contagem)\nprint(c2.contagem)  # 2 (ainda referencia a vari\u00e1vel de classe)\n</code></pre> <pre><code>class Utilidades:\n    valor_padrao = 100\n\n    def __init__(self, valor):\n        self.valor = valor\n\n    # M\u00e9todo de inst\u00e2ncia - recebe self\n    def metodo_instancia(self):\n        return f\"M\u00e9todo de inst\u00e2ncia: {self.valor}\"\n\n    # M\u00e9todo de classe - recebe cls\n    @classmethod\n    def metodo_classe(cls, fator):\n        # Pode acessar/modificar atributos da classe\n        return f\"M\u00e9todo de classe: {cls.valor_padrao * fator}\"\n\n    # M\u00e9todo est\u00e1tico - n\u00e3o recebe nem self nem cls\n    @staticmethod\n    def metodo_estatico(x, y):\n        # N\u00e3o pode acessar atributos de inst\u00e2ncia ou classe diretamente\n        return f\"M\u00e9todo est\u00e1tico: {x + y}\"\n\n# Usando m\u00e9todo de inst\u00e2ncia\nu = Utilidades(5)\nprint(u.metodo_instancia())  # M\u00e9todo de inst\u00e2ncia: 5\n\n# Usando m\u00e9todo de classe\nprint(Utilidades.metodo_classe(2))  # M\u00e9todo de classe: 200\nprint(u.metodo_classe(2))  # M\u00e9todo de classe: 200 (tamb\u00e9m pode ser chamado por inst\u00e2ncias)\n\n# Usando m\u00e9todo est\u00e1tico\nprint(Utilidades.metodo_estatico(10, 20))  # M\u00e9todo est\u00e1tico: 30\nprint(u.metodo_estatico(10, 20))  # M\u00e9todo est\u00e1tico: 30 (tamb\u00e9m pode ser chamado por inst\u00e2ncias)\n</code></pre>"},{"location":"trilhas/python/page-13/#metodos-especiais-dunder-methods","title":"M\u00e9todos Especiais (Dunder Methods)","text":"<p>Python oferece m\u00e9todos especiais (tamb\u00e9m chamados de \"dunder methods\" ou \"magic methods\") que permitem que classes definam comportamentos para opera\u00e7\u00f5es built-in.</p> Representa\u00e7\u00e3o de StringsOperadores Matem\u00e1ticosM\u00e9todos de ContainerM\u00e9todo Call <pre><code>class Produto:\n    def __init__(self, nome, preco):\n        self.nome = nome\n        self.preco = preco\n\n    # Chamado quando str(objeto) ou print(objeto)\n    def __str__(self):\n        return f\"{self.nome} - R${self.preco:.2f}\"\n\n    # Chamado quando repr(objeto) ou na interpreta\u00e7\u00e3o interativa\n    def __repr__(self):\n        return f\"Produto('{self.nome}', {self.preco})\"\n\n# Criando um produto\np = Produto(\"Laptop\", 3499.99)\n\n# __str__ \u00e9 usado quando convertemos para string ou imprimimos\nprint(p)  # Laptop - R$3499.99\n\n# __repr__ \u00e9 usado para representa\u00e7\u00e3o \"oficial\" (\u00fatil para debugging)\nprint(repr(p))  # Produto('Laptop', 3499.99)\n\n# Em uma lista, __repr__ \u00e9 usado por padr\u00e3o\nprodutos = [Produto(\"Mouse\", 29.99), Produto(\"Teclado\", 89.90)]\nprint(produtos)  # [Produto('Mouse', 29.99), Produto('Teclado', 89.9)]\n</code></pre> <pre><code>class Vetor2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    # Soma: v1 + v2\n    def __add__(self, outro):\n        return Vetor2D(self.x + outro.x, self.y + outro.y)\n\n    # Subtra\u00e7\u00e3o: v1 - v2\n    def __sub__(self, outro):\n        return Vetor2D(self.x - outro.x, self.y - outro.y)\n\n    # Multiplica\u00e7\u00e3o por escalar: v1 * 3\n    def __mul__(self, escalar):\n        return Vetor2D(self.x * escalar, self.y * escalar)\n\n    # Multiplica\u00e7\u00e3o por escalar: 3 * v1\n    def __rmul__(self, escalar):\n        return self.__mul__(escalar)\n\n    # Comprimento do vetor: len(v1)\n    def __abs__(self):\n        import math\n        return math.sqrt(self.x ** 2 + self.y ** 2)\n\n    # Igualdade: v1 == v2\n    def __eq__(self, outro):\n        return self.x == outro.x and self.y == outro.y\n\n# Criando vetores\nv1 = Vetor2D(3, 4)\nv2 = Vetor2D(1, 2)\n\n# Usando operadores\nprint(f\"v1 = {v1}\")  # v1 = (3, 4)\nprint(f\"v2 = {v2}\")  # v2 = (1, 2)\nprint(f\"v1 + v2 = {v1 + v2}\")  # v1 + v2 = (4, 6)\nprint(f\"v1 - v2 = {v1 - v2}\")  # v1 - v2 = (2, 2)\nprint(f\"v1 * 2 = {v1 * 2}\")  # v1 * 2 = (6, 8)\nprint(f\"3 * v2 = {3 * v2}\")  # 3 * v2 = (3, 6)\nprint(f\"|v1| = {abs(v1)}\")  # |v1| = 5.0\n\n# Compara\u00e7\u00e3o\nv3 = Vetor2D(3, 4)\nprint(f\"v1 == v3: {v1 == v3}\")  # v1 == v3: True\nprint(f\"v1 == v2: {v1 == v2}\")  # v1 == v2: False\n</code></pre> <pre><code>class Playlist:\n    def __init__(self, nome, *musicas):\n        self.nome = nome\n        self.musicas = list(musicas)\n\n    def __str__(self):\n        return f\"Playlist {self.nome} com {len(self.musicas)} m\u00fasicas\"\n\n    # Torna a classe iter\u00e1vel\n    def __iter__(self):\n        return iter(self.musicas)\n\n    # Permite acessar com nota\u00e7\u00e3o de colchetes\n    def __getitem__(self, indice):\n        return self.musicas[indice]\n\n    # Permite atribuir com nota\u00e7\u00e3o de colchetes\n    def __setitem__(self, indice, valor):\n        self.musicas[indice] = valor\n\n    # Permite usar a fun\u00e7\u00e3o len()\n    def __len__(self):\n        return len(self.musicas)\n\n    # Permite verificar se um item est\u00e1 contido: \"in\"\n    def __contains__(self, item):\n        return item in self.musicas\n\n# Criando uma playlist\npl = Playlist(\"Meus Favoritos\", \"Yesterday\", \"Bohemian Rhapsody\", \"Imagine\")\n\n# Usando m\u00e9todos de container\nprint(pl)  # Playlist Meus Favoritos com 3 m\u00fasicas\nprint(len(pl))  # 3\nprint(pl[1])  # Bohemian Rhapsody\n\n# Modificando um item\npl[0] = \"Hey Jude\"\nprint(pl[0])  # Hey Jude\n\n# Verificando se cont\u00e9m\nprint(\"Imagine\" in pl)  # True\nprint(\"Let It Be\" in pl)  # False\n\n# Iterando\nprint(\"M\u00fasicas na playlist:\")\nfor musica in pl:\n    print(f\"- {musica}\")\n</code></pre> <pre><code>class Calculadora:\n    def __init__(self, valor_inicial=0):\n        self.valor = valor_inicial\n\n    # Permite que o objeto seja chamado como uma fun\u00e7\u00e3o\n    def __call__(self, x, operacao='+'):\n        if operacao == '+':\n            self.valor += x\n        elif operacao == '-':\n            self.valor -= x\n        elif operacao == '*':\n            self.valor *= x\n        elif operacao == '/':\n            self.valor /= x\n        return self.valor\n\n# Criando uma calculadora\ncalc = Calculadora(10)\n\n# Chamando o objeto como uma fun\u00e7\u00e3o\nprint(calc(5))         # 15 (10 + 5)\nprint(calc(3, '*'))    # 45 (15 * 3)\nprint(calc(9, '/'))    # 5.0 (45 / 9)\nprint(calc(2, '-'))    # 3.0 (5.0 - 2)\n\n# Este padr\u00e3o \u00e9 \u00fatil para fun\u00e7\u00f5es que mant\u00eam estado\ncounter = Calculadora()\nfor i in range(1, 6):\n    print(f\"Contagem: {counter(1)}\")  # Incrementa em 1 a cada chamada\n</code></pre>"},{"location":"trilhas/python/page-13/#encapsulamento-getters-e-setters","title":"Encapsulamento, Getters e Setters","text":"<p>Em Python, o encapsulamento \u00e9 mais uma conven\u00e7\u00e3o do que uma imposi\u00e7\u00e3o.</p> Conven\u00e7\u00f5es de NomesProperties (Getters e Setters)Property como Decorador <pre><code>class Conta:\n    def __init__(self, titular, saldo=0):\n        self.titular = titular    # P\u00fablico (acess\u00edvel diretamente)\n        self._saldo = saldo       # \"Protegido\" (conven\u00e7\u00e3o: n\u00e3o acesse diretamente)\n        self.__numero = self.__gerar_numero()  # Privado (name mangling)\n\n    def __gerar_numero(self):\n        import random\n        return random.randint(10000, 99999)\n\n    def depositar(self, valor):\n        if valor &gt; 0:\n            self._saldo += valor\n            return True\n        return False\n\n    def sacar(self, valor):\n        if 0 &lt; valor &lt;= self._saldo:\n            self._saldo -= valor\n            return True\n        return False\n\n    def consultar_saldo(self):\n        return self._saldo\n\n    def consultar_dados(self):\n        # M\u00e9todo para acessar atributo privado\n        return f\"Conta n\u00ba {self.__numero}, Titular: {self.titular}, Saldo: R${self._saldo:.2f}\"\n\n# Criando uma conta\nconta = Conta(\"Ana Silva\", 1000)\n\n# Acessando atributos\nprint(conta.titular)  # Ana Silva\n\n# Conven\u00e7\u00f5es:\n# '_saldo' \u00e9 protegido, mas ainda acess\u00edvel (apenas uma conven\u00e7\u00e3o)\nprint(conta._saldo)  # 1000\n\n# N\u00e3o se deve acessar '__numero' diretamente\n# print(conta.__numero)  # Erro: AttributeError\n\n# Name mangling: Python renomeia atributos privados\nprint(conta._Conta__numero)  # Funciona, mas n\u00e3o deve ser feito\n\n# O modo correto \u00e9 usar m\u00e9todos\nprint(conta.consultar_dados())\n</code></pre> <pre><code>class Temperatura:\n    def __init__(self, celsius=0):\n        self._celsius = celsius\n\n    # Getter\n    @property\n    def celsius(self):\n        return self._celsius\n\n    # Setter\n    @celsius.setter\n    def celsius(self, valor):\n        if valor &lt; -273.15:  # Valida\u00e7\u00e3o: zero absoluto\n            raise ValueError(\"Temperatura abaixo do zero absoluto!\")\n        self._celsius = valor\n\n    # Property calculada (apenas getter)\n    @property\n    def fahrenheit(self):\n        return (self._celsius * 9/5) + 32\n\n    # Setter para propriedade calculada\n    @fahrenheit.setter\n    def fahrenheit(self, valor):\n        self.celsius = (valor - 32) * 5/9\n\n    # Outra property calculada\n    @property\n    def kelvin(self):\n        return self._celsius + 273.15\n\n    @kelvin.setter\n    def kelvin(self, valor):\n        self.celsius = valor - 273.15\n\n# Criando um objeto temperatura\ntemp = Temperatura(25)\n\n# Acessando properties como se fossem atributos\nprint(f\"Celsius: {temp.celsius}\u00b0C\")       # Celsius: 25\u00b0C\nprint(f\"Fahrenheit: {temp.fahrenheit}\u00b0F\") # Fahrenheit: 77.0\u00b0F\nprint(f\"Kelvin: {temp.kelvin}K\")          # Kelvin: 298.15K\n\n# Usando setters\ntemp.celsius = 30\nprint(f\"Celsius: {temp.celsius}\u00b0C\")       # Celsius: 30\u00b0C\nprint(f\"Fahrenheit: {temp.fahrenheit}\u00b0F\") # Fahrenheit: 86.0\u00b0F\n\ntemp.fahrenheit = 68\nprint(f\"Celsius: {temp.celsius}\u00b0C\")       # Celsius: 20.0\u00b0C\n\ntemp.kelvin = 300\nprint(f\"Celsius: {temp.celsius}\u00b0C\")       # Celsius: 26.85\u00b0C\n\ntry:\n    temp.celsius = -300  # Abaixo do zero absoluto\nexcept ValueError as e:\n    print(f\"Erro: {e}\")  # Erro: Temperatura abaixo do zero absoluto!\n</code></pre> <pre><code>class Pessoa:\n    def __init__(self, nome, idade):\n        self._nome = nome\n        self._idade = idade\n        self._adulto = None  # Valor armazenado em cache\n\n    @property\n    def nome(self):\n        return self._nome\n\n    @property\n    def idade(self):\n        return self._idade\n\n    @idade.setter\n    def idade(self, valor):\n        if valor &lt; 0:\n            raise ValueError(\"Idade n\u00e3o pode ser negativa\")\n        # Quando a idade muda, invalidamos o cache\n        self._idade = valor\n        self._adulto = None\n\n    @property\n    def adulto(self):\n        # Lazy evaluation: s\u00f3 calcula quando necess\u00e1rio\n        if self._adulto is None:\n            self._adulto = self._idade &gt;= 18\n        return self._adulto\n\n# Usando a classe\np = Pessoa(\"Carlos\", 16)\nprint(f\"{p.nome} tem {p.idade} anos e \u00e9 adulto? {p.adulto}\")\n# Carlos tem 16 anos e \u00e9 adulto? False\n\np.idade = 20\nprint(f\"{p.nome} tem {p.idade} anos e \u00e9 adulto? {p.adulto}\")\n# Carlos tem 20 anos e \u00e9 adulto? True\n\n# Erro ao tentar atribuir a uma propriedade somente-leitura\ntry:\n    p.nome = \"Carlos Silva\"\nexcept AttributeError as e:\n    print(f\"Erro: {e}\")  # Erro: can't set attribute\n</code></pre>"},{"location":"trilhas/python/page-13/#composicao-e-agregacao","title":"Composi\u00e7\u00e3o e Agrega\u00e7\u00e3o","text":"<p>A composi\u00e7\u00e3o \u00e9 uma maneira de reutilizar c\u00f3digo criando rela\u00e7\u00f5es entre objetos.</p> Composi\u00e7\u00e3oAgrega\u00e7\u00e3oModelo de Dados Completo <pre><code>class Motor:\n    def __init__(self, cilindradas):\n        self.cilindradas = cilindradas\n        self.ligado = False\n\n    def ligar(self):\n        self.ligado = True\n        return \"Motor ligado!\"\n\n    def desligar(self):\n        self.ligado = False\n        return \"Motor desligado.\"\n\n    def esta_ligado(self):\n        return self.ligado\n\nclass Carro:\n    def __init__(self, modelo, cor, cilindradas):\n        self.modelo = modelo\n        self.cor = cor\n        # Composi\u00e7\u00e3o: o carro possui um motor\n        self.motor = Motor(cilindradas)\n        self.velocidade = 0\n\n    def ligar(self):\n        return f\"{self.modelo}: {self.motor.ligar()}\"\n\n    def desligar(self):\n        if self.velocidade &gt; 0:\n            return f\"{self.modelo}: Pare o carro antes de desligar!\"\n        return f\"{self.modelo}: {self.motor.desligar()}\"\n\n    def acelerar(self, valor):\n        if not self.motor.esta_ligado():\n            return f\"{self.modelo}: Ligue o carro primeiro!\"\n        self.velocidade += valor\n        return f\"{self.modelo}: Velocidade atual: {self.velocidade} km/h\"\n\n    def frear(self, valor):\n        if self.velocidade - valor &lt; 0:\n            self.velocidade = 0\n        else:\n            self.velocidade -= valor\n        return f\"{self.modelo}: Velocidade atual: {self.velocidade} km/h\"\n\n# Criando e usando um carro\nmeu_carro = Carro(\"Fusca\", \"Azul\", 1300)\n\nprint(meu_carro.acelerar(20))  # Fusca: Ligue o carro primeiro!\nprint(meu_carro.ligar())       # Fusca: Motor ligado!\nprint(meu_carro.acelerar(20))  # Fusca: Velocidade atual: 20 km/h\nprint(meu_carro.acelerar(30))  # Fusca: Velocidade atual: 50 km/h\nprint(meu_carro.desligar())    # Fusca: Pare o carro antes de desligar!\nprint(meu_carro.frear(30))     # Fusca: Velocidade atual: 20 km/h\nprint(meu_carro.frear(30))     # Fusca: Velocidade atual: 0 km/h\nprint(meu_carro.desligar())    # Fusca: Motor desligado.\n</code></pre> <pre><code>class Autor:\n    def __init__(self, nome, nacionalidade):\n        self.nome = nome\n        self.nacionalidade = nacionalidade\n\n    def __str__(self):\n        return f\"{self.nome} ({self.nacionalidade})\"\n\nclass Livro:\n    def __init__(self, titulo, autor, ano):\n        self.titulo = titulo\n        # Agrega\u00e7\u00e3o: o livro tem um autor, mas o autor existe independentemente\n        self.autor = autor\n        self.ano = ano\n\n    def __str__(self):\n        return f'\"{self.titulo}\" por {self.autor}, {self.ano}'\n\nclass Biblioteca:\n    def __init__(self, nome):\n        self.nome = nome\n        self.livros = []\n\n    def adicionar_livro(self, livro):\n        self.livros.append(livro)\n        return f'\"{livro.titulo}\" adicionado \u00e0 {self.nome}'\n\n    def listar_livros(self):\n        return [str(livro) for livro in self.livros]\n\n# Criando autores independentes\nmachado = Autor(\"Machado de Assis\", \"Brasileiro\")\ntolkien = Autor(\"J.R.R. Tolkien\", \"Brit\u00e2nico\")\n\n# Criando livros com os autores existentes\nlivro1 = Livro(\"Dom Casmurro\", machado, 1899)\nlivro2 = Livro(\"O Senhor dos An\u00e9is\", tolkien, 1954)\nlivro3 = Livro(\"Mem\u00f3rias P\u00f3stumas de Br\u00e1s Cubas\", machado, 1881)\n\n# Criando uma biblioteca e adicionando livros\nbiblioteca = Biblioteca(\"Biblioteca Municipal\")\nprint(biblioteca.adicionar_livro(livro1))\nprint(biblioteca.adicionar_livro(livro2))\nprint(biblioteca.adicionar_livro(livro3))\n\n# Listando os livros\nprint(f\"\\nLivros dispon\u00edveis na {biblioteca.nome}:\")\nfor livro in biblioteca.listar_livros():\n    print(f\"- {livro}\")\n\n# Observe que os autores existem independentemente dos livros\nprint(f\"\\nAutores:\")\nprint(f\"- {machado}\")\nprint(f\"- {tolkien}\")\n</code></pre> <pre><code>from datetime import datetime, timedelta\n\nclass Usuario:\n    def __init__(self, nome, email):\n        self.nome = nome\n        self.email = email\n        self.data_cadastro = datetime.now()\n        self.carrinho = Carrinho()\n\n    def __str__(self):\n        return f\"Usu\u00e1rio: {self.nome} ({self.email})\"\n\nclass Produto:\n    def __init__(self, nome, preco, codigo):\n        self.nome = nome\n        self.preco = preco\n        self.codigo = codigo\n\n    def __str__(self):\n        return f\"{self.nome} - R${self.preco:.2f}\"\n\nclass ItemCarrinho:\n    def __init__(self, produto, quantidade=1):\n        self.produto = produto\n        self.quantidade = quantidade\n\n    @property\n    def subtotal(self):\n        return self.produto.preco * self.quantidade\n\n    def __str__(self):\n        return f\"{self.produto.nome} x {self.quantidade} = R${self.subtotal:.2f}\"\n\nclass Carrinho:\n    def __init__(self):\n        self.itens = []\n\n    def adicionar_item(self, produto, quantidade=1):\n        # Verifica se o produto j\u00e1 est\u00e1 no carrinho\n        for item in self.itens:\n            if item.produto.codigo == produto.codigo:\n                item.quantidade += quantidade\n                return f\"{produto.nome} adicionado. Nova quantidade: {item.quantidade}\"\n\n        # Adiciona novo item\n        novo_item = ItemCarrinho(produto, quantidade)\n        self.itens.append(novo_item)\n        return f\"{produto.nome} adicionado ao carrinho.\"\n\n    def remover_item(self, codigo_produto):\n        for i, item in enumerate(self.itens):\n            if item.produto.codigo == codigo_produto:\n                removido = self.itens.pop(i)\n                return f\"{removido.produto.nome} removido do carrinho.\"\n        return \"Produto n\u00e3o encontrado no carrinho.\"\n\n    @property\n    def total(self):\n        return sum(item.subtotal for item in self.itens)\n\n    def __str__(self):\n        if not self.itens:\n            return \"Carrinho vazio\"\n\n        resultado = \"Itens no carrinho:\\n\"\n        for item in self.itens:\n            resultado += f\"- {item}\\n\"\n        resultado += f\"Total: R${self.total:.2f}\"\n        return resultado\n\nclass Pedido:\n    contador = 0\n\n    def __init__(self, usuario, itens_carrinho):\n        Pedido.contador += 1\n        self.numero = Pedido.contador\n        self.usuario = usuario\n        self.itens = list(itens_carrinho)  # C\u00f3pia dos itens\n        self.data = datetime.now()\n        self.total = sum(item.subtotal for item in self.itens)\n\n    @property\n    def data_entrega_estimada(self):\n        return self.data + timedelta(days=7)\n\n    def __str__(self):\n        resultado = f\"Pedido #{self.numero} - {self.usuario.nome}\\n\"\n        resultado += f\"Data: {self.data.strftime('%d/%m/%Y %H:%M')}\\n\"\n        resultado += \"Itens:\\n\"\n        for item in self.itens:\n            resultado += f\"- {item}\\n\"\n        resultado += f\"Total: R${self.total:.2f}\\n\"\n        resultado += f\"Entrega estimada: {self.data_entrega_estimada.strftime('%d/%m/%Y')}\"\n        return resultado\n\n# Exemplo de uso do modelo\n# Criando produtos\np1 = Produto(\"Camiseta\", 29.90, \"CAM001\")\np2 = Produto(\"Cal\u00e7a Jeans\", 99.90, \"CAL001\")\np3 = Produto(\"T\u00eanis\", 149.90, \"TEN001\")\n\n# Criando usu\u00e1rio\nusuario = Usuario(\"Ana Silva\", \"ana@email.com\")\nprint(usuario)\n\n# Adicionando itens ao carrinho\nprint(usuario.carrinho.adicionar_item(p1, 2))\nprint(usuario.carrinho.adicionar_item(p2))\nprint(usuario.carrinho.adicionar_item(p3))\nprint(usuario.carrinho.adicionar_item(p1))  # Aumenta a quantidade\n\n# Exibindo o carrinho\nprint(\"\\nCarrinho atual:\")\nprint(usuario.carrinho)\n\n# Removendo um item\nprint(\"\\n\" + usuario.carrinho.remover_item(\"TEN001\"))\n\n# Criando um pedido com os itens do carrinho\npedido = Pedido(usuario, usuario.carrinho.itens)\n\n# Exibindo o pedido\nprint(\"\\nPedido criado:\")\nprint(pedido)\n</code></pre>"},{"location":"trilhas/python/page-13/#exemplo-completo-aplicacao-simples","title":"Exemplo Completo: Aplica\u00e7\u00e3o Simples","text":"<p>A seguir, temos um exemplo completo de uma aplica\u00e7\u00e3o simples modelada com orienta\u00e7\u00e3o a objetos.</p> <pre><code>class Tarefa:\n    \"\"\"Representa uma tarefa a ser realizada.\"\"\"\n\n    def __init__(self, titulo, descricao=\"\", concluida=False, prioridade=1):\n        self.titulo = titulo\n        self.descricao = descricao\n        self.concluida = concluida\n        self.prioridade = prioridade\n\n    def concluir(self):\n        self.concluida = True\n        return f\"Tarefa '{self.titulo}' marcada como conclu\u00edda.\"\n\n    def reabrir(self):\n        self.concluida = False\n        return f\"Tarefa '{self.titulo}' reaberta.\"\n\n    def __str__(self):\n        status = \"\u2713\" if self.concluida else \" \"\n        prioridade = \"!\" * self.prioridade\n        return f\"[{status}] {self.titulo} {prioridade}\"\n\n    def __repr__(self):\n        return f\"Tarefa('{self.titulo}', '{self.descricao}', {self.concluida}, {self.prioridade})\"\n\n\nclass ListaTarefas:\n    \"\"\"Gerencia uma cole\u00e7\u00e3o de tarefas.\"\"\"\n\n    def __init__(self, nome):\n        self.nome = nome\n        self.tarefas = []\n\n    def adicionar_tarefa(self, titulo, descricao=\"\", prioridade=1):\n        tarefa = Tarefa(titulo, descricao, prioridade=prioridade)\n        self.tarefas.append(tarefa)\n        return f\"Tarefa '{titulo}' adicionada \u00e0 lista '{self.nome}'.\"\n\n    def concluir_tarefa(self, indice):\n        if 0 &lt;= indice &lt; len(self.tarefas):\n            return self.tarefas[indice].concluir()\n        return \"\u00cdndice de tarefa inv\u00e1lido.\"\n\n    def reabrir_tarefa(self, indice):\n        if 0 &lt;= indice &lt; len(self.tarefas):\n            return self.tarefas[indice].reabrir()\n        return \"\u00cdndice de tarefa inv\u00e1lido.\"\n\n    def remover_tarefa(self, indice):\n        if 0 &lt;= indice &lt; len(self.tarefas):\n            tarefa = self.tarefas.pop(indice)\n            return f\"Tarefa '{tarefa.titulo}' removida.\"\n        return \"\u00cdndice de tarefa inv\u00e1lido.\"\n\n    def listar_tarefas(self, apenas_pendentes=False):\n        if not self.tarefas:\n            return \"N\u00e3o h\u00e1 tarefas nesta lista.\"\n\n        resultado = f\"Lista de Tarefas: {self.nome}\\n\"\n\n        tarefas_filtradas = [t for t in self.tarefas if not apenas_pendentes or not t.concluida]\n\n        if not tarefas_filtradas:\n            return resultado + \"N\u00e3o h\u00e1 tarefas pendentes.\"\n\n        # Ordenar por prioridade (decrescente) e por conclus\u00e3o\n        tarefas_ordenadas = sorted(\n            tarefas_filtradas, \n            key=lambda t: (-t.prioridade, t.concluida)\n        )\n\n        for i, tarefa in enumerate(tarefas_ordenadas):\n            resultado += f\"{i}. {tarefa}\\n\"\n            if tarefa.descricao:\n                resultado += f\"   {tarefa.descricao}\\n\"\n\n        return resultado\n\n\nclass GerenciadorTarefas:\n    \"\"\"Sistema para gerenciar m\u00faltiplas listas de tarefas.\"\"\"\n\n    def __init__(self):\n        self.listas = {}\n\n    def criar_lista(self, nome):\n        if nome in self.listas:\n            return f\"Lista '{nome}' j\u00e1 existe.\"\n\n        self.listas[nome] = ListaTarefas(nome)\n        return f\"Lista '{nome}' criada com sucesso.\"\n\n    def remover_lista(self, nome):\n        if nome in self.listas:\n            del self.listas[nome]\n            return f\"Lista '{nome}' removida com sucesso.\"\n        return f\"Lista '{nome}' n\u00e3o encontrada.\"\n\n    def listar_listas(self):\n        if not self.listas:\n            return \"N\u00e3o h\u00e1 listas de tarefas.\"\n\n        resultado = \"Listas de Tarefas:\\n\"\n        for nome, lista in self.listas.items():\n            tarefas_pendentes = sum(1 for t in lista.tarefas if not t.concluida)\n            resultado += f\"- {nome} ({tarefas_pendentes} pendentes)\\n\"\n\n        return resultado\n\n    def obter_lista(self, nome):\n        return self.listas.get(nome)\n\n\n# Demonstra\u00e7\u00e3o do uso\ndef demonstracao():\n    gerenciador = GerenciadorTarefas()\n\n    print(gerenciador.criar_lista(\"Trabalho\"))\n    print(gerenciador.criar_lista(\"Pessoal\"))\n\n    lista_trabalho = gerenciador.obter_lista(\"Trabalho\")\n    lista_pessoal = gerenciador.obter_lista(\"Pessoal\")\n\n    print(lista_trabalho.adicionar_tarefa(\"Enviar relat\u00f3rio\", \"Relat\u00f3rio mensal para o gerente\", 3))\n    print(lista_trabalho.adicionar_tarefa(\"Reuni\u00e3o de projeto\", \"Videoconfer\u00eancia \u00e0s 14h\", 2))\n    print(lista_trabalho.adicionar_tarefa(\"Revisar c\u00f3digo\", \"Verificar PR #123 no GitHub\", 2))\n\n    print(lista_pessoal.adicionar_tarefa(\"Comprar mantimentos\", \"Leite, ovos, p\u00e3o\", 1))\n    print(lista_pessoal.adicionar_tarefa(\"Academia\", \"Treino de muscula\u00e7\u00e3o\", 2))\n\n    print(\"\\n\" + gerenciador.listar_listas())\n\n    print(\"\\n\" + lista_trabalho.listar_tarefas())\n\n    print(\"\\nConcluindo tarefas:\")\n    print(lista_trabalho.concluir_tarefa(1))\n    print(lista_pessoal.concluir_tarefa(0))\n\n    print(\"\\nTarefas pendentes do trabalho:\")\n    print(lista_trabalho.listar_tarefas(apenas_pendentes=True))\n\n    print(\"\\nRemovendo lista:\")\n    print(gerenciador.remover_lista(\"Pessoal\"))\n    print(gerenciador.listar_listas())\n\n\nif __name__ == \"__main__\":\n    demonstracao()\n</code></pre>"},{"location":"trilhas/python/page-13/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu os fundamentos da Programa\u00e7\u00e3o Orientada a Objetos em Python:</p> <ul> <li>Classes e Objetos: Como criar modelos (classes) e inst\u00e2ncias (objetos)</li> <li>Atributos e M\u00e9todos: Como definir dados e comportamentos</li> <li>M\u00e9todos Especiais: Como personalizar o comportamento dos objetos com m\u00e9todos dunder</li> <li>Encapsulamento: Como proteger dados e fornecer interfaces controladas com properties</li> <li>Composi\u00e7\u00e3o e Agrega\u00e7\u00e3o: Como criar rela\u00e7\u00f5es entre objetos</li> <li>Aplica\u00e7\u00f5es Pr\u00e1ticas: Como modelar problemas do mundo real usando POO</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial Python sobre classes</li> <li>Python Data Model</li> <li>Real Python: Object-Oriented Programming in Python 3</li> <li>PEP 8 - Conve\u00e7\u00f5es de estilo para c\u00f3digo Python</li> </ul>"},{"location":"trilhas/python/page-13/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, vamos explorar o conceito de heran\u00e7a e polimorfismo, expandindo nossos conhecimentos sobre Programa\u00e7\u00e3o Orientada a Objetos e aprendendo como criar hierarquias de classes.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Decoradores</p>"},{"location":"trilhas/python/page-14/","title":"Heran\u00e7a e Polimorfismo em Python","text":""},{"location":"trilhas/python/page-14/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A heran\u00e7a e o polimorfismo s\u00e3o dois conceitos fundamentais da Programa\u00e7\u00e3o Orientada a Objetos que permitem criar hierarquias de classes e reutilizar c\u00f3digo de forma eficiente. Estes conceitos s\u00e3o cruciais para construir sistemas bem organizados, extens\u00edveis e de f\u00e1cil manuten\u00e7\u00e3o.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Compreender o conceito de heran\u00e7a e sua implementa\u00e7\u00e3o em Python</li> <li>Entender como usar heran\u00e7a m\u00faltipla e suas implica\u00e7\u00f5es</li> <li>Aprender o funcionamento do m\u00e9todo <code>super()</code> para acessar m\u00e9todos da classe pai</li> <li>Dominar o conceito de polimorfismo e suas aplica\u00e7\u00f5es</li> <li>Explorar classes abstratas e interfaces em Python</li> <li>Aplicar boas pr\u00e1ticas no uso de heran\u00e7a e polimorfismo</li> </ul>"},{"location":"trilhas/python/page-14/#heranca-em-python","title":"Heran\u00e7a em Python","text":"<p>A heran\u00e7a permite que uma classe (subclasse ou classe filha) herde atributos e m\u00e9todos de outra classe (superclasse ou classe pai).</p> Heran\u00e7a B\u00e1sicaHeran\u00e7a em CadeiaHeran\u00e7a M\u00faltiplaMRO (Method Resolution Order) <pre><code># Classe pai\nclass Animal:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n\n    def fazer_som(self):\n        print(\"Algum som de animal\")\n\n    def apresentar(self):\n        return f\"Ol\u00e1, eu sou {self.nome} e tenho {self.idade} anos.\"\n\n# Classe filha\nclass Cachorro(Animal):\n    def __init__(self, nome, idade, raca):\n        # Chamando o construtor da classe pai\n        super().__init__(nome, idade)\n        self.raca = raca\n\n    # Sobrescrevendo o m\u00e9todo da classe pai\n    def fazer_som(self):\n        print(\"Au au!\")\n\n    # M\u00e9todo espec\u00edfico da classe filha\n    def abanar_rabo(self):\n        print(f\"{self.nome} est\u00e1 abanando o rabo!\")\n\n# Usando as classes\nanimal = Animal(\"Animal Gen\u00e9rico\", 5)\nprint(animal.apresentar())  # Ol\u00e1, eu sou Animal Gen\u00e9rico e tenho 5 anos.\nanimal.fazer_som()  # Algum som de animal\n\nrex = Cachorro(\"Rex\", 3, \"Labrador\")\nprint(rex.apresentar())  # Ol\u00e1, eu sou Rex e tenho 3 anos.\nrex.fazer_som()  # Au au!\nrex.abanar_rabo()  # Rex est\u00e1 abanando o rabo!\n\n# Verificando rela\u00e7\u00f5es de heran\u00e7a\nprint(isinstance(rex, Cachorro))  # True\nprint(isinstance(rex, Animal))  # True\nprint(issubclass(Cachorro, Animal))  # True\n</code></pre> <pre><code>class Veiculo:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n        self.ligado = False\n\n    def ligar(self):\n        self.ligado = True\n        return f\"{self.marca} {self.modelo} ligado.\"\n\n    def desligar(self):\n        self.ligado = False\n        return f\"{self.marca} {self.modelo} desligado.\"\n\n    def info(self):\n        return f\"Ve\u00edculo: {self.marca} {self.modelo}\"\n\nclass Carro(Veiculo):\n    def __init__(self, marca, modelo, portas):\n        super().__init__(marca, modelo)\n        self.portas = portas\n\n    def info(self):\n        return f\"Carro: {self.marca} {self.modelo}, {self.portas} portas\"\n\nclass SUV(Carro):\n    def __init__(self, marca, modelo, portas, tracao):\n        super().__init__(marca, modelo, portas)\n        self.tracao = tracao\n\n    def info(self):\n        return f\"SUV: {self.marca} {self.modelo}, {self.portas} portas, tra\u00e7\u00e3o {self.tracao}\"\n\n# Criando inst\u00e2ncias\nveiculo = Veiculo(\"Gen\u00e9rico\", \"B\u00e1sico\")\ncarro = Carro(\"Toyota\", \"Corolla\", 4)\nsuv = SUV(\"Honda\", \"CR-V\", 5, \"4x4\")\n\n# Cada classe na hierarquia sobrescreve o m\u00e9todo info\nprint(veiculo.info())  # Ve\u00edculo: Gen\u00e9rico B\u00e1sico\nprint(carro.info())    # Carro: Toyota Corolla, 4 portas\nprint(suv.info())      # SUV: Honda CR-V, 5 portas, tra\u00e7\u00e3o 4x4\n\n# M\u00e9todos da classe base funcionam em todas as subclasses\nprint(veiculo.ligar())  # Gen\u00e9rico B\u00e1sico ligado.\nprint(carro.ligar())    # Toyota Corolla ligado.\nprint(suv.ligar())      # Honda CR-V ligado.\n</code></pre> <pre><code>class Dispositivo:\n    def __init__(self, nome, marca):\n        self.nome = nome\n        self.marca = marca\n        self.ligado = False\n\n    def ligar(self):\n        self.ligado = True\n        return f\"{self.nome} ligado.\"\n\n    def desligar(self):\n        self.ligado = False\n        return f\"{self.nome} desligado.\"\n\nclass Conectavel:\n    def __init__(self):\n        self.conectado = False\n\n    def conectar(self):\n        self.conectado = True\n        return \"Conectado \u00e0 internet.\"\n\n    def desconectar(self):\n        self.conectado = False\n        return \"Desconectado da internet.\"\n\nclass Bateria:\n    def __init__(self):\n        self.carga = 100\n\n    def verificar_bateria(self):\n        return f\"Bateria: {self.carga}%\"\n\n    def carregar(self, quantidade):\n        self.carga = min(100, self.carga + quantidade)\n        return f\"Carregado. Bateria: {self.carga}%\"\n\n# Heran\u00e7a m\u00faltipla\nclass Smartphone(Dispositivo, Conectavel, Bateria):\n    def __init__(self, nome, marca, modelo, sistema_operacional):\n        # Inicializando as superclasses\n        Dispositivo.__init__(self, nome, marca)\n        Conectavel.__init__(self)\n        Bateria.__init__(self)\n\n        # Atributos espec\u00edficos\n        self.modelo = modelo\n        self.sistema_operacional = sistema_operacional\n\n    def fazer_ligacao(self, numero):\n        if not self.ligado:\n            return \"Smartphone desligado. Ligue-o primeiro.\"\n\n        if self.carga &lt; 10:\n            return \"Bateria fraca. Carregue o smartphone.\"\n\n        self.carga -= 5\n        return f\"Ligando para {numero}...\"\n\n# Usando a classe com heran\u00e7a m\u00faltipla\nmeu_smartphone = Smartphone(\"Galaxy S21\", \"Samsung\", \"S21\", \"Android\")\n\nprint(meu_smartphone.ligar())            # Galaxy S21 ligado.\nprint(meu_smartphone.conectar())         # Conectado \u00e0 internet.\nprint(meu_smartphone.verificar_bateria())  # Bateria: 100%\nprint(meu_smartphone.fazer_ligacao(\"123-456-7890\"))  # Ligando para 123-456-7890...\nprint(meu_smartphone.verificar_bateria())  # Bateria: 95%\n</code></pre> <pre><code># O MRO (Method Resolution Order) define a ordem em que Python\n# procura m\u00e9todos em classes com heran\u00e7a m\u00faltipla\n\nclass A:\n    def quem_sou_eu(self):\n        return \"Eu sou A\"\n\nclass B(A):\n    def quem_sou_eu(self):\n        return \"Eu sou B\"\n\nclass C(A):\n    def quem_sou_eu(self):\n        return \"Eu sou C\"\n\nclass D(B, C):\n    pass\n\nclass E(C, B):\n    pass\n\n# Usando as classes\nd = D()\ne = E()\n\n# D herda de B e C, nessa ordem\nprint(d.quem_sou_eu())  # Eu sou B\n\n# E herda de C e B, nessa ordem\nprint(e.quem_sou_eu())  # Eu sou C\n\n# Visualizando o MRO completo\nprint(D.mro())  # [&lt;class 'D'&gt;, &lt;class 'B'&gt;, &lt;class 'C'&gt;, &lt;class 'A'&gt;, &lt;class 'object'&gt;]\nprint(E.mro())  # [&lt;class 'E'&gt;, &lt;class 'C'&gt;, &lt;class 'B'&gt;, &lt;class 'A'&gt;, &lt;class 'object'&gt;]\n\n# O algoritmo C3 \u00e9 usado para determinar o MRO\n# e evitar ambiguidades na resolu\u00e7\u00e3o de m\u00e9todos\n</code></pre>"},{"location":"trilhas/python/page-14/#o-metodo-super","title":"O m\u00e9todo super()","text":"<p>O m\u00e9todo <code>super()</code> \u00e9 usado para chamar m\u00e9todos da classe pai, o que \u00e9 essencial para a extens\u00e3o de comportamentos em subclasses.</p> Chamando ConstrutoresSuper com Heran\u00e7a M\u00faltiplaSuper com Par\u00e2metros <pre><code>class Forma:\n    def __init__(self, cor):\n        self.cor = cor\n\n    def info(self):\n        return f\"Forma de cor {self.cor}\"\n\nclass Retangulo(Forma):\n    def __init__(self, cor, largura, altura):\n        # Chama o construtor da classe pai\n        super().__init__(cor)\n\n        # Adiciona atributos espec\u00edficos\n        self.largura = largura\n        self.altura = altura\n\n    def info(self):\n        # Estende o m\u00e9todo da classe pai\n        return f\"{super().info()}, largura: {self.largura}, altura: {self.altura}\"\n\n    def area(self):\n        return self.largura * self.altura\n\nclass Quadrado(Retangulo):\n    def __init__(self, cor, lado):\n        # Chama o construtor da classe Retangulo\n        super().__init__(cor, lado, lado)\n\n    def info(self):\n        # Como a classe pai j\u00e1 \u00e9 Retangulo, podemos personalizar mais\n        info_pai = super().info()\n        return info_pai.replace(\"largura: {}, altura: {}\".format(self.largura, self.altura), \n                              f\"lado: {self.largura}\")\n\n# Usando as classes\nforma = Forma(\"azul\")\nretangulo = Retangulo(\"verde\", 10, 5)\nquadrado = Quadrado(\"vermelho\", 7)\n\nprint(forma.info())     # Forma de cor azul\nprint(retangulo.info())  # Forma de cor verde, largura: 10, altura: 5\nprint(quadrado.info())   # Forma de cor vermelho, lado: 7\n\nprint(f\"\u00c1rea do ret\u00e2ngulo: {retangulo.area()}\")  # \u00c1rea do ret\u00e2ngulo: 50\nprint(f\"\u00c1rea do quadrado: {quadrado.area()}\")    # \u00c1rea do quadrado: 49\n</code></pre> <pre><code>class A:\n    def metodo(self):\n        print(\"M\u00e9todo na classe A\")\n\nclass B(A):\n    def metodo(self):\n        print(\"M\u00e9todo na classe B\")\n        super().metodo()  # Chama A.metodo()\n\nclass C(A):\n    def metodo(self):\n        print(\"M\u00e9todo na classe C\")\n        super().metodo()  # Chama A.metodo()\n\nclass D(B, C):\n    def metodo(self):\n        print(\"M\u00e9todo na classe D\")\n        super().metodo()  # Chama B.metodo() (primeiro na ordem MRO)\n\n# Usando a classe D\nd = D()\nd.metodo()\n# Sa\u00edda:\n# M\u00e9todo na classe D\n# M\u00e9todo na classe B\n# M\u00e9todo na classe C\n# M\u00e9todo na classe A\n\n# Explica\u00e7\u00e3o:\n# 1. D.metodo() chama super().metodo(), que \u00e9 B.metodo()\n# 2. B.metodo() imprime sua mensagem e chama super().metodo(), que \u00e9 C.metodo()\n# 3. C.metodo() imprime sua mensagem e chama super().metodo(), que \u00e9 A.metodo()\n# 4. A.metodo() imprime sua mensagem\n\n# O MRO para D \u00e9: [D, B, C, A, object]\n# super() sempre segue essa ordem\n</code></pre> <pre><code>class Pessoa:\n    def __init__(self, nome, idade):\n        self.nome = nome\n        self.idade = idade\n\n    def apresentar(self):\n        return f\"Ol\u00e1, eu sou {self.nome} e tenho {self.idade} anos.\"\n\nclass Aluno(Pessoa):\n    def __init__(self, nome, idade, matricula):\n        super().__init__(nome, idade)\n        self.matricula = matricula\n\n    def apresentar(self):\n        return f\"{super().apresentar()} Sou aluno com matr\u00edcula {self.matricula}.\"\n\nclass AlunoMonitor(Aluno):\n    def __init__(self, nome, idade, matricula, disciplina):\n        super().__init__(nome, idade, matricula)\n        self.disciplina = disciplina\n\n    def apresentar(self):\n        # Usando super() com argumentos espec\u00edficos\n        # super(AlunoMonitor, self) se refere \u00e0 classe Aluno\n        apresentacao_base = super().apresentar()\n\n        # Tamb\u00e9m poderia chamar diretamente a classe av\u00f4\n        # apresentacao_av\u00f4 = super(Aluno, self).apresentar()\n        # ou apresentacao_av\u00f4 = Pessoa.apresentar(self)\n\n        return f\"{apresentacao_base} Sou monitor da disciplina de {self.disciplina}.\"\n\n# Usando as classes\npessoa = Pessoa(\"Ana\", 25)\naluno = Aluno(\"Jo\u00e3o\", 20, \"A12345\")\nmonitor = AlunoMonitor(\"Pedro\", 22, \"B67890\", \"Programa\u00e7\u00e3o\")\n\nprint(pessoa.apresentar())\n# Ol\u00e1, eu sou Ana e tenho 25 anos.\n\nprint(aluno.apresentar())\n# Ol\u00e1, eu sou Jo\u00e3o e tenho 20 anos. Sou aluno com matr\u00edcula A12345.\n\nprint(monitor.apresentar())\n# Ol\u00e1, eu sou Pedro e tenho 22 anos. Sou aluno com matr\u00edcula B67890. Sou monitor da disciplina de Programa\u00e7\u00e3o.\n</code></pre>"},{"location":"trilhas/python/page-14/#polimorfismo","title":"Polimorfismo","text":"<p>O polimorfismo permite que objetos de diferentes classes sejam tratados como objetos de uma classe comum, possibilitando que m\u00e9todos com o mesmo nome tenham comportamentos diferentes dependendo da classe.</p> Polimorfismo de M\u00e9todoDuck TypingPolimorfismo em Built-ins <pre><code># Diferentes classes implementando o mesmo m\u00e9todo\nclass Animal:\n    def falar(self):\n        pass  # M\u00e9todo gen\u00e9rico a ser sobrescrito\n\n    def emitir_som(self):\n        # Esse m\u00e9todo usa o m\u00e9todo falar() polim\u00f3rfico\n        print(f\"O animal emite: {self.falar()}\")\n\nclass Cachorro(Animal):\n    def falar(self):\n        return \"Au au!\"\n\nclass Gato(Animal):\n    def falar(self):\n        return \"Miau!\"\n\nclass Pato(Animal):\n    def falar(self):\n        return \"Quack quack!\"\n\n# Fun\u00e7\u00e3o que usa o polimorfismo\ndef fazer_animal_falar(animal):\n    print(f\"O {animal.__class__.__name__} diz: {animal.falar()}\")\n\n# Criando inst\u00e2ncias\nrex = Cachorro()\nfelix = Gato()\ndonald = Pato()\n\n# Chamando o mesmo m\u00e9todo em diferentes objetos\nfazer_animal_falar(rex)     # O Cachorro diz: Au au!\nfazer_animal_falar(felix)   # O Gato diz: Miau!\nfazer_animal_falar(donald)  # O Pato diz: Quack quack!\n\n# Usando o m\u00e9todo que chama o m\u00e9todo polim\u00f3rfico\nrex.emitir_som()    # O animal emite: Au au!\nfelix.emitir_som()  # O animal emite: Miau!\ndonald.emitir_som() # O animal emite: Quack quack!\n\n# Armazenando em uma lista (duck typing)\nanimais = [rex, felix, donald]\nfor animal in animais:\n    fazer_animal_falar(animal)\n</code></pre> <pre><code># Duck Typing: \"Se anda como um pato e faz quack como um pato, ent\u00e3o \u00e9 um pato\"\n# Em Python, o tipo exato de um objeto \u00e9 menos importante que os m\u00e9todos e atributos que ele possui\n\nclass Pato:\n    def nadar(self):\n        return \"Pato nadando\"\n\n    def fazer_quack(self):\n        return \"Quack quack!\"\n\nclass PessoaQueImitaPato:\n    def nadar(self):\n        return \"Pessoa fingindo nadar como pato\"\n\n    def fazer_quack(self):\n        return \"Pessoa imitando: Quaaack!\"\n\nclass Cisne:\n    def nadar(self):\n        return \"Cisne nadando elegantemente\"\n\n    def cantar(self):\n        return \"\u266a\u266b\u266a\"\n\n# Fun\u00e7\u00e3o que usa duck typing\ndef fazer_pato_agir(pato):\n    # N\u00e3o verifica o tipo, apenas se tem os m\u00e9todos necess\u00e1rios\n    try:\n        print(pato.nadar())\n        print(pato.fazer_quack())\n        print(\"Este objeto age como um pato!\")\n    except AttributeError as e:\n        print(f\"Este objeto n\u00e3o age como um pato: {e}\")\n\n# Testando com diferentes objetos\npato = Pato()\nimitador = PessoaQueImitaPato()\ncisne = Cisne()\n\nprint(\"Testando um pato real:\")\nfazer_pato_agir(pato)\n# Pato nadando\n# Quack quack!\n# Este objeto age como um pato!\n\nprint(\"\\nTestando um imitador de pato:\")\nfazer_pato_agir(imitador)\n# Pessoa fingindo nadar como pato\n# Pessoa imitando: Quaaack!\n# Este objeto age como um pato!\n\nprint(\"\\nTestando um cisne:\")\nfazer_pato_agir(cisne)\n# Cisne nadando elegantemente\n# Este objeto n\u00e3o age como um pato: 'Cisne' object has no attribute 'fazer_quack'\n</code></pre> <pre><code># Polimorfismo est\u00e1 presente em muitas opera\u00e7\u00f5es built-in do Python\n\n# O operador + \u00e9 polim\u00f3rfico\nprint(10 + 5)          # 15 (soma de inteiros)\nprint(\"Ol\u00e1 \" + \"mundo\") # Ol\u00e1 mundo (concatena\u00e7\u00e3o de strings)\nprint([1, 2] + [3, 4])  # [1, 2, 3, 4] (concatena\u00e7\u00e3o de listas)\n\n# O operador * tamb\u00e9m \u00e9 polim\u00f3rfico\nprint(5 * 3)     # 15 (multiplica\u00e7\u00e3o de inteiros)\nprint(\"Py\" * 3)  # PyPyPy (repeti\u00e7\u00e3o de string)\nprint([7] * 3)   # [7, 7, 7] (repeti\u00e7\u00e3o de lista)\n\n# A fun\u00e7\u00e3o len() funciona com diferentes tipos\nprint(len(\"Python\"))        # 6 (comprimento de string)\nprint(len([1, 2, 3, 4, 5])) # 5 (comprimento de lista)\nprint(len({\"a\": 1, \"b\": 2})) # 2 (n\u00famero de chaves em dicion\u00e1rio)\n\n# Criando uma classe que implementa m\u00e9todos especiais para operadores\nclass Ponto:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"({self.x}, {self.y})\"\n\n    def __add__(self, outro):\n        return Ponto(self.x + outro.x, self.y + outro.y)\n\n    def __mul__(self, escalar):\n        return Ponto(self.x * escalar, self.y * escalar)\n\n    def __len__(self):\n        import math\n        # Retorna a dist\u00e2ncia Manhattan como um inteiro\n        return int(abs(self.x) + abs(self.y))\n\np1 = Ponto(3, 4)\np2 = Ponto(2, 7)\n\nprint(f\"p1 = {p1}\")         # p1 = (3, 4)\nprint(f\"p2 = {p2}\")         # p2 = (2, 7)\nprint(f\"p1 + p2 = {p1 + p2}\")  # p1 + p2 = (5, 11)\nprint(f\"p1 * 3 = {p1 * 3}\")  # p1 * 3 = (9, 12)\nprint(f\"len(p1) = {len(p1)}\")  # len(p1) = 7\n</code></pre>"},{"location":"trilhas/python/page-14/#classes-abstratas-e-interfaces","title":"Classes Abstratas e Interfaces","text":"<p>Python n\u00e3o tem interfaces formais como algumas linguagens, mas classes abstratas podem ser usadas para definir estruturas semelhantes.</p> Classes AbstratasUsando ABC como InterfaceProtocolo para Valida\u00e7\u00e3o <pre><code>from abc import ABC, abstractmethod\n\n# Classe abstrata\nclass FormaGeometrica(ABC):\n    @abstractmethod\n    def area(self):\n        \"\"\"Calcula a \u00e1rea da forma.\"\"\"\n        pass\n\n    @abstractmethod\n    def perimetro(self):\n        \"\"\"Calcula o per\u00edmetro da forma.\"\"\"\n        pass\n\n    def descricao(self):\n        \"\"\"M\u00e9todo concreto (n\u00e3o abstrato).\"\"\"\n        return \"Esta \u00e9 uma forma geom\u00e9trica.\"\n\n# N\u00e3o podemos instanciar uma classe abstrata\n# forma = FormaGeometrica()  # Isso causaria um erro\n\n# Classes concretas que implementam a classe abstrata\nclass Retangulo(FormaGeometrica):\n    def __init__(self, largura, altura):\n        self.largura = largura\n        self.altura = altura\n\n    def area(self):\n        return self.largura * self.altura\n\n    def perimetro(self):\n        return 2 * (self.largura + self.altura)\n\n    def descricao(self):\n        return f\"Este \u00e9 um ret\u00e2ngulo de {self.largura}x{self.altura}.\"\n\nclass Circulo(FormaGeometrica):\n    def __init__(self, raio):\n        self.raio = raio\n\n    def area(self):\n        import math\n        return math.pi * self.raio ** 2\n\n    def perimetro(self):\n        import math\n        return 2 * math.pi * self.raio\n\n    # Usamos a implementa\u00e7\u00e3o padr\u00e3o de descricao()\n\n# Agora podemos instanciar as classes concretas\nretangulo = Retangulo(10, 5)\ncirculo = Circulo(7)\n\n# E usar seus m\u00e9todos\nprint(f\"\u00c1rea do ret\u00e2ngulo: {retangulo.area()}\")  # \u00c1rea do ret\u00e2ngulo: 50\nprint(f\"Per\u00edmetro do ret\u00e2ngulo: {retangulo.perimetro()}\")  # Per\u00edmetro do ret\u00e2ngulo: 30\nprint(retangulo.descricao())  # Este \u00e9 um ret\u00e2ngulo de 10x5.\n\nprint(f\"\u00c1rea do c\u00edrculo: {circulo.area():.2f}\")  # \u00c1rea do c\u00edrculo: 153.94\nprint(f\"Per\u00edmetro do c\u00edrculo: {circulo.perimetro():.2f}\")  # Per\u00edmetro do c\u00edrculo: 43.98\nprint(circulo.descricao())  # Esta \u00e9 uma forma geom\u00e9trica.\n</code></pre> <pre><code>from abc import ABC, abstractmethod\n\n# Interface para dispositivos que podem conectar-se\nclass Conectavel(ABC):\n    @abstractmethod\n    def conectar(self):\n        pass\n\n    @abstractmethod\n    def desconectar(self):\n        pass\n\n# Interface para dispositivos que t\u00eam bateria\nclass ComBateria(ABC):\n    @abstractmethod\n    def verificar_bateria(self):\n        pass\n\n    @abstractmethod\n    def carregar(self, quantidade):\n        pass\n\n# Classes que implementam as interfaces\nclass Smartphone(Conectavel, ComBateria):\n    def __init__(self, modelo):\n        self.modelo = modelo\n        self.conectado = False\n        self.bateria = 100\n\n    def conectar(self):\n        self.conectado = True\n        return f\"{self.modelo} conectado \u00e0 rede.\"\n\n    def desconectar(self):\n        self.conectado = False\n        return f\"{self.modelo} desconectado da rede.\"\n\n    def verificar_bateria(self):\n        return f\"Bateria do {self.modelo}: {self.bateria}%\"\n\n    def carregar(self, quantidade):\n        self.bateria = min(100, self.bateria + quantidade)\n        return f\"{self.modelo} carregado. Bateria: {self.bateria}%\"\n\nclass Laptop(Conectavel, ComBateria):\n    def __init__(self, marca):\n        self.marca = marca\n        self.conectado = False\n        self.bateria = 100\n\n    def conectar(self):\n        self.conectado = True\n        return f\"Laptop {self.marca} conectado ao Wi-Fi.\"\n\n    def desconectar(self):\n        self.conectado = False\n        return f\"Laptop {self.marca} desconectado do Wi-Fi.\"\n\n    def verificar_bateria(self):\n        return f\"Bateria do laptop {self.marca}: {self.bateria}%\"\n\n    def carregar(self, quantidade):\n        self.bateria = min(100, self.bateria + quantidade)\n        return f\"Laptop {self.marca} carregado. Bateria: {self.bateria}%\"\n\n# Fun\u00e7\u00e3o que trabalha com objetos que implementam Conectavel\ndef conectar_dispositivo(dispositivo):\n    if isinstance(dispositivo, Conectavel):\n        return dispositivo.conectar()\n    else:\n        return \"Este dispositivo n\u00e3o suporta conex\u00e3o.\"\n\n# Fun\u00e7\u00e3o que trabalha com objetos que implementam ComBateria\ndef mostrar_bateria(dispositivo):\n    if isinstance(dispositivo, ComBateria):\n        return dispositivo.verificar_bateria()\n    else:\n        return \"Este dispositivo n\u00e3o tem bateria.\"\n\n# Criando inst\u00e2ncias\ncelular = Smartphone(\"iPhone 13\")\nnotebook = Laptop(\"Dell\")\n\n# Usando as fun\u00e7\u00f5es\nprint(conectar_dispositivo(celular))  # iPhone 13 conectado \u00e0 rede.\nprint(conectar_dispositivo(notebook))  # Laptop Dell conectado ao Wi-Fi.\n\nprint(mostrar_bateria(celular))  # Bateria do iPhone 13: 100%\nprint(mostrar_bateria(notebook))  # Bateria do laptop Dell: 100%\n\n# Usando o polimorfismo atrav\u00e9s das interfaces\ndispositivos = [celular, notebook]\nfor d in dispositivos:\n    print(d.conectar())\n    print(d.verificar_bateria())\n    print(d.carregar(10))  # Isso n\u00e3o ter\u00e1 efeito vis\u00edvel pois as baterias j\u00e1 est\u00e3o em 100%\n    print(d.desconectar())\n</code></pre> <pre><code>from abc import ABC, abstractmethod\nimport re\n\n# Interface para validadores\nclass Validador(ABC):\n    @abstractmethod\n    def validar(self, valor):\n        \"\"\"Retorna True se v\u00e1lido, False caso contr\u00e1rio.\"\"\"\n        pass\n\n    @abstractmethod\n    def mensagem_erro(self):\n        \"\"\"Retorna a mensagem de erro.\"\"\"\n        pass\n\n# Implementa\u00e7\u00f5es concretas\nclass ValidadorEmail(Validador):\n    def __init__(self):\n        self._ultimo_erro = \"\"\n        self._padrao = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n\n    def validar(self, email):\n        if not isinstance(email, str):\n            self._ultimo_erro = \"Email deve ser uma string.\"\n            return False\n\n        if not re.match(self._padrao, email):\n            self._ultimo_erro = \"Formato de email inv\u00e1lido.\"\n            return False\n\n        self._ultimo_erro = \"\"\n        return True\n\n    def mensagem_erro(self):\n        return self._ultimo_erro\n\nclass ValidadorSenha(Validador):\n    def __init__(self, min_tamanho=8):\n        self._ultimo_erro = \"\"\n        self._min_tamanho = min_tamanho\n\n    def validar(self, senha):\n        if not isinstance(senha, str):\n            self._ultimo_erro = \"Senha deve ser uma string.\"\n            return False\n\n        if len(senha) &lt; self._min_tamanho:\n            self._ultimo_erro = f\"Senha deve ter pelo menos {self._min_tamanho} caracteres.\"\n            return False\n\n        if not any(c.isupper() for c in senha):\n            self._ultimo_erro = \"Senha deve conter pelo menos uma letra mai\u00fascula.\"\n            return False\n\n        if not any(c.islower() for c in senha):\n            self._ultimo_erro = \"Senha deve conter pelo menos uma letra min\u00fascula.\"\n            return False\n\n        if not any(c.isdigit() for c in senha):\n            self._ultimo_erro = \"Senha deve conter pelo menos um n\u00famero.\"\n            return False\n\n        self._ultimo_erro = \"\"\n        return True\n\n    def mensagem_erro(self):\n        return self._ultimo_erro\n\n# Fun\u00e7\u00e3o que usa polimorfismo\ndef validar_entrada(valor, validador):\n    if validador.validar(valor):\n        return \"V\u00e1lido!\"\n    else:\n        return f\"Inv\u00e1lido: {validador.mensagem_erro()}\"\n\n# Testando os validadores\nemail_validador = ValidadorEmail()\nsenha_validador = ValidadorSenha()\n\nprint(validar_entrada(\"usuario@exemplo.com\", email_validador))  # V\u00e1lido!\nprint(validar_entrada(\"usuario@\", email_validador))  # Inv\u00e1lido: Formato de email inv\u00e1lido.\n\nprint(validar_entrada(\"Senha123\", senha_validador))  # V\u00e1lido!\nprint(validar_entrada(\"senha123\", senha_validador))  # Inv\u00e1lido: Senha deve conter pelo menos uma letra mai\u00fascula.\nprint(validar_entrada(\"SENHA123\", senha_validador))  # Inv\u00e1lido: Senha deve conter pelo menos uma letra min\u00fascula.\nprint(validar_entrada(\"Senhafraca\", senha_validador))  # Inv\u00e1lido: Senha deve conter pelo menos um n\u00famero.\n</code></pre>"},{"location":"trilhas/python/page-14/#exemplo-pratico-sistema-de-formas-geometricas","title":"Exemplo Pr\u00e1tico: Sistema de Formas Geom\u00e9tricas","text":"<p>Um exemplo completo que demonstra heran\u00e7a, polimorfismo e os princ\u00edpios SOLID.</p> <pre><code>from abc import ABC, abstractmethod\nimport math\n\n# Classe abstrata base\nclass Forma(ABC):\n    @abstractmethod\n    def area(self):\n        \"\"\"Calcula a \u00e1rea da forma.\"\"\"\n        pass\n\n    @abstractmethod\n    def perimetro(self):\n        \"\"\"Calcula o per\u00edmetro da forma.\"\"\"\n        pass\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}: \u00e1rea={self.area():.2f}, per\u00edmetro={self.perimetro():.2f}\"\n\n\n# Implementa\u00e7\u00f5es concretas de formas geom\u00e9tricas\nclass Retangulo(Forma):\n    def __init__(self, largura, altura):\n        if largura &lt;= 0 ou altura &lt;= 0:\n            raise ValueError(\"Dimens\u00f5es devem ser positivas\")\n        self.largura = largura\n        self.altura = altura\n\n    def area(self):\n        return self.largura * self.altura\n\n    def perimetro(self):\n        return 2 * (self.largura + self.altura)\n\n    def __str__(self):\n        return f\"{super().__str__()}, largura={self.largura}, altura={self.altura}\"\n\n\nclass Quadrado(Retangulo):\n    def __init__(self, lado):\n        super().__init__(lado, lado)\n        self.lado = lado\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}: \u00e1rea={self.area():.2f}, per\u00edmetro={self.perimetro():.2f}, lado={self.lado}\"\n\n\nclass Circulo(Forma):\n    def __init__(self, raio):\n        if raio &lt;= 0:\n            raise ValueError(\"Raio deve ser positivo\")\n        self.raio = raio\n\n    def area(self):\n        return math.pi * self.raio ** 2\n\n    def perimetro(self):\n        return 2 * math.pi * self.raio\n\n    def __str__(self):\n        return f\"{super().__str__()}, raio={self.raio}\"\n\n\nclass Triangulo(Forma):\n    def __init__(self, a, b, c):\n        # Verifica\u00e7\u00e3o da desigualdade triangular\n        if a + b &lt;= c ou a + c &lt;= b ou b + c &lt;= a:\n            raise ValueError(\"Estas medidas n\u00e3o formam um tri\u00e2ngulo v\u00e1lido\")\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def area(self):\n        # F\u00f3rmula de Heron\n        s = (self.a + self.b + self.c) / 2\n        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))\n\n    def perimetro(self):\n        return self.a + self.b + self.c\n\n    def __str__(self):\n        return f\"{super().__str__()}, lados={self.a}, {self.b}, {self.c}\"\n\n\n# Classe com funcionalidade adicional\nclass FormaColorida:\n    def __init__(self, forma, cor):\n        self.forma = forma\n        self.cor = cor\n\n    def area(self):\n        return self.forma.area()\n\n    def perimetro(self):\n        return self.forma.perimetro()\n\n    def __str__(self):\n        return f\"{self.forma} (cor: {self.cor})\"\n\n\n# Gerenciador de formas\nclass GerenciadorFormas:\n    def __init__(self):\n        self.formas = []\n\n    def adicionar_forma(self, forma):\n        if not isinstance(forma, Forma) e n\u00e3o tem hasattr(forma, 'area') e n\u00e3o tem hasattr(forma, 'perimetro'):\n            raise TypeError(\"O objeto deve ser uma forma v\u00e1lida com m\u00e9todos area() e perimetro()\")\n        self.formas.append(forma)\n\n    def area_total(self):\n        return sum(forma.area() para forma em self.formas)\n\n    def perimetro_total(self):\n        return sum(forma.perimetro() para forma em self.formas)\n\n    def listar_formas(self):\n        if not self.formas:\n            return \"Nenhuma forma registrada.\"\n\n        resultado = \"Formas registradas:\\n\"\n        for i, forma em enumerate(self.formas, 1):\n            resultado += f\"{i}. {forma}\\n\"\n\n        resultado += f\"\\n\u00c1rea total: {self.area_total():.2f}\"\n        resultado += f\"\\nPer\u00edmetro total: {self.perimetro_total():.2f}\"\n        return resultado\n\n\n# Demonstra\u00e7\u00e3o do uso\ndef main():\n    # Criando formas\n    try:\n        retangulo = Retangulo(5, 3)\n        quadrado = Quadrado(4)\n        circulo = Circulo(7)\n        triangulo = Triangulo(3, 4, 5)\n\n        # Usando composi\u00e7\u00e3o para adicionar cor\n        retangulo_vermelho = FormaColorida(retangulo, \"vermelho\")\n        circulo_azul = FormaColorida(circulo, \"azul\")\n\n        # Adicionando formas ao gerenciador\n        gerenciador = GerenciadorFormas()\n        gerenciador.adicionar_forma(retangulo)\n        gerenciador.adicionar_forma(quadrado)\n        gerenciador.adicionar_forma(circulo)\n        gerenciador.adicionar_forma(triangulo)\n        gerenciador.adicionar_forma(retangulo_vermelho)\n        gerenciador.adicionar_forma(circulo_azul)\n\n        # Exibindo informa\u00e7\u00f5es\n        print(gerenciador.listar_formas())\n\n        # Demonstrando o tratamento de erro\n        try:\n            triangulo_invalido = Triangulo(1, 1, 10)  # N\u00e3o \u00e9 um tri\u00e2ngulo v\u00e1lido\n        except ValueError como e:\n            print(f\"\\nErro ao criar tri\u00e2ngulo: {e}\")\n\n    exceto Exception como e:\n        print(f\"Ocorreu um erro: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"trilhas/python/page-14/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"Quando Usar Heran\u00e7aPrinc\u00edpio de Substitui\u00e7\u00e3o de LiskovFavore\u00e7a Composi\u00e7\u00e3o sobre Heran\u00e7a <pre><code># Use heran\u00e7a quando h\u00e1 uma rela\u00e7\u00e3o clara \"\u00e9 um\"\n\n# BOM: Um carro \u00e9 um ve\u00edculo\nclass Veiculo:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\n    def mover(self):\n        return \"Ve\u00edculo se movendo\"\n\nclass Carro(Veiculo):  # Um carro \u00c9 UM ve\u00edculo\n    def __init__(self, marca, modelo, portas):\n        super().__init__(marca, modelo)\n        self.portas = portas\n\n    def mover(self):\n        return \"Carro dirigindo na estrada\"\n\n# RUIM: Uma loja n\u00e3o \u00e9 um produto\nclass Produto:\n    def __init__(self, nome, preco):\n        self.nome = nome\n        self.preco = preco\n\n# Heran\u00e7a incorreta\nclass Loja(Produto):  # Uma loja N\u00c3O \u00c9 um produto!\n    def __init__(self, nome, endereco):\n        super().__init__(nome, 0)  # For\u00e7ando a heran\u00e7a\n        self.endereco = endereco\n        self.produtos = []\n\n# MELHOR: Use composi\u00e7\u00e3o em vez de heran\u00e7a quando n\u00e3o for \"\u00e9 um\"\nclass Loja:\n    def __init__(self, nome, endereco):\n        self.nome = nome\n        self.endereco = endereco\n        self.produtos = []  # Uma loja TEM produtos\n\n    def adicionar_produto(self, produto):\n        self.produtos.append(produto)\n</code></pre> <pre><code># O Princ\u00edpio de Substitui\u00e7\u00e3o de Liskov (LSP) afirma que \n# objetos de uma superclasse devem poder ser substitu\u00eddos \n# por objetos de uma subclasse sem afetar a corre\u00e7\u00e3o do programa\n\n# Viola\u00e7\u00e3o do LSP\nclass Retangulo:\n    def __init__(self, largura, altura):\n        self._largura = largura\n        self._altura = altura\n\n    def get_largura(self):\n        return self._largura\n\n    def set_largura(self, largura):\n        self._largura = largura\n\n    def get_altura(self):\n        return self._altura\n\n    def set_altura(self, altura):\n        self._altura = altura\n\n    def area(self):\n        return self._largura * self._altura\n\nclass Quadrado(Retangulo):\n    def __init__(self, lado):\n        super().__init__(lado, lado)\n\n    # Sobrescrevendo m\u00e9todos para manter o quadrado v\u00e1lido\n    def set_largura(self, largura):\n        self._largura = largura\n        self._altura = largura  # Altera altura tamb\u00e9m\n\n    def set_altura(self, altura):\n        self._altura = altura\n        self._largura = altura  # Altera largura tamb\u00e9m\n\n# Fun\u00e7\u00e3o que usa Retangulo\ndef aumentar_largura(retangulo):\n    largura_original = retangulo.get_largura()\n    altura_original = retangulo.get_altura()\n\n    retangulo.set_largura(largura_original + 1)\n\n    # Para um ret\u00e2ngulo, apenas a largura muda\n    # Para um quadrado, a altura tamb\u00e9m muda!\n    return retangulo.area() == (largura_original + 1) * altura_original\n\n# Teste\nretangulo = Retangulo(5, 10)\nquadrado = Quadrado(5)\n\nprint(f\"Teste com ret\u00e2ngulo: {aumentar_largura(retangulo)}\")  # True\nprint(f\"Teste com quadrado: {aumentar_largura(quadrado)}\")  # False - Viola o LSP!\n\n# Solu\u00e7\u00e3o: hierarquia de classes diferente ou usar composi\u00e7\u00e3o\n</code></pre> <pre><code># A composi\u00e7\u00e3o \u00e9 frequentemente mais flex\u00edvel que a heran\u00e7a\n\n# Abordagem com heran\u00e7a (pode ser inflex\u00edvel)\nclass Ave:\n    def comer(self):\n        return \"Comendo sementes\"\n\n    def voar(self):\n        return \"Voando alto\"\n\nclass Pato(Ave):\n    def nadar(self):\n        return \"Nadando no lago\"\n\nclass Pinguim(Ave):\n    # Problema: pinguins n\u00e3o voam!\n    def voar(self):\n        return \"N\u00e3o posso voar!\"  # Sobrescrever com comportamento nulo\n\n    def nadar(self):\n        return \"Nadando no oceano gelado\"\n\n# Abordagem com composi\u00e7\u00e3o (mais flex\u00edvel)\nclass Comportamento:\n    pass\n\nclass Voo(Comportamento):\n    def voar(self):\n        return \"Voando alto\"\n\nclass SemVoo(Comportamento):\n    def voar(self):\n        return \"N\u00e3o posso voar!\"\n\nclass Nado(Comportamento):\n    def nadar(self):\n        return \"Nadando na \u00e1gua\"\n\nclass Alimentacao(Comportamento):\n    def comer(self):\n        return \"Comendo sementes\"\n\nclass AnimalComposicao:\n    def __init__(self, nome):\n        self.nome = nome\n        self.comportamentos = []\n\n    def adicionar_comportamento(self, comportamento):\n        self.comportamentos.append(comportamento)\n\n    def voar(self):\n        for c em self.comportamentos:\n            if hasattr(c, 'voar'):\n                return c.voar()\n        return \"Este animal n\u00e3o tem comportamento de voo\"\n\n    def nadar(self):\n        for c em self.comportamentos:\n            if hasattr(c, 'nadar'):\n                return c.nadar()\n        return \"Este animal n\u00e3o tem comportamento de nado\"\n\n    def comer(self):\n        for c em self.comportamentos:\n            if hasattr(c, 'comer'):\n                return c.comer()\n        return \"Este animal n\u00e3o tem comportamento de alimenta\u00e7\u00e3o\"\n\n# Criando animais com composi\u00e7\u00e3o\npombo = AnimalComposicao(\"Pombo\")\npombo.adicionar_comportamento(Voo())\npombo.adicionar_comportamento(Alimentacao())\n\npinguim = AnimalComposicao(\"Pinguim\")\npinguim.adicionar_comportamento(SemVoo())\npinguim.adicionar_comportamento(Nado())\npinguim.adicionar_comportamento(Alimentacao())\n\nprint(f\"{pombo.nome}: {pombo.voar()}, {pombo.comer()}\")\n# Pombo: Voando alto, Comendo sementes\n\nprint(f\"{pinguim.nome}: {pinguim.voar()}, {pinguim.nadar()}, {pinguim.comer()}\")\n# Pinguim: N\u00e3o posso voar!, Nadando na \u00e1gua, Comendo sementes\n</code></pre>"},{"location":"trilhas/python/page-14/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre os seguintes t\u00f3picos:</p> <ul> <li>Heran\u00e7a: como criar hierarquias de classes e reutilizar c\u00f3digo</li> <li>Heran\u00e7a m\u00faltipla: como uma classe pode herdar de v\u00e1rias classes pai e como o MRO funciona</li> <li>O m\u00e9todo super(): como chamar m\u00e9todos da classe pai, inclusive em heran\u00e7a m\u00faltipla</li> <li>Polimorfismo: como usar a mesma interface para diferentes tipos de objetos</li> <li>Duck Typing: como o Python trata o polimorfismo atrav\u00e9s de comportamentos em vez de tipos</li> <li>Classes abstratas e interfaces: como definir contratos para classes</li> <li>Boas pr\u00e1ticas: como e quando usar heran\u00e7a e composi\u00e7\u00e3o corretamente</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o Python sobre heran\u00e7a</li> <li>M\u00e9todo Resolution Order (MRO)</li> <li>Documenta\u00e7\u00e3o sobre ABC (Abstract Base Classes)</li> <li>Real Python: Inheritance and Composition in Python</li> <li>Python Duck Typing</li> </ul>"},{"location":"trilhas/python/page-14/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, iremos explorar o t\u00f3pico de Testes em Python, aprendendo como verificar se nosso c\u00f3digo funciona corretamente e como garantir a qualidade do software.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para POO em Python</p>"},{"location":"trilhas/python/page-15/","title":"Testes em Python","text":""},{"location":"trilhas/python/page-15/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Testes s\u00e3o uma parte essencial do desenvolvimento de software, permitindo verificar se o c\u00f3digo funciona como esperado, identificar bugs precocemente e facilitar refatora\u00e7\u00f5es seguras. Em Python, existem diversas ferramentas e t\u00e9cnicas para escrever e executar testes, desde testes unit\u00e1rios simples at\u00e9 frameworks completos de automa\u00e7\u00e3o de testes.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Compreender a import\u00e2ncia dos testes em desenvolvimento de software</li> <li>Aprender a escrever testes unit\u00e1rios com pytest e unittest</li> <li>Entender os conceitos de fixtures, mocks e stubs</li> <li>Explorar t\u00e9cnicas de Test-Driven Development (TDD)</li> <li>Conhecer boas pr\u00e1ticas para escrever testes eficazes</li> <li>Implementar testes de integra\u00e7\u00e3o e testes funcionais</li> </ul>"},{"location":"trilhas/python/page-15/#importancia-dos-testes","title":"Import\u00e2ncia dos Testes","text":"<p>Os testes de software oferecem diversos benef\u00edcios:</p> <ul> <li>Detec\u00e7\u00e3o precoce de bugs: Identificar problemas antes que cheguem ao ambiente de produ\u00e7\u00e3o</li> <li>Documenta\u00e7\u00e3o viva: Testes bem escritos servem como documenta\u00e7\u00e3o sobre como o c\u00f3digo deve funcionar</li> <li>Facilitar refatora\u00e7\u00e3o: Alterar o c\u00f3digo com confian\u00e7a, sabendo que os testes detectar\u00e3o quebras</li> <li>Melhorar design: C\u00f3digo test\u00e1vel geralmente tem melhor design, com baixo acoplamento</li> <li>Reduzir d\u00e9bito t\u00e9cnico: Testes ajudam a manter a qualidade do c\u00f3digo ao longo do tempo</li> </ul>"},{"location":"trilhas/python/page-15/#tipos-de-testes","title":"Tipos de Testes","text":"Testes Unit\u00e1riosTestes de Integra\u00e7\u00e3oTestes Funcionais <pre><code># Testes unit\u00e1rios verificam o comportamento de unidades individuais de c\u00f3digo\n\n# Fun\u00e7\u00e3o a ser testada\ndef calcular_desconto(valor, percentual):\n    \"\"\"Calcula desconto baseado em um percentual.\"\"\"\n    if percentual &lt; 0 or percentual &gt; 100:\n        raise ValueError(\"Percentual deve estar entre 0 e 100\")\n\n    return valor * (percentual / 100)\n\n# Teste unit\u00e1rio usando pytest\ndef test_calcular_desconto():\n    # Casos normais\n    assert calcular_desconto(100, 10) == 10.0\n    assert calcular_desconto(200, 5) == 10.0\n    assert calcular_desconto(100, 0) == 0.0\n\n    # Valor Zero\n    assert calcular_desconto(0, 10) == 0.0\n\n    # Casos de erro\n    import pytest\n    with pytest.raises(ValueError):\n        calcular_desconto(100, -10)\n\n    with pytest.raises(ValueError):\n        calcular_desconto(100, 110)\n\n# Para executar: pytest nome_do_arquivo.py\n</code></pre> <pre><code># Testes de integra\u00e7\u00e3o verificam como componentes funcionam juntos\n\n# Exemplo: Sistema de autentica\u00e7\u00e3o e banco de dados\nclass BancoDados:\n    def __init__(self):\n        self.usuarios = {}\n\n    def salvar_usuario(self, usuario_id, dados):\n        self.usuarios[usuario_id] = dados\n        return True\n\n    def buscar_usuario(self, usuario_id):\n        return self.usuarios.get(usuario_id)\n\nclass Autenticacao:\n    def __init__(self, banco_dados):\n        self.banco_dados = banco_dados\n\n    def registrar(self, usuario_id, senha):\n        # Simula\u00e7\u00e3o de hash\n        senha_hash = senha + \"_hash\"\n        return self.banco_dados.salvar_usuario(usuario_id, {\n            'senha_hash': senha_hash,\n            'tentativas': 0\n        })\n\n    def autenticar(self, usuario_id, senha):\n        dados = self.banco_dados.buscar_usuario(usuario_id)\n        if not dados:\n            return False\n\n        senha_hash = senha + \"_hash\"\n        if dados['senha_hash'] == senha_hash:\n            dados['tentativas'] = 0\n            self.banco_dados.salvar_usuario(usuario_id, dados)\n            return True\n        else:\n            dados['tentativas'] += 1\n            self.banco_dados.salvar_usuario(usuario_id, dados)\n            return False\n\n# Teste de integra\u00e7\u00e3o\ndef test_integracao_autenticacao_banco():\n    # Setup\n    db = BancoDados()\n    auth = Autenticacao(db)\n\n    # Registro de usu\u00e1rio\n    assert auth.registrar(\"user1\", \"senha123\")\n\n    # Autentica\u00e7\u00e3o bem-sucedida\n    assert auth.autenticar(\"user1\", \"senha123\")\n\n    # Autentica\u00e7\u00e3o falha\n    assert not auth.autenticar(\"user1\", \"senha_errada\")\n\n    # Verificar tentativas ap\u00f3s falha\n    assert db.buscar_usuario(\"user1\")['tentativas'] == 1\n</code></pre> <pre><code># Testes funcionais verificam se o sistema funciona de acordo com os requisitos\n\n# Exemplo: API de calculadora\nclass CalculadoraAPI:\n    def somar(self, a, b):\n        return a + b\n\n    def subtrair(self, a, b):\n        return a - b\n\n    def multiplicar(self, a, b):\n        return a * b\n\n    def dividir(self, a, b):\n        if b == 0:\n            raise ValueError(\"Divis\u00e3o por zero n\u00e3o permitida\")\n        return a / b\n\n# Teste funcional\ndef test_funcional_calculadora():\n    calc_api = CalculadoraAPI()\n\n    # Teste do fluxo completo\n    num1 = 10\n    num2 = 5\n\n    # Soma dois n\u00fameros\n    resultado = calc_api.somar(num1, num2)\n    assert resultado == 15\n\n    # Subtrai o segundo do resultado\n    resultado = calc_api.subtrair(resultado, num2)\n    assert resultado == 10\n\n    # Multiplica por 2\n    resultado = calc_api.multiplicar(resultado, 2)\n    assert resultado == 20\n\n    # Divide por 4\n    resultado = calc_api.dividir(resultado, 4)\n    assert resultado == 5\n\n    # Verifica erro de divis\u00e3o por zero\n    import pytest\n    with pytest.raises(ValueError):\n        calc_api.dividir(resultado, 0)\n</code></pre>"},{"location":"trilhas/python/page-15/#introducao-ao-pytest","title":"Introdu\u00e7\u00e3o ao pytest","text":"<p>O pytest \u00e9 um dos frameworks de teste mais populares em Python, com sintaxe simples e recursos poderosos.</p> Instala\u00e7\u00e3o e Configura\u00e7\u00e3oAsser\u00e7\u00f5es em pytestFixturesParametriza\u00e7\u00e3o de Testes <pre><code># Instala\u00e7\u00e3o via pip\n# pip install pytest\n\n# Criando arquivo de teste\n# Os arquivos devem seguir o padr\u00e3o test_*.py ou *_test.py\n\n# Exemplo de arquivo test_exemplo.py:\ndef soma(a, b):\n    return a + b\n\ndef test_soma():\n    assert soma(1, 2) == 3\n    assert soma(0, 0) == 0\n    assert soma(-1, 1) == 0\n\n# Para executar:\n# pytest test_exemplo.py\n\n# Executar com detalhes:\n# pytest test_exemplo.py -v\n\n# Executar em modo de falha r\u00e1pida (para ao primeiro erro):\n# pytest test_exemplo.py -xvs\n</code></pre> <pre><code>def test_assetrcoes_basicas():\n    # Compara\u00e7\u00f5es b\u00e1sicas\n    assert 1 + 1 == 2\n    assert 3 - 1 != 1\n    assert \"abc\" == \"abc\"\n\n    # Operadores de compara\u00e7\u00e3o\n    assert 5 &gt; 3\n    assert 5 &gt;= 5\n    assert 3 &lt; 5\n    assert 3 &lt;= 5\n\n    # Verifica\u00e7\u00e3o de verdadeiro/falso\n    assert True\n    assert not False\n\n    # Verifica\u00e7\u00e3o de identidade (is / is not)\n    x = [1, 2, 3]\n    y = x  # Mesma refer\u00eancia\n    z = [1, 2, 3]  # Refer\u00eancia diferente, mesmo conte\u00fado\n\n    assert x is y\n    assert x is not z\n\n    # Verifica\u00e7\u00e3o de conte\u00fado (in / not in)\n    assert 2 in x\n    assert 5 not in x\n    assert \"a\" in \"abc\"\n\n    # Verifica\u00e7\u00e3o de exce\u00e7\u00f5es\n    import pytest\n    with pytest.raises(ZeroDivisionError):\n        1 / 0\n\n    # Verifica\u00e7\u00e3o de substrings\n    assert \"python\" in \"Python \u00e9 uma linguagem\".lower()\n\n# Quando um teste falha, pytest mostra uma explica\u00e7\u00e3o detalhada\ndef test_assetrcao_falha():\n    a = 5\n    b = 10\n    assert a &gt; b, f\"Esperado que {a} fosse maior que {b}\"\n    # Falha com: AssertionError: Esperado que 5 fosse maior que 10\n</code></pre> <pre><code>import pytest\n\n# Fixtures s\u00e3o fun\u00e7\u00f5es que fornecem dados ou estado para testes\n\n@pytest.fixture\ndef usuario_exemplo():\n    \"\"\"Retorna um dicion\u00e1rio de usu\u00e1rio para testes.\"\"\"\n    return {\n        'id': 1,\n        'nome': 'Jo\u00e3o Silva',\n        'email': 'joao@exemplo.com',\n        'ativo': True\n    }\n\n@pytest.fixture\ndef banco_dados_teste():\n    \"\"\"Cria um banco de dados tempor\u00e1rio para testes.\"\"\"\n    # Setup - prepara\u00e7\u00e3o antes do teste\n    db = {'usuarios': {}}\n\n    # Retorna o banco para o teste usar\n    yield db\n\n    # Teardown - limpeza ap\u00f3s o teste\n    db.clear()\n\n# Usando as fixtures nos testes\ndef test_usuario_ativo(usuario_exemplo):\n    assert usuario_exemplo['ativo'] is True\n\ndef test_adicionar_usuario(banco_dados_teste, usuario_exemplo):\n    # Adiciona um usu\u00e1rio\n    banco_dados_teste['usuarios'][usuario_exemplo['id']] = usuario_exemplo\n\n    # Verifica se foi adicionado\n    assert len(banco_dados_teste['usuarios']) == 1\n    assert banco_dados_teste['usuarios'][1]['nome'] == 'Jo\u00e3o Silva'\n\n# Fixtures com escopo\n@pytest.fixture(scope=\"module\")\ndef conexao_banco():\n    \"\"\"Uma conex\u00e3o de banco que dura todo o m\u00f3dulo de teste.\"\"\"\n    print(\"\\nAbrindo conex\u00e3o com o banco...\")\n    conexao = {\"status\": \"conectado\"}\n\n    yield conexao\n\n    print(\"\\nFechando conex\u00e3o com o banco...\")\n    conexao[\"status\"] = \"desconectado\"\n\ndef test_consulta_1(conexao_banco):\n    assert conexao_banco[\"status\"] == \"conectado\"\n    print(\"Executando consulta 1\")\n\ndef test_consulta_2(conexao_banco):\n    assert conexao_banco[\"status\"] == \"conectado\"\n    print(\"Executando consulta 2\")\n</code></pre> <pre><code>import pytest\n\n# Fun\u00e7\u00e3o para verificar se um n\u00famero \u00e9 primo\ndef is_primo(n):\n    \"\"\"Verifica se um n\u00famero \u00e9 primo.\"\"\"\n    if n &lt;= 1:\n        return False\n    if n &lt;= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i &lt;= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n\n# Teste parametrizado\n@pytest.mark.parametrize(\"numero,esperado\", [\n    (1, False),    # 1 n\u00e3o \u00e9 primo\n    (2, True),     # 2 \u00e9 primo\n    (3, True),     # 3 \u00e9 primo\n    (4, False),    # 4 n\u00e3o \u00e9 primo\n    (5, True),     # 5 \u00e9 primo\n    (9, False),    # 9 n\u00e3o \u00e9 primo\n    (11, True),    # 11 \u00e9 primo\n    (15, False),   # 15 n\u00e3o \u00e9 primo\n    (17, True),    # 17 \u00e9 primo\n    (25, False),   # 25 n\u00e3o \u00e9 primo\n    (97, True),    # 97 \u00e9 primo\n])\ndef test_is_primo(numero, esperado):\n    assert is_primo(numero) == esperado\n\n# Parametriza\u00e7\u00e3o com IDs\n@pytest.mark.parametrize(\"entrada,esperado\", [\n    (\"python\", \"PYTHON\"),\n    (\"abc\", \"ABC\"),\n    (\"123\", \"123\"),\n    (\"\", \"\"),\n], ids=[\"palavra\", \"letras\", \"numeros\", \"vazio\"])\ndef test_maiusculo(entrada, esperado):\n    assert entrada.upper() == esperado\n\n# Multiplos par\u00e2metros\n@pytest.mark.parametrize(\"x\", [1, 2])\n@pytest.mark.parametrize(\"y\", [3, 4])\ndef test_multiplicacao(x, y):\n    # Vai executar para todas as combina\u00e7\u00f5es: (1,3), (1,4), (2,3), (2,4)\n    print(f\"Testando {x} * {y}\")\n    assert x * y == x * y\n</code></pre>"},{"location":"trilhas/python/page-15/#mocks-e-patching","title":"Mocks e Patching","text":"<p>Mocks s\u00e3o objetos que simulam o comportamento de objetos reais de forma controlada, permitindo testar c\u00f3digo que depende de componentes externos como APIs, bancos de dados ou fun\u00e7\u00f5es complexas.</p> Usando unittest.mockMockando Depend\u00eanciasSimulando Exce\u00e7\u00f5esMock Spy <pre><code>from unittest import mock\nimport requests\n\n# Fun\u00e7\u00e3o que usa uma API externa\ndef buscar_usuario(id):\n    \"\"\"Busca um usu\u00e1rio em uma API externa pelo ID.\"\"\"\n    response = requests.get(f\"https://api.exemplo.com/usuarios/{id}\")\n    if response.status_code == 200:\n        return response.json()\n    return None\n\n# Fun\u00e7\u00e3o para exibir informa\u00e7\u00f5es do usu\u00e1rio\ndef exibir_nome_usuario(id):\n    usuario = buscar_usuario(id)\n    if usuario:\n        return f\"Nome: {usuario['nome']}\"\n    return \"Usu\u00e1rio n\u00e3o encontrado\"\n\n# Testando com mock\ndef test_exibir_nome_usuario():\n    # Cria um mock para substituir a fun\u00e7\u00e3o buscar_usuario\n    with mock.patch('__main__.buscar_usuario') as mock_buscar:\n        # Configura o comportamento do mock\n        mock_buscar.return_value = {'id': 1, 'nome': 'Ana Silva'}\n\n        # Testa a fun\u00e7\u00e3o que usa a fun\u00e7\u00e3o mockada\n        resultado = exibir_nome_usuario(1)\n        assert resultado == \"Nome: Ana Silva\"\n\n        # Verifica se o mock foi chamado corretamente\n        mock_buscar.assert_called_once_with(1)\n\n    # Mock com retorno diferente\n    with mock.patch('__main__.buscar_usuario') as mock_buscar:\n        mock_buscar.return_value = None\n\n        resultado = exibir_nome_usuario(999)\n        assert resultado == \"Usu\u00e1rio n\u00e3o encontrado\"\n</code></pre> <pre><code>import pytest\nfrom unittest import mock\nimport requests\n\n# Classe que depende de requests para buscar dados\nclass ClienteAPI:\n    def __init__(self, base_url):\n        self.base_url = base_url\n\n    def obter_usuario(self, id):\n        url = f\"{self.base_url}/usuarios/{id}\"\n        response = requests.get(url)\n        response.raise_for_status()  # Lan\u00e7a exce\u00e7\u00e3o para status codes de erro\n        return response.json()\n\n    def criar_usuario(self, nome, email):\n        url = f\"{self.base_url}/usuarios\"\n        data = {\"nome\": nome, \"email\": email}\n        response = requests.post(url, json=data)\n        response.raise_for_status()\n        return response.json()\n\n# Teste com mock\ndef test_obter_usuario():\n    cliente = ClienteAPI(\"https://api.exemplo.com\")\n\n    # Criar um objeto mock que simula a resposta de requests.get\n    mock_resposta = mock.Mock()\n    mock_resposta.json.return_value = {\"id\": 1, \"nome\": \"Jo\u00e3o\", \"email\": \"joao@exemplo.com\"}\n    mock_resposta.raise_for_status.return_value = None\n\n    # Usa patch para substituir requests.get pelo mock\n    with mock.patch('requests.get', return_value=mock_resposta) as mock_get:\n        # Chama o m\u00e9todo que usa requests.get\n        resultado = cliente.obter_usuario(1)\n\n        # Verifica se requests.get foi chamado com a URL correta\n        mock_get.assert_called_once_with(\"https://api.exemplo.com/usuarios/1\")\n\n        # Verifica se o resultado est\u00e1 correto\n        assert resultado == {\"id\": 1, \"nome\": \"Jo\u00e3o\", \"email\": \"joao@exemplo.com\"}\n\n# Usando pytest.fixture para reutilizar mocks\n@pytest.fixture\ndef mock_requests():\n    with mock.patch('requests.get') as mock_get, \\\n         mock.patch('requests.post') as mock_post:\n\n        # Configura o comportamento padr\u00e3o\n        mock_response = mock.Mock()\n        mock_response.json.return_value = {}\n        mock_response.raise_for_status.return_value = None\n\n        mock_get.return_value = mock_response\n        mock_post.return_value = mock_response\n\n        yield {\n            'get': mock_get,\n            'post': mock_post,\n            'response': mock_response\n        }\n\ndef test_criar_usuario(mock_requests):\n    cliente = ClienteAPI(\"https://api.exemplo.com\")\n\n    # Configura o mock para este teste espec\u00edfico\n    mock_requests['response'].json.return_value = {\n        \"id\": 2,\n        \"nome\": \"Maria\",\n        \"email\": \"maria@exemplo.com\"\n    }\n\n    # Executa o m\u00e9todo a ser testado\n    resultado = cliente.criar_usuario(\"Maria\", \"maria@exemplo.com\")\n\n    # Verifica se requests.post foi chamado corretamente\n    mock_requests['post'].assert_called_once_with(\n        \"https://api.exemplo.com/usuarios\",\n        json={\"nome\": \"Maria\", \"email\": \"maria@exemplo.com\"}\n    )\n\n    # Verifica o resultado\n    assert resultado[\"nome\"] == \"Maria\"\n    assert resultado[\"email\"] == \"maria@exemplo.com\"\n</code></pre> <pre><code>from unittest import mock\nimport requests\nimport pytest\n\n# Fun\u00e7\u00e3o que lida com erros de API\ndef buscar_dados_seguros(url):\n    \"\"\"Busca dados e lida com erros de forma segura.\"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.Timeout:\n        return {\"erro\": \"Tempo esgotado\"}\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 404:\n            return {\"erro\": \"Recurso n\u00e3o encontrado\"}\n        return {\"erro\": f\"Erro HTTP: {e.response.status_code}\"}\n    except Exception as e:\n        return {\"erro\": f\"Erro desconhecido: {str(e)}\"}\n\n# Testando diferentes cen\u00e1rios de erro\ndef test_buscar_dados_timeout():\n    with mock.patch('requests.get') as mock_get:\n        # Simula um timeout\n        mock_get.side_effect = requests.exceptions.Timeout(\"Tempo esgotado\")\n\n        resultado = buscar_dados_seguros(\"https://api.exemplo.com/dados\")\n        assert resultado == {\"erro\": \"Tempo esgotado\"}\n\ndef test_buscar_dados_404():\n    with mock.patch('requests.get') as mock_get:\n        # Cria um mock para a resposta e a exce\u00e7\u00e3o\n        mock_response = mock.Mock()\n        mock_response.status_code = 404\n\n        # Cria a exce\u00e7\u00e3o com a resposta mockada\n        mock_erro = requests.exceptions.HTTPError(\"404 Not Found\")\n        mock_erro.response = mock_response\n\n        # Faz o mock.get lan\u00e7ar a exce\u00e7\u00e3o quando chamado\n        mock_get.side_effect = mock_erro\n\n        resultado = buscar_dados_seguros(\"https://api.exemplo.com/dados\")\n        assert resultado == {\"erro\": \"Recurso n\u00e3o encontrado\"}\n\ndef test_buscar_dados_sucesso():\n    with mock.patch('requests.get') as mock_get:\n        # Simula uma resposta bem-sucedida\n        mock_response = mock.Mock()\n        mock_response.json.return_value = {\"nome\": \"Teste\", \"valor\": 42}\n        mock_response.raise_for_status.return_value = None\n        mock_get.return_value = mock_response\n\n        resultado = buscar_dados_seguros(\"https://api.exemplo.com/dados\")\n        assert resultado == {\"nome\": \"Teste\", \"valor\": 42}\n</code></pre> <pre><code>from unittest.mock import Mock, patch, call\n\n# Classe para ser \"espiada\"\nclass Calculadora:\n    def somar(self, a, b):\n        return a + b\n\n    def operacao_complexa(self, x, y, z):\n        # Chamamos somar internamente\n        resultado = self.somar(x, y)\n        return resultado * z\n\n# Teste usando spy (observando chamadas de m\u00e9todo reais)\ndef test_spy_metodo():\n    calculadora = Calculadora()\n\n    # Substitui o m\u00e9todo somar por um spy\n    # Isso permite monitorar chamadas, mas ainda executar o m\u00e9todo original\n    with patch.object(calculadora, 'somar', wraps=calculadora.somar) as spy_somar:\n        # Chamamos o m\u00e9todo que usa somar internamente\n        resultado = calculadora.operacao_complexa(3, 4, 2)\n\n        # Verificamos se o resultado est\u00e1 correto\n        assert resultado == 14  # (3 + 4) * 2\n\n        # Verificamos se o m\u00e9todo somar foi chamado corretamente\n        spy_somar.assert_called_once_with(3, 4)\n\n    # Espionando m\u00faltiplas chamadas\n    with patch.object(calculadora, 'somar', wraps=calculadora.somar) as spy_somar:\n        calculadora.somar(1, 2)\n        calculadora.somar(3, 4)\n        calculadora.somar(5, 6)\n\n        # Verificando todas as chamadas\n        assert spy_somar.call_count == 3\n\n        # Verificando argumentos de cada chamada\n        expected_calls = [call(1, 2), call(3, 4), call(5, 6)]\n        assert spy_somar.call_args_list == expected_calls\n</code></pre>"},{"location":"trilhas/python/page-15/#testes-em-frameworks-web","title":"Testes em Frameworks Web","text":"<p>Python \u00e9 muito usado para desenvolvimento web, e os frameworks possuem ferramentas espec\u00edficas para testes.</p> Testes com FlaskTestes com Django <pre><code>import pytest\nfrom flask import Flask, jsonify, request\n\n# Aplica\u00e7\u00e3o Flask simples\napp = Flask(__name__)\n\n# Banco de dados \"fake\" para o exemplo\nTAREFAS = {\n    1: {\"id\": 1, \"titulo\": \"Estudar Python\", \"concluida\": False},\n    2: {\"id\": 2, \"titulo\": \"Fazer exerc\u00edcios\", \"concluida\": True}\n}\n\n@app.route('/tarefas', methods=['GET'])\ndef listar_tarefas():\n    return jsonify(list(TAREFAS.values()))\n\n@app.route('/tarefas/&lt;int:tarefa_id&gt;', methods=['GET'])\ndef obter_tarefa(tarefa_id):\n    if tarefa_id not in TAREFAS:\n        return jsonify({\"erro\": \"Tarefa n\u00e3o encontrada\"}), 404\n    return jsonify(TAREFAS[tarefa_id])\n\n@app.route('/tarefas', methods=['POST'])\ndef criar_tarefa():\n    dados = request.json\n    if not dados ou 'titulo' not in dados:\n        return jsonify({\"erro\": \"T\u00edtulo \u00e9 obrigat\u00f3rio\"}), 400\n\n    novo_id = max(TAREFAS.keys(), default=0) + 1\n    nova_tarefa = {\n        \"id\": novo_id,\n        \"titulo\": dados[\"titulo\"],\n        \"concluida\": dados.get(\"concluida\", False)\n    }\n    TAREFAS[novo_id] = nova_tarefa\n    return jsonify(nova_tarefa), 201\n\n# Fixture para criar um cliente de teste\n@pytest.fixture\ndef cliente():\n    # Configura a aplica\u00e7\u00e3o para testes\n    app.config['TESTING'] = True\n    with app.test_client() as cliente:\n        yield cliente\n\n# Fixture para garantir que os dados de teste sejam consistentes\n@pytest.fixture\ndef banco_reset():\n    # Salva o estado original\n    original = TAREFAS.copy()\n    yield\n    # Restaura o estado original ap\u00f3s o teste\n    TAREFAS.clear()\n    TAREFAS.update(original)\n\n# Testes para as rotas\ndef test_listar_tarefas(cliente, banco_reset):\n    resposta = cliente.get('/tarefas')\n    dados = resposta.get_json()\n\n    assert resposta.status_code == 200\n    assert len(dados) == 2\n    assert dados[0][\"titulo\"] == \"Estudar Python\"\n    assert dados[1][\"titulo\"] == \"Fazer exerc\u00edcios\"\n\ndef test_obter_tarefa_existente(cliente, banco_reset):\n    resposta = cliente.get('/tarefas/1')\n    dados = resposta.get_json()\n\n    assert resposta.status_code == 200\n    assert dados[\"id\"] == 1\n    assert dados[\"titulo\"] == \"Estudar Python\"\n\ndef test_obter_tarefa_inexistente(cliente, banco_reset):\n    resposta = cliente.get('/tarefas/999')\n    dados = resposta.get_json()\n\n    assert resposta.status_code == 404\n    assert \"erro\" in dados\n\ndef test_criar_tarefa(cliente, banco_reset):\n    nova_tarefa = {\"titulo\": \"Nova Tarefa\", \"concluida\": True}\n    resposta = cliente.post('/tarefas', json=nova_tarefa)\n    dados = resposta.get_json()\n\n    assert resposta.status_code == 201\n    assert dados[\"titulo\"] == \"Nova Tarefa\"\n    assert dados[\"concluida\"] is True\n    assert \"id\" in dados\n\n    # Verifica se a tarefa foi realmente adicionada\n    resposta_lista = cliente.get('/tarefas')\n    todas_tarefas = resposta_lista.get_json()\n    assert len(todas_tarefas) == 3\n</code></pre> <pre><code># Django usa seu pr\u00f3prio framework de teste baseado em unittest\n\n# models.py\nfrom django.db import models\n\nclass Produto(models.Model):\n    nome = models.CharField(max_length=100)\n    preco = models.DecimalField(max_digits=10, decimal_places=2)\n    estoque = models.IntegerField(default=0)\n\n    def esta_disponivel(self):\n        return self.estoque &gt; 0\n\n    def __str__(self):\n        return self.nome\n\n# views.py\nfrom django.shortcuts import get_object_or_404\nfrom django.http import JsonResponse\nfrom .models import Produto\n\ndef listar_produtos(request):\n    produtos = Produto.objects.all()\n    dados = [{\"id\": p.id, \"nome\": p.nome, \"preco\": p.preco} for p in produtos]\n    return JsonResponse(dados, safe=False)\n\ndef detalhe_produto(request, produto_id):\n    produto = get_object_or_404(Produto, pk=produto_id)\n    return JsonResponse({\n        \"id\": produto.id,\n        \"nome\": produto.nome,\n        \"preco\": float(produto.preco),\n        \"estoque\": produto.estoque,\n        \"disponivel\": produto.esta_disponivel()\n    })\n\n# tests.py\nfrom django.test import TestCase, Client\nfrom django.urls import reverse\nfrom .models import Produto\nimport json\n\nclass ProdutoModelTest(TestCase):\n    def setUp(self):\n        # Este m\u00e9todo \u00e9 executado antes de cada teste\n        Produto.objects.create(nome=\"Laptop\", preco=\"1999.99\", estoque=10)\n        Produto.objects.create(nome=\"Teclado\", preco=\"99.99\", estoque=0)\n\n    def test_produto_disponibilidade(self):\n        \"\"\"Testa o m\u00e9todo esta_disponivel()\"\"\"\n        laptop = Produto.objects.get(nome=\"Laptop\")\n        teclado = Produto.objects.get(nome=\"Teclado\")\n\n        self.assertTrue(laptop.esta_disponivel())\n        self.assertFalse(teclado.esta_disponivel())\n\n    def test_produto_string(self):\n        \"\"\"Testa a representa\u00e7\u00e3o de string do produto\"\"\"\n        laptop = Produto.objects.get(nome=\"Laptop\")\n        self.assertEqual(str(laptop), \"Laptop\")\n\nclass ProdutoViewsTest(TestCase):\n    def setUp(self):\n        self.client = Client()\n        Produto.objects.create(nome=\"Laptop\", preco=\"1999.99\", estoque=10)\n        Produto.objects.create(nome=\"Teclado\", preco=\"99.99\", estoque=0)\n\n    def test_listar_produtos(self):\n        \"\"\"Testa a view de listar produtos\"\"\"\n        url = reverse('listar_produtos')  # Usa as URLs nomeadas\n        response = self.client.get(url)\n\n        self.assertEqual(response.status_code, 200)\n\n        data = json.loads(response.content)\n        self.assertEqual(len(data), 2)\n\n    def test_detalhe_produto(self):\n        \"\"\"Testa a view de detalhe do produto\"\"\"\n        laptop = Produto.objects.get(nome=\"Laptop\")\n        url = reverse('detalhe_produto', args=[laptop.id])\n        response = self.client.get(url)\n\n        self.assertEqual(response.status_code, 200)\n\n        data = json.loads(response.content)\n        self.assertEqual(data['nome'], \"Laptop\")\n        self.assertEqual(data['preco'], 1999.99)\n        self.assertEqual(data['estoque'], 10)\n        self.assertTrue(data['disponivel'])\n\n    def test_produto_nao_encontrado(self):\n        \"\"\"Testa a resposta para um produto que n\u00e3o existe\"\"\"\n        url = reverse('detalhe_produto', args=[999])\n        response = self.client.get(url)\n\n        self.assertEqual(response.status_code, 404)\n</code></pre>"},{"location":"trilhas/python/page-15/#test-driven-development-tdd","title":"Test-Driven Development (TDD)","text":"<p>O TDD \u00e9 uma abordagem de desenvolvimento em que voc\u00ea escreve testes antes de implementar o c\u00f3digo.</p> Ciclo TDDExemplo Pr\u00e1tico: Validador de Senhas <pre><code># O ciclo TDD consiste em: Red -&gt; Green -&gt; Refactor\n\n# 1. RED: Escreva um teste que falha\n# Arquivo: test_calculadora.py\ndef test_divisao():\n    from calculadora import dividir\n    assert dividir(10, 2) == 5\n    assert dividir(8, 4) == 2\n    assert dividir(5, 2) == 2.5\n\n    # Verifica se lan\u00e7a a exce\u00e7\u00e3o correta\n    import pytest\n    with pytest.raises(ValueError, match=\"Divis\u00e3o por zero\"):\n        dividir(10, 0)\n\n# Se executarmos agora: pytest test_calculadora.py\n# O teste falhar\u00e1 porque a fun\u00e7\u00e3o dividir n\u00e3o existe\n\n# 2. GREEN: Implementar o c\u00f3digo m\u00ednimo para passar no teste\n# Arquivo: calculadora.py\ndef dividir(a, b):\n    if b == 0:\n        raise ValueError(\"Divis\u00e3o por zero\")\n    return a / b\n\n# Agora o teste passar\u00e1\n\n# 3. REFACTOR: Melhorar o c\u00f3digo mantendo os testes passando\n# Arquivo: calculadora.py\ndef dividir(a, b):\n    \"\"\"\n    Divide dois n\u00fameros.\n\n    Args:\n        a: Numerador\n        b: Denominador\n\n    Returns:\n        O resultado da divis\u00e3o a/b\n\n    Raises:\n        ValueError: Se b for zero\n    \"\"\"\n    if b == 0:\n        raise ValueError(\"Divis\u00e3o por zero\")\n    return a / b\n\n# Repetir o ciclo para cada nova funcionalidade\n</code></pre> <pre><code># Vamos implementar um validador de senhas usando TDD\n\n# Requisitos:\n# 1. A senha deve ter pelo menos 8 caracteres\n# 2. A senha deve conter pelo menos uma letra mai\u00fascula\n# 3. A senha deve conter pelo menos um n\u00famero\n# 4. A senha deve conter pelo menos um caractere especial\n\n# Passo 1: Escrever o teste\n# Arquivo: test_validador_senha.py\n\nimport pytest\n\ndef test_validador_senha():\n    from validador_senha import validar_senha\n\n    # Senhas v\u00e1lidas\n    assert validar_senha(\"Abc123!@\") == True\n    assert validar_senha(\"Senha123!\") == True\n\n    # Senha curta\n    assert validar_senha(\"Ab1!\") == False\n\n    # Sem letra mai\u00fascula\n    assert validar_senha(\"abc123!@\") == False\n\n    # Sem n\u00famero\n    assert validar_senha(\"Abcdef!@\") == False\n\n    # Sem caractere especial\n    assert validar_senha(\"Abcde123\") == False\n\n# Passo 2: Implementar o c\u00f3digo m\u00ednimo para passar\n# Arquivo: validador_senha.py\n\ndef validar_senha(senha):\n    # Verifica o tamanho m\u00ednimo\n    if len(senha) &lt; 8:\n        return False\n\n    # Verifica se tem pelo menos uma letra mai\u00fascula\n    if not any(c.isupper() for c in senha):\n        return False\n\n    # Verifica se tem pelo menos um n\u00famero\n    if not any(c.isdigit() for c in senha):\n        return False\n\n    # Verifica se tem pelo menos um caractere especial\n    caracteres_especiais = \"!@#$%^&amp;*()-_=+[]{}|;:'\\\",.&lt;&gt;/?`~\"\n    if not any(c in caracteres_especiais for c in senha):\n        return False\n\n    return True\n\n# Passo 3: Refatorar\n# Arquivo: validador_senha.py\n\ndef validar_senha(senha):\n    \"\"\"\n    Valida uma senha de acordo com os seguintes crit\u00e9rios:\n    - Pelo menos 8 caracteres\n    - Pelo menos uma letra mai\u00fascula\n    - Pelo menos um n\u00famero\n    - Pelo menos um caractere especial\n\n    Args:\n        senha: A senha a ser validada\n\n    Returns:\n        bool: True se a senha \u00e9 v\u00e1lida, False caso contr\u00e1rio\n    \"\"\"\n    if len(senha) &lt; 8:\n        return False\n\n    tem_maiuscula = False\n    tem_numero = False\n    tem_especial = False\n    caracteres_especiais = \"!@#$%^&amp;*()-_=+[]{}|;:'\\\",.&lt;&gt;/?`~\"\n\n    for c in senha:\n        if c.isupper():\n            tem_maiuscula = True\n        if c.isdigit():\n            tem_numero = True\n        if c in caracteres_especiais:\n            tem_especial = True\n\n    return tem_maiuscula and tem_numero and tem_especial\n\n# Ou uma vers\u00e3o mais limpa usando fun\u00e7\u00f5es mais espec\u00edficas\n\ndef validar_senha(senha):\n    \"\"\"Valida uma senha de acordo com os crit\u00e9rios de seguran\u00e7a.\"\"\"\n    return (len(senha) &gt;= 8 and\n            contem_maiuscula(senha) and\n            contem_numero(senha) and\n            contem_especial(senha))\n\ndef contem_maiuscula(senha):\n    \"\"\"Verifica se a senha cont\u00e9m pelo menos uma letra mai\u00fascula.\"\"\"\n    return any(c.isupper() for c in senha)\n\ndef contem_numero(senha):\n    \"\"\"Verifica se a senha cont\u00e9m pelo menos um n\u00famero.\"\"\"\n    return any(c.isdigit() for c in senha)\n\ndef contem_especial(senha):\n    \"\"\"Verifica se a senha cont\u00e9m pelo menos um caractere especial.\"\"\"\n    caracteres_especiais = \"!@#$%^&amp;*()-_=+[]{}|;:'\\\",.&lt;&gt;/?`~\"\n    return any(c in caracteres_especiais for c in senha)\n</code></pre>"},{"location":"trilhas/python/page-15/#cobertura-de-testes","title":"Cobertura de Testes","text":"<p>A cobertura de testes mede quanto do seu c\u00f3digo est\u00e1 sendo exercitado pelos testes.</p> Usando pytest-covAn\u00e1lise de Cobertura <pre><code># Instalar pytest-cov\npip install pytest-cov\n\n# Executar testes com relat\u00f3rio de cobertura\npytest --cov=meu_pacote tests/\n\n# Sa\u00edda de exemplo:\n# Name                    Stmts   Miss  Cover\n# -------------------------------------------\n# meu_pacote/__init__.py      1      0   100%\n# meu_pacote/modulo_a.py     20      2    90%\n# meu_pacote/modulo_b.py     15      5    67%\n# -------------------------------------------\n# TOTAL                      36      7    81%\n\n# Gerar relat\u00f3rio HTML detalhado\npytest --cov=meu_pacote --cov-report=html tests/\n# Isso cria uma pasta 'htmlcov' com um relat\u00f3rio naveg\u00e1vel\n</code></pre> <pre><code># Exemplo de c\u00f3digo que precisa de testes\n\ndef processar_dados(dados):\n    \"\"\"Processa uma lista de dados.\"\"\"\n    if not dados:\n        return []\n\n    resultado = []\n    for item in dados:\n        if isinstance(item, str):\n            # Processa strings\n            if item.isdigit():\n                resultado.append(int(item))\n            else:\n                resultado.append(item.upper())\n        elif isinstance(item, (int, float)):\n            # Processa n\u00fameros\n            resultado.append(item * 2)\n        else:\n            # Ignora outros tipos\n            continue\n\n    return resultado\n\n# Testes incompletos (n\u00e3o cobrem todos os caminhos)\ndef test_processar_dados_incompleto():\n    assert processar_dados([]) == []\n    assert processar_dados([1, 2, 3]) == [2, 4, 6]\n    assert processar_dados([\"a\", \"b\"]) == [\"A\", \"B\"]\n\n# A cobertura mostrar\u00e1 que faltam testar:\n# - Strings que cont\u00eam n\u00fameros\n# - Tipos que n\u00e3o s\u00e3o strings nem n\u00fameros\n\n# Testes completos\ndef test_processar_dados_completo():\n    # Lista vazia\n    assert processar_dados([]) == []\n\n    # Processamento de n\u00fameros\n    assert processar_dados([1, 2, 3]) == [2, 4, 6]\n    assert processar_dados([1.5, 2.5]) == [3.0, 5.0]\n\n    # Processamento de strings\n    assert processar_dados([\"a\", \"b\"]) == [\"A\", \"B\"]\n\n    # Strings que s\u00e3o n\u00fameros\n    assert processar_dados([\"123\", \"456\"]) == [123, 456]\n\n    # Dados ignorados\n    assert processar_dados([None, {}, []]) == []\n\n    # Mistura de tipos\n    assert processar_dados([1, \"a\", \"123\", None]) == [2, \"A\", 123]\n</code></pre>"},{"location":"trilhas/python/page-15/#testes-em-aplicacoes-reais","title":"Testes em Aplica\u00e7\u00f5es Reais","text":"Estrutura de Diret\u00f3rioConfigura\u00e7\u00e3o de pytestExemplos de tests.pyTestes de Integra\u00e7\u00e3oExecutando Testes <pre><code>meu_projeto/\n\u251c\u2500\u2500 meu_pacote/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 modulo_a.py\n\u2502   \u251c\u2500\u2500 modulo_b.py\n\u2502   \u2514\u2500\u2500 subpacote/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 modulo_c.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_modulo_a.py\n\u2502   \u251c\u2500\u2500 test_modulo_b.py\n\u2502   \u2514\u2500\u2500 test_modulo_c.py\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 requirements-dev.txt\n\u2514\u2500\u2500 pytest.ini\n</code></pre> <pre><code># pytest.ini\n[pytest]\ntestpaths = tests\npython_files = test_*.py\npython_classes = Test*\npython_functions = test_*\n\n# Marcadores personalizados\nmarkers =\n    slow: Marca testes lentos\n    integration: Marca testes de integra\u00e7\u00e3o\n    api: Marca testes que usam APIs externas\n\n# Configura\u00e7\u00f5es de cobertura\naddopts = --cov=meu_pacote --cov-report=term --cov-report=html\n</code></pre> <pre><code># tests/test_modulo_a.py\nimport pytest\nfrom meu_pacote.modulo_a import funcao_a, ClasseA\n\n@pytest.fixture\ndef objeto_a():\n    return ClasseA(nome=\"Teste\")\n\ndef test_funcao_a():\n    assert funcao_a(10) == 20\n    assert funcao_a(0) == 0\n\n    with pytest.raises(ValueError):\n        funcao_a(-1)\n\ndef test_classe_a(objeto_a):\n    assert objeto_a.nome == \"Teste\"\n    assert objeto_a.metodo_a() == \"Teste\"\n\n@pytest.mark.slow\ndef test_operacao_lenta():\n    # Um teste que leva tempo\n    import time\n    time.sleep(0.1)\n    assert True\n\n@pytest.mark.parametrize(\"entrada,esperado\", [\n    (1, 2),\n    (2, 4),\n    (3, 6)\n])\ndef test_funcao_a_parametrizado(entrada, esperado):\n    assert funcao_a(entrada) == esperado\n</code></pre> <pre><code># tests/test_integracao.py\nimport pytest\nfrom meu_pacote.modulo_a import funcao_a\nfrom meu_pacote.modulo_b import funcao_b\n\n@pytest.mark.integration\ndef test_integracao_modulos():\n    # Teste que verifica a integra\u00e7\u00e3o entre m\u00f3dulos\n    resultado_a = funcao_a(10)\n    assert resultado_a == 20\n\n    resultado_b = funcao_b(resultado_a)\n    assert resultado_b == \"Valor: 20\"\n\n@pytest.mark.api\ndef test_api_externa(mocker):\n    # Teste que mockaria uma API externa\n    from meu_pacote.subpacote.modulo_c import buscar_dados\n\n    # Mock para a chamada de API\n    mock_response = mocker.patch('requests.get')\n    mock_response.return_value.json.return_value = {\"status\": \"ok\", \"data\": [1, 2, 3]}\n    mock_response.return_value.status_code = 200\n\n    # Testar a fun\u00e7\u00e3o que usa a API\n    result = buscar_dados(\"endpoint\")\n    assert result == [1, 2, 3]\n</code></pre> <pre><code># Executar todos os testes\npytest\n\n# Executar apenas testes r\u00e1pidos (excluir lentos)\npytest -m \"not slow\"\n\n# Executar apenas testes de integra\u00e7\u00e3o\npytest -m integration\n\n# Executar com sa\u00edda detalhada\npytest -v\n\n# Executar um arquivo espec\u00edfico\npytest tests/test_modulo_a.py\n\n# Executar um teste espec\u00edfico\npytest tests/test_modulo_a.py::test_funcao_a\n\n# Executar em modo debug\npytest --pdb\n\n# Gerar relat\u00f3rio XML para CI/CD\npytest --junitxml=report.xml\n</code></pre>"},{"location":"trilhas/python/page-15/#boas-praticas-de-teste","title":"Boas Pr\u00e1ticas de Teste","text":"Princ\u00edpios para Bons TestesPadr\u00e3o Arrange-Act-AssertFixtures Eficientes <pre><code># 1. Testes devem ser independentes\ndef test_independente_1():\n    # N\u00e3o deve depender de outros testes\n    # Nem de estado compartilhado\n    assert True\n\ndef test_independente_2():\n    # Deve funcionar mesmo se outros testes falharem\n    assert True\n\n# 2. Testes devem ser determin\u00edsticos\ndef test_determin\u00edstico():\n    # Deve dar o mesmo resultado em qualquer execu\u00e7\u00e3o\n    # Evite depend\u00eancias de tempo, ordem, ou recursos externos\n    resultado = 2 + 2\n    assert resultado == 4\n\n# 3. Testes devem ser r\u00e1pidos\ndef test_rapido():\n    # Testes devem executar rapidamente\n    # Se um teste \u00e9 lento, marque-o como tal\n    assert True\n\n# 4. Testes devem ser claros\ndef test_divisao_por_zero_deve_lancar_erro():\n    # Nome claro e descritivo\n    # Um teste por comportamento\n    import pytest\n    with pytest.raises(ZeroDivisionError):\n        1 / 0\n\n# 5. Testes devem ter boa cobertura\ndef calcular_area(largura, altura):\n    if largura &lt;= 0 ou altura &lt;= 0:\n        raise ValueError(\"Dimens\u00f5es devem ser positivas\")\n    return largura * altura\n\ndef test_calcular_area():\n    # Testar casos normais\n    assert calcular_area(2, 3) == 6\n    assert calcular_area(1, 1) == 1\n\n    # Testar valores limite\n    assert calcular_area(0.1, 0.1) == 0.01\n\n    # Testar exce\u00e7\u00f5es\n    import pytest\n    with pytest.raises(ValueError):\n        calcular_area(0, 5)\n    with pytest.raises(ValueError):\n        calcular_area(5, -1)\n</code></pre> <pre><code># O padr\u00e3o AAA organiza os testes em tr\u00eas partes: \n# - Arrange (Preparar)\n# - Act (Agir)\n# - Assert (Verificar)\n\ndef test_exemplo_aaa():\n    # Arrange - Preparar os dados e objetos\n    lista = [1, 2, 3, 4, 5]\n    valor_alvo = 3\n\n    # Act - Executar a opera\u00e7\u00e3o que est\u00e1 sendo testada\n    resultado = valor_alvo in lista\n\n    # Assert - Verificar se o resultado est\u00e1 correto\n    assert resultado == True\n\n# Exemplo com classe\nclass CarrinhoCompras:\n    def __init__(self):\n        self.itens = {}\n\n    def adicionar_item(self, produto, quantidade):\n        if produto em self.itens:\n            self.itens[produto] += quantidade\n        else:\n            self.itens[produto] = quantidade\n\n    def remover_item(self, produto, quantidade=None):\n        if produto not in self.itens:\n            return\n\n        if quantidade \u00e9 None ou quantidade &gt;= self.itens[produto]:\n            del self.itens[produto]\n        else:\n            self.itens[produto] -= quantidade\n\n    def total_itens(self):\n        return sum(self.itens.values())\n\ndef test_adicionar_item():\n    # Arrange\n    carrinho = CarrinhoCompras()\n\n    # Act\n    carrinho.adicionar_item(\"ma\u00e7a\", 3)\n\n    # Assert\n    assert \"ma\u00e7a\" em carrinho.itens\n    assert carrinho.itens[\"ma\u00e7a\"] == 3\n\ndef test_remover_item_completo():\n    # Arrange\n    carrinho = CarrinhoCompras()\n    carrinho.adicionar_item(\"ma\u00e7a\", 3)\n\n    # Act\n    carrinho.remover_item(\"ma\u00e7a\")\n\n    # Assert\n    assert \"ma\u00e7a\" n\u00e3o em carrinho.itens\n\ndef test_remover_item_parcial():\n    # Arrange\n    carrinho = CarrinhoCompras()\n    carrinho.adicionar_item(\"ma\u00e7a\", 3)\n\n    # Act\n    carrinho.remover_item(\"ma\u00e7a\", 2)\n\n    # Assert\n    assert carrinho.itens[\"ma\u00e7a\"] == 1\n</code></pre> <pre><code>import pytest\nimport time\n\n# Fixtures de diferentes escopos\n\n@pytest.fixture\ndef recurso_por_teste():\n    \"\"\"Esta fixture \u00e9 recreada para cada teste.\"\"\"\n    print(\"\\nCriando recurso por teste\")\n    return {\"valor\": 42}\n\n@pytest.fixture(scope=\"module\")\ndef recurso_por_modulo():\n    \"\"\"Esta fixture \u00e9 criada uma vez por m\u00f3dulo de teste.\"\"\"\n    print(\"\\nCriando recurso por m\u00f3dulo\")\n    return {\"contador\": 0}\n\n@pytest.fixture(scope=\"session\")\ndef recurso_por_sessao():\n    \"\"\"Esta fixture \u00e9 criada uma vez por sess\u00e3o de teste.\"\"\"\n    print(\"\\nCriando recurso por sess\u00e3o\")\n    start_time = time.time()\n    yield {\"tempo_inicio\": start_time}\n    print(f\"\\nTempo total da sess\u00e3o: {time.time() - start_time:.2f} segundos\")\n\n# Testes usando as fixtures\ndef test_um(recurso_por_teste, recurso_por_modulo, recurso_por_sessao):\n    assert recurso_por_teste[\"valor\"] == 42\n    recurso_por_modulo[\"contador\"] += 1\n    assert recurso_por_modulo[\"contador\"] == 1\n\ndef test_dois(recurso_por_teste, recurso_por_modulo, recurso_por_sessao):\n    assert recurso_por_teste[\"valor\"] == 42\n    recurso_por_modulo[\"contador\"] += 1\n    assert recurso_por_modulo[\"contador\"] == 2\n\n# Fixtures parametrizadas\n@pytest.fixture(params=[1, 2, 3])\ndef valor_teste(request):\n    \"\"\"Esta fixture gera tr\u00eas testes com valores diferentes.\"\"\"\n    return request.param\n\ndef test_parametrizado(valor_teste):\n    assert valor_teste &gt; 0\n</code></pre>"},{"location":"trilhas/python/page-15/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre testes em Python, incluindo:</p> <ul> <li>Import\u00e2ncia dos testes para garantir a qualidade do c\u00f3digo</li> <li>Tipos de testes: unit\u00e1rios, de integra\u00e7\u00e3o e funcionais</li> <li>Framework pytest e suas funcionalidades principais</li> <li>Fixtures para reutiliza\u00e7\u00e3o de c\u00f3digo de teste</li> <li>Parametriza\u00e7\u00e3o para executar testes com diferentes entradas</li> <li>Mocks e patching para isolar unidades de c\u00f3digo</li> <li>TDD (Test-Driven Development) como metodologia de desenvolvimento</li> <li>Cobertura de testes para medir a efic\u00e1cia dos testes</li> <li>Testes em frameworks como Flask e Django</li> <li>Boas pr\u00e1ticas para escrever testes eficazes</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial do pytest</li> <li>Documenta\u00e7\u00e3o do unittest</li> <li>Documenta\u00e7\u00e3o do unittest.mock</li> <li>Testes no Django</li> <li>Testes no Flask</li> </ul>"},{"location":"trilhas/python/page-15/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos os recursos e atualiza\u00e7\u00f5es das vers\u00f5es recentes do Python, incluindo novos recursos de sintaxe, m\u00f3dulos da biblioteca padr\u00e3o e melhorias de desempenho.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Heran\u00e7a e Polimorfismo</p>"},{"location":"trilhas/python/page-16/","title":"Atualiza\u00e7\u00f5es e Recursos Recentes do Python","text":""},{"location":"trilhas/python/page-16/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A linguagem Python continua evoluindo, com novas vers\u00f5es trazendo recursos, melhorias de desempenho e corre\u00e7\u00f5es de seguran\u00e7a. Nesta aula, vamos explorar as principais caracter\u00edsticas e funcionalidades introduzidas nas vers\u00f5es recentes do Python, al\u00e9m de discutir o processo de atualiza\u00e7\u00e3o e migra\u00e7\u00e3o entre vers\u00f5es.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Conhecer os principais recursos das vers\u00f5es recentes do Python</li> <li>Entender as melhorias de sintaxe e funcionalidades adicionadas</li> <li>Aprender como usar os novos recursos em projetos pr\u00e1ticos</li> <li>Compreender o ciclo de lan\u00e7amento e suporte das vers\u00f5es do Python</li> <li>Descobrir como migrar projetos para vers\u00f5es mais recentes</li> </ul>"},{"location":"trilhas/python/page-16/#python-38","title":"Python 3.8","text":"<p>Python 3.8 foi lan\u00e7ado em outubro de 2019 e trouxe v\u00e1rias melhorias significativas para a linguagem.</p> Express\u00f5es de Atribui\u00e7\u00e3o (Walrus Operator)Par\u00e2metros Posicionaisf-strings com = (Debug)M\u00f3dulos ImportantesOutras Melhorias <pre><code># Antes do Python 3.8\ncommand = input(\"Digite um comando: \")\nwhile command != \"quit\":\n    # Processar o comando\n    print(f\"Executando: {command}\")\n    command = input(\"Digite um comando: \")\n\n# Com Python 3.8 - Operador Walrus (:=)\nwhile (command := input(\"Digite um comando: \")) != \"quit\":\n    print(f\"Executando: {command}\")\n\n# Outro exemplo \u00fatil\n# Antes\nimport re\ntext = \"A idade de Jo\u00e3o \u00e9 25 anos\"\nmatch = re.search(r'(\\d+)', text)\nif match:\n    age = int(match.group(1))\n    print(f\"Idade encontrada: {age}\")\n\n# Depois\nif match := re.search(r'(\\d+)', text):\n    print(f\"Idade encontrada: {int(match.group(1))}\")\n\n# Em compreens\u00f5es de lista\ndata = [1, 2, 3, 4, 5]\n[x for x in data if (doubled := x * 2) &gt; 5]  # [3, 4, 5]\n</code></pre> <pre><code># Python 3.8 introduziu uma sintaxe para especificar\n# par\u00e2metros exclusivamente posicionais\n\n# A barra (/) indica que todos os par\u00e2metros \u00e0 esquerda \n# s\u00e3o exclusivamente posicionais\ndef calcular_potencia(base, expoente, /, multiplicador=1):\n    return (base ** expoente) * multiplicador\n\n# Chamadas v\u00e1lidas\ncalcular_potencia(2, 3)           # 2\u00b3 = 8\ncalcular_potencia(2, 3, 2)        # 2\u00b3 * 2 = 16\ncalcular_potencia(2, 3, multiplicador=2)  # 2\u00b3 * 2 = 16\n\n# Chamadas inv\u00e1lidas\n# calcular_potencia(base=2, expoente=3)  # Erro! base e expoente s\u00e3o posicionais\n\n# Combinando com par\u00e2metros somente por nome (*)\ndef funcao(pos1, pos2, /, pos_ou_kw, *, kw1, kw2):\n    # pos1 e pos2: somente por posi\u00e7\u00e3o\n    # pos_ou_kw: por posi\u00e7\u00e3o ou nome\n    # kw1 e kw2: somente por nome\n    pass\n\n# Exemplo pr\u00e1tico\ndef buscar_dados(tabela, id, /, *, campos=None, ordenar_por=None):\n    # tabela e id s\u00e3o posicionais\n    # campos e ordenar_por s\u00e3o somente por nome\n    campos = campos or [\"*\"]\n    ordem = f\"ORDER BY {ordenar_por}\" if ordenar_por else \"\"\n    query = f\"SELECT {', '.join(campos)} FROM {tabela} WHERE id = {id} {ordem}\"\n    return query\n\n# Uso\nbuscar_dados(\"usuarios\", 123, campos=[\"nome\", \"email\"])\n# SELECT nome, email FROM usuarios WHERE id = 123 \n</code></pre> <pre><code># Python 3.8 melhorou as f-strings para depura\u00e7\u00e3o\nx = 10\ny = 20\n\n# Antes\nprint(f\"x = {x}, y = {y}\")\n\n# Python 3.8+\nprint(f\"{x=}, {y=}\")  # x=10, y=20\n\n# Funciona com express\u00f5es\nprint(f\"{x+y=}\")  # x+y=30\n\n# Formato personalizado\nimport math\nprint(f\"{math.pi=:.2f}\")  # math.pi=3.14\n\n# \u00datil para depura\u00e7\u00e3o r\u00e1pida\nnome = \"Maria\"\nidade = 30\nprint(f\"{nome=} tem {idade=} anos\")  # nome='Maria' tem idade=30 anos\n</code></pre> <pre><code># importlib.metadata (PEP 566)\n# Permite acessar os metadados dos pacotes instalados\nfrom importlib import metadata\n\n# Vers\u00e3o de um pacote instalado\nversion = metadata.version(\"pip\")\nprint(f\"Vers\u00e3o do pip: {version}\")\n\n# Lista de pacotes instalados\ninstalled = metadata.distributions()\nprint(f\"Total de pacotes instalados: {len(list(installed))}\")\n\n# TypedDict (PEP 589)\n# Dicion\u00e1rios com tipos de valor espec\u00edficos para cada chave\nfrom typing import TypedDict\n\nclass Pessoa(TypedDict):\n    nome: str\n    idade: int\n    ativo: bool\n\n# Cria um dicion\u00e1rio do tipo Pessoa\nusuario: Pessoa = {\n    \"nome\": \"Jo\u00e3o\", \n    \"idade\": 25, \n    \"ativo\": True\n}\n\n# Ferramentas de an\u00e1lise est\u00e1tica como mypy podem verificar\n# se os tipos est\u00e3o corretos\n</code></pre> <pre><code># Melhoria no m\u00f3dulo typing\nfrom typing import Literal, Final, Protocol\n\n# Literal para especificar valores exatos\ndef mover(direcao: Literal[\"norte\", \"sul\", \"leste\", \"oeste\"]) -&gt; None:\n    print(f\"Movendo para {direcao}\")\n\nmover(\"norte\")  # OK\n# mover(\"nordeste\")  # Erro de tipo\n\n# Final para declarar constantes\nMAX_CONEXOES: Final = 100\n# MAX_CONEXOES = 200  # Erro, n\u00e3o pode ser reatribu\u00eddo\n\n# Protocol para tipagem estrutural (similar a interfaces)\nclass Printable(Protocol):\n    def __str__(self) -&gt; str: ...\n\ndef imprimir(obj: Printable) -&gt; None:\n    print(str(obj))\n\n# Qualquer objeto que implemente __str__ \u00e9 compat\u00edvel com Printable\n\n# Outros recursos:\n# - multiprocessing compartilhado agora usa mem\u00f3ria compartilhada\n# - pickle suporta objetos maiores que 4GiB\n# - PYTHONIOENCODING n\u00e3o afeta mais stderr\n# - zoneinfo adicionado (PEP 615) para lidar com fusos hor\u00e1rios\n</code></pre>"},{"location":"trilhas/python/page-16/#python-39","title":"Python 3.9","text":"<p>Python 3.9 foi lan\u00e7ado em outubro de 2020 e trouxe v\u00e1rias melhorias, incluindo novos operadores para dicion\u00e1rios e funcionalidades para strings.</p> Operadores de Uni\u00e3o de Dicion\u00e1riosM\u00e9todos para StringsAnota\u00e7\u00f5es de TipoFun\u00e7\u00f5es de ParserOutras Melhorias <pre><code># Antes do Python 3.9\nx = {\"a\": 1, \"b\": 2}\ny = {\"b\": 3, \"c\": 4}\n\n# Criando a uni\u00e3o com m\u00e9todo update (modifica x)\nz1 = x.copy()\nz1.update(y)\nprint(z1)  # {'a': 1, 'b': 3, 'c': 4}\n\n# Criando a uni\u00e3o com desempacotamento\nz2 = {**x, **y}\nprint(z2)  # {'a': 1, 'b': 3, 'c': 4}\n\n# Com Python 3.9 - Operador |\n# Uni\u00e3o (novo dicion\u00e1rio)\nz3 = x | y\nprint(z3)  # {'a': 1, 'b': 3, 'c': 4}\n\n# Atualiza\u00e7\u00e3o (modifica x)\nx |= y\nprint(x)  # {'a': 1, 'b': 3, 'c': 4}\n\n# Casos de uso pr\u00e1ticos\ndefaults = {\"timeout\": 30, \"retries\": 3, \"backoff\": 1.5}\nuser_settings = {\"timeout\": 10}\n\n# Configura\u00e7\u00e3o final \u00e9 a uni\u00e3o de padr\u00f5es e personaliza\u00e7\u00f5es\nconfig = defaults | user_settings\nprint(config)  # {'timeout': 10, 'retries': 3, 'backoff': 1.5}\n</code></pre> <pre><code># Python 3.9 adiciona m\u00e9todos para remover prefixos e sufixos\n\n# removeprefix() - Remove prefixo\nurl = \"https://codaqui.dev/python/aulas\"\n\n# Antes\nif url.startswith(\"https://\"):\n    url_sem_protocolo = url[8:]  # Remove os primeiros 8 caracteres\n\n# Python 3.9\nurl_sem_protocolo = url.removeprefix(\"https://\")\nprint(url_sem_protocolo)  # codaqui.dev/python/aulas\n\n# Se o prefixo n\u00e3o existir, retorna a string original\nprint(\"Python\".removeprefix(\"Java\"))  # Python\n\n# removesuffix() - Remove sufixo\narquivo = \"documento.txt\"\n\n# Antes\nif arquivo.endswith(\".txt\"):\n    nome_sem_extensao = arquivo[:-4]  # Remove os \u00faltimos 4 caracteres\n\n# Python 3.9\nnome_sem_extensao = arquivo.removesuffix(\".txt\")\nprint(nome_sem_extensao)  # documento\n\n# Exemplos adicionais\ncaminho = \"/home/usuario/arquivo.py\"\nnome_arquivo = caminho.split(\"/\")[-1].removesuffix(\".py\")\nprint(nome_arquivo)  # arquivo\n\n# Limpando formata\u00e7\u00e3o de n\u00famero de telefone\ntelefone = \"+55 (11) 98765-4321\"\ndigitos = telefone.removeprefix(\"+55 \").removeprefix(\"(\").removesuffix(\"-4321\")\nprint(digitos)  # (11) 98765\n</code></pre> <pre><code># O m\u00f3dulo typing foi melhorado no Python 3.9\n\n# Antes do Python 3.9\nfrom typing import List, Dict, Tuple, Set\n\ndef processar_dados(valores: List[int]) -&gt; Dict[str, int]:\n    return {\"total\": sum(valores)}\n\n# Python 3.9 - tipos gen\u00e9ricos diretamente dos tipos built-in\ndef processar_dados_new(valores: list[int]) -&gt; dict[str, int]:\n    return {\"total\": sum(valores)}\n\n# Outros exemplos\ncoordenadas: tuple[float, float] = (10.5, 20.3)\nnomes: set[str] = {\"Alice\", \"Bob\", \"Charlie\"}\nmatriz: list[list[int]] = [[1, 2], [3, 4]]\n\n# Tamb\u00e9m funciona com tipos mais complexos\nmapa: dict[str, list[tuple[int, int]]] = {\n    \"pontos\": [(0, 0), (1, 1), (2, 2)]\n}\n\n# O mesmo se aplica a palavras-chave especiais\nfrom typing import Optional, Union\n\n# Antes\ndef funcao(valor: Optional[int] = None) -&gt; Union[str, int]:\n    if valor is None:\n        return \"Sem valor\"\n    return valor * 2\n\n# Obs: Optional e Union ainda s\u00e3o necess\u00e1rios\n# Apenas os cont\u00eaineres gen\u00e9ricos foram simplificados\n</code></pre> <pre><code># O parser PEG mais r\u00e1pido e mais flex\u00edvel\n# Substitui o antigo parser LL(1)\n\nimport ast\n\n# An\u00e1lise de c\u00f3digo como string\nc\u00f3digo = \"\"\"\ndef soma(a, b):\n    return a + b\n\nresultado = soma(10, 20)\nprint(f\"A soma \u00e9 {resultado}\")\n\"\"\"\n\n# Constr\u00f3i uma \u00e1rvore de sintaxe abstrata\narvore = ast.parse(c\u00f3digo)\n\n# Navega pelos n\u00f3s da \u00e1rvore\nfor node in ast.walk(arvore):\n    if isinstance(node, ast.Call) and isinstance(node.func, ast.Name):\n        if node.func.id == 'soma':\n            print(f\"Chamada para soma encontrada com argumentos:\")\n            for arg in node.args:\n                if isinstance(arg, ast.Constant):\n                    print(f\"- {arg.value}\")\n\n# Sa\u00edda:\n# Chamada para soma encontrada com argumentos:\n# - 10\n# - 20\n\n# O novo parser permite futuras melhorias na sintaxe\n# e melhor tratamento de erros\n</code></pre> <pre><code># time.zoneinfo() - Suporte a fuso hor\u00e1rio\nfrom zoneinfo import ZoneInfo\nfrom datetime import datetime\n\n# Criando data/hora com informa\u00e7\u00e3o de fuso hor\u00e1rio\ndt_tokyo = datetime(2023, 1, 1, 12, 0, tzinfo=ZoneInfo(\"Asia/Tokyo\"))\ndt_paris = datetime(2023, 1, 1, 12, 0, tzinfo=ZoneInfo(\"Europe/Paris\"))\n\nprint(dt_tokyo)  # 2023-01-01 12:00:00+09:00\nprint(dt_paris)  # 2023-01-01 12:00:00+01:00\n\n# Convertendo entre fusos hor\u00e1rios\ndt_tokyo_em_paris = dt_tokyo.astimezone(ZoneInfo(\"Europe/Paris\"))\nprint(dt_tokyo_em_paris)  # 2023-01-01 04:00:00+01:00\n\n# graphlib.TopologicalSorter - Ordena\u00e7\u00e3o topol\u00f3gica\nfrom graphlib import TopologicalSorter\n\n# Definindo depend\u00eancias (quem depende de quem)\ndependencias = {\n    \"setup.py\": {\"README.md\"},\n    \"pacote\": {\"setup.py\"},\n    \"testes\": {\"pacote\"},\n    \"build\": {\"pacote\", \"testes\"},\n    \"deploy\": {\"build\"}\n}\n\n# Criar o ordenador topol\u00f3gico\nts = TopologicalSorter(dependencias)\n\n# Obter a ordem de depend\u00eancias\nordem = list(ts.static_order())\nprint(f\"Ordem de execu\u00e7\u00e3o: {ordem}\")\n# Ordem de execu\u00e7\u00e3o: ['README.md', 'setup.py', 'pacote', 'testes', 'build', 'deploy']\n</code></pre>"},{"location":"trilhas/python/page-16/#python-310","title":"Python 3.10","text":"<p>Python 3.10 foi lan\u00e7ado em outubro de 2021 e introduziu v\u00e1rios recursos importantes, incluindo a correspond\u00eancia de padr\u00f5es estruturais.</p> Pattern MatchingPattern Matching Avan\u00e7adoPattern Matching com Dicion\u00e1riosTratamento de Erros MelhoradoPar\u00eanteses em Gerenciadores de ContextoOutras Melhorias <pre><code># O Python 3.10 introduziu pattern matching estrutural\n# Semelhante a switch/case em outras linguagens, mas muito mais poderoso\n\n# Exemplo b\u00e1sico\ndef analisar_status(status):\n    match status:\n        case 200:\n            return \"OK\"\n        case 404:\n            return \"N\u00e3o encontrado\"\n        case 500:\n            return \"Erro interno do servidor\"\n        case _:  # Caso padr\u00e3o (default)\n            return f\"Status desconhecido: {status}\"\n\nprint(analisar_status(200))  # OK\nprint(analisar_status(418))  # Status desconhecido: 418\n\n# Pattern matching com estruturas\ndef processar_comando(comando):\n    match comando.split():\n        case [\"sair\"]:\n            return \"Saindo do programa\"\n        case [\"ajuda\"]:\n            return \"Mostrando ajuda\"\n        case [\"criar\", nome]:\n            return f\"Criando {nome}\"\n        case [\"abrir\", nome, \"como\", modo]:\n            return f\"Abrindo {nome} no modo {modo}\"\n        case [\"mover\", origem, destino]:\n            return f\"Movendo de {origem} para {destino}\"\n        case _:\n            return \"Comando desconhecido\"\n\nprint(processar_comando(\"sair\"))  # Saindo do programa\nprint(processar_comando(\"criar projeto\"))  # Criando projeto\nprint(processar_comando(\"abrir arquivo.txt como leitura\"))  # Abrindo arquivo.txt no modo leitura\nprint(processar_comando(\"algo desconhecido\"))  # Comando desconhecido\n</code></pre> <pre><code># Pattern matching com objetos e desempacotamento\n\n# Definindo algumas classes para o exemplo\nclass Ponto:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass C\u00edrculo:\n    def __init__(self, centro, raio):\n        self.centro = centro\n        self.raio = raio\n\nclass Ret\u00e2ngulo:\n    def __init__(self, p1, p2):\n        self.p1 = p1  # Canto superior esquerdo\n        self.p2 = p2  # Canto inferior direito\n\n# Fun\u00e7\u00e3o que usa pattern matching para formas\ndef descrever_forma(forma):\n    match forma:\n        case Ponto(x=0, y=0):\n            return \"Ponto na origem\"\n        case Ponto(x=x, y=y) if x == y:\n            return f\"Ponto na diagonal principal ({x}, {y})\"\n        case Ponto(x=x, y=y):\n            return f\"Ponto em ({x}, {y})\"\n        case C\u00edrculo(centro=Ponto(x=0, y=0), raio=r):\n            return f\"C\u00edrculo centrado na origem com raio {r}\"\n        case C\u00edrculo(centro=c, raio=r):\n            return f\"C\u00edrculo centrado em ({c.x}, {c.y}) com raio {r}\"\n        case Ret\u00e2ngulo(p1=Ponto(x=x1, y=y1), p2=Ponto(x=x2, y=y2)):\n            largura = abs(x2 - x1)\n            altura = abs(y2 - y1)\n            return f\"Ret\u00e2ngulo de {largura}x{altura}\"\n        case _:\n            return \"Forma desconhecida\"\n\n# Testando com diferentes formas\np1 = Ponto(0, 0)\np2 = Ponto(3, 3)\np3 = Ponto(5, 10)\n\nc1 = C\u00edrculo(p1, 5)\nc2 = C\u00edrculo(p3, 2)\n\nr1 = Ret\u00e2ngulo(Ponto(0, 0), Ponto(10, 20))\n\nprint(descrever_forma(p1))  # Ponto na origem\nprint(descrever_forma(p2))  # Ponto na diagonal principal (3, 3)\nprint(descrever_forma(p3))  # Ponto em (5, 10)\nprint(descrever_forma(c1))  # C\u00edrculo centrado na origem com raio 5\nprint(descrever_forma(c2))  # C\u00edrculo centrado em (5, 10) com raio 2\nprint(descrever_forma(r1))  # Ret\u00e2ngulo de 10x20\n</code></pre> <pre><code># Pattern matching tamb\u00e9m funciona com dicion\u00e1rios e listas\n\ndef processar_dados(dados):\n    match dados:\n        case {\"tipo\": \"usuario\", \"nome\": nome, \"idade\": idade}:\n            return f\"Usu\u00e1rio {nome}, {idade} anos\"\n\n        case {\"tipo\": \"produto\", \"nome\": nome, \"pre\u00e7o\": preco}:\n            return f\"Produto {nome}, R$ {preco:.2f}\"\n\n        case {\"tipo\": \"erro\", \"c\u00f3digo\": codigo, \"mensagem\": mensagem}:\n            return f\"Erro {codigo}: {mensagem}\"\n\n        case {\"tipo\": tipo, **resto}:\n            return f\"Tipo desconhecido: {tipo}, dados extras: {resto}\"\n\n        case _:\n            return \"Formato de dados inv\u00e1lido\"\n\n# Testando com diferentes dados\nprint(processar_dados({\"tipo\": \"usuario\", \"nome\": \"Ana\", \"idade\": 30}))\n# Usu\u00e1rio Ana, 30 anos\n\nprint(processar_dados({\"tipo\": \"produto\", \"nome\": \"Laptop\", \"pre\u00e7o\": 3500}))\n# Produto Laptop, R$ 3500.00\n\nprint(processar_dados({\"tipo\": \"erro\", \"c\u00f3digo\": 404, \"mensagem\": \"N\u00e3o encontrado\"}))\n# Erro 404: N\u00e3o encontrado\n\nprint(processar_dados({\"tipo\": \"configura\u00e7\u00e3o\", \"modo\": \"debug\", \"ativo\": True}))\n# Tipo desconhecido: configura\u00e7\u00e3o, dados extras: {'modo': 'debug', 'ativo': True}\n\n# Desempacotamento de listas com OR e n\u00famero vari\u00e1vel de elementos\ndef analisar_pontos(pontos):\n    match pontos:\n        case []:\n            return \"Lista vazia\"\n        case [x, y]:\n            return f\"Um ponto: ({x}, {y})\"\n        case [x, y, z]:\n            return f\"Um ponto 3D: ({x}, {y}, {z})\"\n        case [x, y, *resto] if len(resto) &lt; 3:\n            return f\"Ponto com extras: ({x}, {y}) + {resto}\"\n        case [1, 2, *_] | [0, 0, *_]:\n            return \"Lista come\u00e7a com [1, 2] ou [0, 0]\"\n        case _:\n            return f\"Lista muito longa ou formato desconhecido\"\n\nprint(analisar_pontos([]))  # Lista vazia\nprint(analisar_pontos([10, 20]))  # Um ponto: (10, 20)\nprint(analisar_pontos([10, 20, 30]))  # Um ponto 3D: (10, 20, 30)\nprint(analisar_pontos([5, 5, 1, 2]))  # Ponto com extras: (5, 5) + [1, 2]\nprint(analisar_pontos([1, 2, 3, 4, 5]))  # Lista come\u00e7a com [1, 2] ou [0, 0]\n</code></pre> <pre><code># Python 3.10 oferece mensagens de erro mais precisas e \u00fateis\n\n# Antes do Python 3.10\n# Erro de sintaxe em uma chamada aninhada:\n# \n# func(arg1, arg2, arg3, name=value\n#\n# SyntaxError: invalid syntax\n\n# Python 3.10 mostra mensagens mais claras:\n#\n# func(arg1, arg2, arg3, name=value\n#                             ^\n# SyntaxError: ',' expected after dictionary key and value\n\n# Mensagens melhoradas para tipos incompat\u00edveis\n\n# Antes do Python 3.10:\n# TypeError: can only concatenate str (not \"int\") to str\n\n# Python 3.10:\n# TypeError: can only concatenate str (not \"int\") to str. \n# Did you mean to convert the int to a str first?\n\n# Exemplo com erros de tipo\ndef soma_strings(a, b):\n    return a + b\n\ntry:\n    resultado = soma_strings(\"Python\", 10)\nexcept TypeError as e:\n    print(f\"Erro: {e}\")\n    # No Python 3.10: Erro: can only concatenate str (not \"int\") to str. \n    # Did you mean to convert the int to a str first?\n\n# As mensagens de erro agora mostram a cadeia completa de exce\u00e7\u00f5es\ntry:\n    try:\n        1 / 0\n    except Exception as e:\n        raise ValueError(\"Ocorreu um erro de c\u00e1lculo\") from e\nexcept ValueError as e:\n    print(f\"Erro capturado: {e}\")\n    print(f\"Causa original: {e.__cause__}\")\n</code></pre> <pre><code># Python 3.10 permite par\u00eanteses em gerenciadores de contexto\n\n# Antes, para m\u00faltiplos gerenciadores de contexto:\n# Op\u00e7\u00e3o 1: aninhamento (dif\u00edcil de ler)\nwith open('arquivo1.txt') as f1:\n    with open('arquivo2.txt') as f2:\n        conteudo1 = f1.read()\n        conteudo2 = f2.read()\n\n# Op\u00e7\u00e3o 2: em uma linha (pode ficar muito longa)\nwith open('arquivo1.txt') as f1, open('arquivo2.txt') as f2:\n    conteudo1 = f1.read()\n    conteudo2 = f2.read()\n\n# Python 3.10: par\u00eanteses para quebrar em m\u00faltiplas linhas\nwith (\n    open('arquivo1.txt') as f1,\n    open('arquivo2.txt') as f2,\n    open('arquivo3.txt') as f3\n):\n    # Agora o c\u00f3digo \u00e9 mais claro e leg\u00edvel\n    conteudo1 = f1.read()\n    conteudo2 = f2.read()\n    conteudo3 = f3.read()\n\n# \u00datil para contextos complexos\nimport threading\nimport contextlib\n\n# Exemplo mais complexo\nwith (\n    open('log.txt', 'w') as log,\n    contextlib.redirect_stdout(log),\n    contextlib.redirect_stderr(log),\n    threading.Lock()\n):\n    print(\"Esta sa\u00edda vai para o arquivo log.txt\")\n    # Todas as sa\u00eddas e erros s\u00e3o redirecionados para log.txt\n    # e o c\u00f3digo \u00e9 executado com um lock de thread\n</code></pre> <pre><code># Anota\u00e7\u00f5es de tipo em declara\u00e7\u00f5es de vari\u00e1veis\n# Agora, vari\u00e1veis podem ter anota\u00e7\u00f5es de tipo sem valor inicial\n\n# Python 3.10\nfrom typing import Optional, List\n\n# Vari\u00e1veis com anota\u00e7\u00f5es de tipo, sem inicializa\u00e7\u00e3o\nnome: str\nidade: int\nativo: bool\n\n# Em fun\u00e7\u00f5es\ndef processar_usuario():\n    global nome, idade\n    nome = \"Alice\"\n    idade = 30\n\n# Isso facilita a defini\u00e7\u00e3o de tipos em classes\nclass Usuario:\n    nome: str\n    email: str\n    ativo: bool = True\n    tentativas_login: int = 0\n    detalhes: Optional[dict] = None\n    permissoes: List[str] = []\n\n# Operador | para unions de tipos\n# Python 3.9:\nfrom typing import Union\ndef func(param: Union[int, str]): pass\n\n# Python 3.10:\ndef func(param: int | str): pass\n\n# Fun\u00e7\u00f5es de substring mais precisas\ntexto = \"Python \u00e9 uma linguagem de programa\u00e7\u00e3o\"\n\n# Melhor detec\u00e7\u00e3o de substrings\nif \"Python\" in texto:\n    print(\"Encontrou 'Python'\")\n\nif \"python\" in texto.lower():\n    print(\"Encontrou 'python' (case insensitive)\")\n\n# Melhor desempenho para opera\u00e7\u00f5es de string\n</code></pre>"},{"location":"trilhas/python/page-16/#python-311-e-312","title":"Python 3.11 e 3.12","text":"<p>Python 3.11 (lan\u00e7ado em outubro de 2022) e Python 3.12 (lan\u00e7ado em outubro de 2023) trouxeram melhorias significativas de desempenho e novos recursos.</p> Melhorias de DesempenhoExceptionGroup e except*Self Type (Python 3.11)Anota\u00e7\u00f5es de Tipo (Python 3.12)Sintaxe f-string mais simples (Python 3.12)Python 3.12: PEP 701 - Formalmente Padronizando o Formato Wheel <pre><code># Python 3.11 \u00e9 at\u00e9 60% mais r\u00e1pido que Python 3.10 em alguns benchmarks\n# Essa melhoria vem do projeto \"Faster CPython\"\n\n# Melhoria em loops e chamadas de fun\u00e7\u00e3o\nimport time\n\ndef testar_desempenho(n=10_000_000):\n    inicio = time.time()\n\n    soma = 0\n    for i in range(n):\n        soma += i\n\n    fim = time.time()\n    return fim - inicio\n\n# Execute isso no Python 3.10 e 3.11 para ver a diferen\u00e7a\nresultado = testar_desempenho()\nprint(f\"Tempo de execu\u00e7\u00e3o: {resultado:.3f} segundos\")\n\n# Tamb\u00e9m houve melhorias em:\n# - Gera\u00e7\u00e3o e rastreamento de exce\u00e7\u00f5es\n# - Inicializa\u00e7\u00e3o do interpretador\n# - Manipula\u00e7\u00e3o de dicion\u00e1rios\n# - Compreens\u00f5es de lista, dict, set\n# - Importa\u00e7\u00e3o de m\u00f3dulos\n</code></pre> <pre><code># Python 3.11 introduziu grupos de exce\u00e7\u00f5es\n# \u00datil para opera\u00e7\u00f5es paralelas onde v\u00e1rias exce\u00e7\u00f5es podem ocorrer\n\nfrom exceptiongroup import ExceptionGroup  # Python 3.11+\n\n# Criando um grupo de exce\u00e7\u00f5es\ndef operacoes_paralelas():\n    erros = []\n\n    try:\n        # Opera\u00e7\u00e3o 1\n        x = 1 / 0\n    except Exception as e:\n        erros.append(e)\n\n    try:\n        # Opera\u00e7\u00e3o 2\n        lista = [1, 2]\n        item = lista[10]\n    except Exception as e:\n        erros.append(e)\n\n    try:\n        # Opera\u00e7\u00e3o 3\n        int(\"n\u00e3o \u00e9 um n\u00famero\")\n    except Exception as e:\n        erros.append(e)\n\n    # Se houver erros, lan\u00e7a um grupo de exce\u00e7\u00f5es\n    if erros:\n        raise ExceptionGroup(\"M\u00faltiplos erros ocorreram\", erros)\n\n# Usando o operador except*\ntry:\n    operacoes_paralelas()\nexcept* ZeroDivisionError as e:\n    print(f\"Erro de divis\u00e3o por zero: {e.exceptions}\")\nexcept* IndexError as e:\n    print(f\"Erro de \u00edndice: {e.exceptions}\")\nexcept* ValueError as e:\n    print(f\"Erro de valor: {e.exceptions}\")\nexcept* Exception as e:\n    print(f\"Outros erros: {e.exceptions}\")\n\n# Sa\u00edda:\n# Erro de divis\u00e3o por zero: (ZeroDivisionError('division by zero'),)\n# Erro de \u00edndice: (IndexError('list index out of range'),)\n# Erro de valor: (ValueError(\"invalid literal for int() with base 10: 'n\u00e3o \u00e9 um n\u00famero'\"),)\n</code></pre> <pre><code># Python 3.11 introduziu Self para anota\u00e7\u00f5es de tipo\nfrom typing import Self  # Python 3.11+\n\nclass Builder:\n    def __init__(self, value: int = 0) -&gt; None:\n        self.value = value\n\n    def add(self, x: int) -&gt; Self:\n        self.value += x\n        return self\n\n    def multiply(self, x: int) -&gt; Self:\n        self.value *= x\n        return self\n\n    def as_string(self) -&gt; str:\n        return str(self.value)\n\n# Permite chamadas encadeadas com verifica\u00e7\u00e3o de tipo\nresultado = Builder(10).add(5).multiply(2).as_string()\nprint(resultado)  # '30'\n\n# \u00datil para classes derivadas\nclass AdvancedBuilder(Builder):\n    def subtract(self, x: int) -&gt; Self:\n        self.value -= x\n        return self\n\n# O tipo Self garante que o m\u00e9todo retorna o tipo correto\n# mesmo quando herdado por uma subclasse\navancado = AdvancedBuilder(20).add(5).subtract(3).multiply(2)\nprint(avancado.value)  # 44\n</code></pre> <pre><code># Python 3.12 introduziu melhorias no sistema de tipagem\n\n# TypedDict com items() tipados\nfrom typing import TypedDict, Unpack\n\nclass Usu\u00e1rio(TypedDict):\n    nome: str\n    idade: int\n    admin: bool\n\ndef processar_usuario(**kwargs: Unpack[Usu\u00e1rio]) -&gt; None:\n    print(f\"Nome: {kwargs['nome']}\")\n    print(f\"Idade: {kwargs['idade']}\")\n    print(f\"Admin: {kwargs['admin']}\")\n\n# A chamada agora \u00e9 verificada corretamente\nprocessar_usuario(nome=\"Alice\", idade=30, admin=True)\n\n# Novos gen\u00e9ricos\nfrom typing import TypeVar, Generic, assert_type\n\nT = TypeVar('T')\n\nclass Box(Generic[T]):\n    def __init__(self, content: T) -&gt; None:\n        self.content = content\n\n    def get(self) -&gt; T:\n        return self.content\n\n    def map(self, f: 'Callable[[T], U]') -&gt; 'Box[U]':\n        return Box(f(self.content))\n\n# Type aliases gen\u00e9ricos\nfrom typing import TypeVar, List, Dict\n\nT = TypeVar('T')\nMeuMapa = Dict[str, List[T]]  # Tipo gen\u00e9rico parametrizado\n\nnomes: MeuMapa[str] = {\"grupos\": [\"Alice\", \"Bob\"]}\nidades: MeuMapa[int] = {\"grupos\": [25, 30]}\n</code></pre> <pre><code># Python 3.12 simplifica a sintaxe de f-strings\n\n# Antes, duplica\u00e7\u00e3o de chaves era necess\u00e1ria \n# para usar chaves literais\nnome = \"Alice\"\n\n# Python 3.11 e anteriores\nprint(f\"Nome: {nome} {{n\u00e3o avaliado}}\")  # Nome: Alice {n\u00e3o avaliado}\n\ndicion\u00e1rio = {\"chave\": \"valor\"}\nprint(f\"Acesso a dicion\u00e1rio: {dicion\u00e1rio['chave']}\")\n\n# Python 3.12 - express\u00f5es mais flex\u00edveis\n# Chaves literais n\u00e3o precisam ser duplicadas em alguns casos\nprint(f\"Nome: {nome} {'n\u00e3o avaliado'}\")\nprint(f\"C\u00e1lculo: {(lambda x: x**2)(3)}\")\nprint(f\"{dicion\u00e1rio=}\")\n\n# Aspas dentro de f-strings s\u00e3o mais flex\u00edveis\nmensagem = f\"Ela disse: \"Ol\u00e1, {nome}!\"\"\nprint(mensagem)  # Ela disse: \"Ol\u00e1, Alice!\"\n</code></pre> <pre><code># Python 3.12 formalizou o formato Wheel de distribui\u00e7\u00e3o de pacotes\n\n# O formato wheel (.whl) \u00e9 um formato de distribui\u00e7\u00e3o de pacotes Python\n# que permite instala\u00e7\u00e3o mais r\u00e1pida e confi\u00e1vel do que o formato fonte.\n\n# Isso n\u00e3o muda o c\u00f3digo Python, mas sim como os pacotes s\u00e3o distribu\u00eddos:\n\n# Exemplo de uso do pip para instalar um wheel\n# pip install package-1.0-py3-none-any.whl\n\n# Exemplo de cria\u00e7\u00e3o de um wheel para seu projeto\n# python setup.py bdist_wheel\n\n# Benef\u00edcios:\n# - Instala\u00e7\u00e3o mais r\u00e1pida (n\u00e3o precisa compilar durante a instala\u00e7\u00e3o)\n# - N\u00e3o requer um compilador na m\u00e1quina alvo\n# - Verifica assinaturas e hashes automaticamente\n# - Melhor suporte para depend\u00eancias nativas de sistema\n\n# Outras melhorias:\n# - Implementa\u00e7\u00e3o otimizada de sum()\n# - As tuplas e os m\u00f3dulos agora s\u00e3o subclasses de collections.abc\n# - Suporte para v\u00e1rios interpretadores em m\u00f3dulos de extens\u00e3o\n# - Removidos muitos recursos obsoletos e deprecados\n</code></pre>"},{"location":"trilhas/python/page-16/#migracao-entre-versoes","title":"Migra\u00e7\u00e3o entre Vers\u00f5es","text":"<p>Atualizar c\u00f3digo Python para vers\u00f5es mais recentes requer aten\u00e7\u00e3o a mudan\u00e7as e recursos obsoletos.</p> Pr\u00e1tica RecomendadaFerramentas e Estrat\u00e9giasDicas e Avisos <pre><code># Boas pr\u00e1ticas para migra\u00e7\u00e3o entre vers\u00f5es do Python\n\n# 1. Teste seu c\u00f3digo com ferramentas de an\u00e1lise\n# Ferramentas como pyupgrade e pylint podem identificar padr\u00f5es obsoletos\n\n# 2. Use verifica\u00e7\u00e3o de tipos como mypy\n\n# 3. Mantenha testes automatizados robustos\n\n# 4. Verifique as depend\u00eancias do projeto\n# Certifique-se de que as bibliotecas usadas s\u00e3o compat\u00edveis\n\n# 5. Use codemod ou ferramentas de migra\u00e7\u00e3o automatizada\n\n# 6. Aproveite a chance para modernizar seu c\u00f3digo\n# Exemplo: atualizar de Python 3.8 para 3.10 - usar pattern matching\n\n# C\u00f3digo antigo\ndef processar_status(status_code):\n    if status_code == 200:\n        return \"OK\"\n    elif status_code == 404:\n        return \"N\u00e3o encontrado\"\n    elif status_code == 500:\n        return \"Erro interno\"\n    else:\n        return f\"Status desconhecido: {status_code}\"\n\n# C\u00f3digo modernizado (Python 3.10)\ndef processar_status(status_code):\n    match status_code:\n        case 200:\n            return \"OK\"\n        case 404:\n            return \"N\u00e3o encontrado\"\n        case 500:\n            return \"Erro interno\"\n        case _:\n            return f\"Status desconhecido: {status_code}\"\n</code></pre> <pre><code># Ferramentas \u00fateis para migra\u00e7\u00e3o:\n\n# - pyupgrade: atualiza a sintaxe automaticamente para novas vers\u00f5es\n# pip install pyupgrade\n# pyupgrade --py310-plus arquivo.py\n\n# - pylint: verifica problemas de estilo, bugs e recursos obsoletos\n# pip install pylint\n# pylint arquivo.py\n\n# - mypy: verifica tipos est\u00e1ticos\n# pip install mypy\n# mypy arquivo.py\n\n# - pytest: executa testes automatizados\n# pip install pytest\n# pytest\n\n# - pip-audit: verifica vulnerabilidades em depend\u00eancias\n# pip install pip-audit\n# pip-audit\n\n# Estrat\u00e9gia recomendada:\n# 1. Fa\u00e7a backup ou garanta que o c\u00f3digo est\u00e1 em controle de vers\u00e3o\n# 2. Execute verificadores autom\u00e1ticos\n# 3. Corrija os problemas encontrados\n# 4. Execute testes e valide as altera\u00e7\u00f5es\n# 5. Aproveite novos recursos da vers\u00e3o alvo\n</code></pre> <pre><code># Dicas para uma migra\u00e7\u00e3o suave:\n\n# 1. Conhe\u00e7a as mudan\u00e7as entre vers\u00f5es\n# - Leia a documenta\u00e7\u00e3o \"What's New\" no site oficial Python\n# - https://docs.python.org/3/whatsnew/\n\n# 2. Use ambientes virtuais para testar\n# python -m venv venv-3.10\n# source venv-3.10/bin/activate  # Linux/Mac\n# venv-3.10\\Scripts\\activate      # Windows\n\n# 3. Preste aten\u00e7\u00e3o a recursos removidos\n# Ex: Python 3.11 removeu v\u00e1rias funcionalidades obsoletas:\n# - distutils (substitu\u00eddo por setuptools)\n# - wstr em unicodedata (sem substitui\u00e7\u00e3o)\n# - v\u00e1rios m\u00f3dulos 'as' da importlib\n\n# 4. Atualize uma vers\u00e3o por vez para projetos grandes\n# Python 3.8 -&gt; 3.9 -&gt; 3.10 -&gt; 3.11 -&gt; 3.12\n\n# 5. Fique atento ao ciclo de vida das vers\u00f5es Python\n# Em geral, cada vers\u00e3o recebe suporte por 5 anos\n\n# Estado atual (2023):\n# 3.7 - Fim do suporte: 27 junho 2023\n# 3.8 - Suporte at\u00e9 outubro 2024\n# 3.9 - Suporte at\u00e9 outubro 2025\n# 3.10 - Suporte at\u00e9 outubro 2026\n# 3.11 - Suporte at\u00e9 outubro 2027\n# 3.12 - Suporte at\u00e9 outubro 2028\n</code></pre>"},{"location":"trilhas/python/page-16/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre os recursos e melhorias introduzidos nas vers\u00f5es recentes do Python:</p> <ul> <li>Python 3.8: Operador de atribui\u00e7\u00e3o (walrus), par\u00e2metros posicionais, f-strings melhoradas</li> <li>Python 3.9: Operadores de uni\u00e3o para dicion\u00e1rios, m\u00e9todos de string para prefixos/sufixos</li> <li>Python 3.10: Pattern matching, mensagens de erro melhoradas, par\u00eanteses em gerenciadores de contexto</li> <li>Python 3.11 e 3.12: Melhorias significativas de desempenho, grupos de exce\u00e7\u00f5es, anota\u00e7\u00f5es de tipo aprimoradas</li> </ul> <p>Tamb\u00e9m discutimos estrat\u00e9gias para migra\u00e7\u00e3o entre vers\u00f5es e as melhores pr\u00e1ticas para manter seu c\u00f3digo atualizado.</p> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial - What's New</li> <li>PEPs (Python Enhancement Proposals)</li> <li>Real Python: Cool New Features in Python 3.10</li> <li>Real Python: Cool New Features in Python 3.11</li> <li>Real Python: Cool New Features in Python 3.12</li> </ul>"},{"location":"trilhas/python/page-16/#proximos-passos-na-jornada-python","title":"Pr\u00f3ximos Passos na Jornada Python","text":"<p>Parab\u00e9ns por concluir esta trilha de aprendizado Python! Para continuar sua jornada de aprendizado, considere:</p> <ol> <li>Aprofundar-se em \u00e1reas espec\u00edficas:</li> <li>Desenvolvimento web com Django ou Flask</li> <li>Ci\u00eancia de dados com pandas, numpy e matplotlib</li> <li>Machine Learning com scikit-learn, TensorFlow ou PyTorch</li> <li> <p>Automa\u00e7\u00e3o e scripting</p> </li> <li> <p>Participar da comunidade:</p> </li> <li>Contribuir para projetos de c\u00f3digo aberto</li> <li> <p>Participar de grupos de usu\u00e1rios e confer\u00eancias Python</p> </li> <li> <p>Desenvolver projetos pessoais:</p> </li> <li>Aplicar os conhecimentos adquiridos em projetos reais</li> <li> <p>Construir um portf\u00f3lio para demonstrar suas habilidades</p> </li> <li> <p>Continuar estudando:</p> </li> <li>Arquitetura de software e padr\u00f5es de design</li> <li>Pr\u00e1ticas de DevOps e CI/CD com Python</li> <li>Seguran\u00e7a em aplica\u00e7\u00f5es Python</li> </ol> <p>\u2190 Voltar para Testes em Python</p>"},{"location":"trilhas/python/page-2/","title":"Estruturas L\u00f3gicas e Condicionais em Python","text":""},{"location":"trilhas/python/page-2/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>As estruturas condicionais permitem que um programa execute diferentes comandos de acordo com as condi\u00e7\u00f5es estabelecidas. Elas s\u00e3o fundamentais para criar programas que precisam tomar decis\u00f5es baseadas em condi\u00e7\u00f5es espec\u00edficas.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito de express\u00f5es booleanas</li> <li>Aprender a utilizar estruturas condicionais <code>if</code>, <code>else</code> e <code>elif</code></li> <li>Compreender operadores de compara\u00e7\u00e3o e l\u00f3gicos</li> <li>Praticar a cria\u00e7\u00e3o de c\u00f3digo com fluxo condicional</li> </ul> <p>Dica</p> <p>Quer saber como comentar ou \"descomentar\" v\u00e1rias linhas de c\u00f3digo ao mesmo tempo? Use Ctrl+/ no Windows e Linux, ou Cmd+/ no MacOS.</p>"},{"location":"trilhas/python/page-2/#operadores-de-comparacao","title":"Operadores de Compara\u00e7\u00e3o","text":"<p>Operadores de compara\u00e7\u00e3o s\u00e3o usados para comparar valores e retornam valores booleanos (<code>True</code> ou <code>False</code>):</p> Conceito <pre><code># Operadores de compara\u00e7\u00e3o\na = 10\nb = 5\n\nprint(a == b)  # Igual a (False)\nprint(a != b)  # Diferente de (True)\nprint(a &gt; b)   # Maior que (True)\nprint(a &lt; b)   # Menor que (False)\nprint(a &gt;= b)  # Maior ou igual a (True)\nprint(a &lt;= b)  # Menor ou igual a (False)\n</code></pre>"},{"location":"trilhas/python/page-2/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<p>Operadores l\u00f3gicos combinam express\u00f5es booleanas:</p> Conceito <pre><code># Operadores l\u00f3gicos\nx = True\ny = False\n\nprint(x and y)  # AND l\u00f3gico (False)\nprint(x or y)   # OR l\u00f3gico (True)\nprint(not x)    # NOT l\u00f3gico (False)\n</code></pre>"},{"location":"trilhas/python/page-2/#estruturas-condicionais","title":"Estruturas Condicionais","text":""},{"location":"trilhas/python/page-2/#if-else-e-elif","title":"if, else e elif","text":"<p>A estrutura <code>if</code> permite executar um bloco de c\u00f3digo apenas se uma condi\u00e7\u00e3o for verdadeira.</p> Estrutura b\u00e1sicaExemplo Simples <pre><code>if condi\u00e7\u00e3o:\n    # c\u00f3digo a ser executado se a condi\u00e7\u00e3o for verdadeira\nelse:\n    # c\u00f3digo a ser executado se a condi\u00e7\u00e3o for falsa\n</code></pre> <pre><code># Verificando se um n\u00famero \u00e9 par ou \u00edmpar\nnumero = 10\n\nif numero % 2 == 0:\n    print(\"O n\u00famero \u00e9 par.\")\nelse:\n    print(\"O n\u00famero \u00e9 \u00edmpar.\")\n</code></pre>"},{"location":"trilhas/python/page-2/#estruturas-condicionais-aninhadas","title":"Estruturas condicionais aninhadas","text":"<p>Podemos usar <code>elif</code> (abrevia\u00e7\u00e3o de \"else if\") para verificar m\u00faltiplas condi\u00e7\u00f5es:</p> Estrutura com elif <pre><code># Verificando a faixa et\u00e1ria\nidade = 18\n\nif idade &lt; 12:\n    print(\"Crian\u00e7a\")\nelif idade &lt; 18:\n    print(\"Adolescente\")\nelif idade &lt; 65:\n    print(\"Adulto\")\nelse:\n    print(\"Idoso\")\n</code></pre>"},{"location":"trilhas/python/page-2/#operador-ternario","title":"Operador tern\u00e1rio","text":"<p>Python tamb\u00e9m suporta uma sintaxe compacta para condicionais simples:</p> Conceito <pre><code># Sintaxe: valor_se_verdadeiro if condi\u00e7\u00e3o else valor_se_falso\nidade = 20\nstatus = \"Maior de idade\" if idade &gt;= 18 else \"Menor de idade\"\nprint(status)  # Sa\u00edda: Maior de idade\n</code></pre>"},{"location":"trilhas/python/page-2/#avaliacao-de-expressoes-booleanas","title":"Avalia\u00e7\u00e3o de Express\u00f5es Booleanas","text":"<p>Python considera certos valores como \"falsos\" em contextos booleanos:</p> Valores Falsos <pre><code># Valores avaliados como False:\nif False:\n    print(\"Nunca executado\")\n\nif None:\n    print(\"Nunca executado\")\n\nif 0:\n    print(\"Nunca executado\")\n\nif \"\":  # String vazia\n    print(\"Nunca executado\")\n\nif []:  # Lista vazia\n    print(\"Nunca executado\")\n\n# Qualquer outro valor \u00e9 considerado True\nif 1:\n    print(\"Executado\")  # Ser\u00e1 impresso\n\nif \"texto\":\n    print(\"Executado\")  # Ser\u00e1 impresso\n</code></pre> <p>Cuidado com compara\u00e7\u00f5es</p> <p>Tenha cuidado ao comparar valores em Python, especialmente com tipos diferentes. Por exemplo, <code>0 == False</code> retorna <code>True</code>, mas <code>0 is False</code> retorna <code>False</code> porque s\u00e3o objetos diferentes.</p>"},{"location":"trilhas/python/page-2/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":"Classifica\u00e7\u00e3o de NotasVerifica\u00e7\u00e3o de Ano Bissexto <pre><code># Sistema de classifica\u00e7\u00e3o de notas\nnota = 85\n\nif nota &gt;= 90:\n    conceito = \"A\"\nelif nota &gt;= 80:\n    conceito = \"B\"\nelif nota &gt;= 70:\n    conceito = \"C\"\nelif nota &gt;= 60:\n    conceito = \"D\"\nelse:\n    conceito = \"F\"\n\nprint(f\"Nota: {nota}, Conceito: {conceito}\")  # Sa\u00edda: Nota: 85, Conceito: B\n</code></pre> <pre><code># Verificando se um ano \u00e9 bissexto\nano = 2024\n\nif (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0):\n    print(f\"{ano} \u00e9 um ano bissexto.\")\nelse:\n    print(f\"{ano} n\u00e3o \u00e9 um ano bissexto.\")\n</code></pre>"},{"location":"trilhas/python/page-2/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Operadores de compara\u00e7\u00e3o para avaliar rela\u00e7\u00f5es entre valores</li> <li>Operadores l\u00f3gicos para combinar express\u00f5es booleanas</li> <li>Estruturas condicionais <code>if</code>, <code>else</code> e <code>elif</code> para controlar o fluxo do programa</li> <li>Express\u00f5es tern\u00e1rias para condicionais simples em uma \u00fanica linha</li> <li>Valores considerados falsos em contextos booleanos</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre express\u00f5es condicionais</li> <li>Documenta\u00e7\u00e3o sobre operadores de compara\u00e7\u00e3o</li> </ul>"},{"location":"trilhas/python/page-2/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos estruturas de repeti\u00e7\u00e3o (loops) como <code>for</code> e <code>while</code>, que permitem executar blocos de c\u00f3digo repetidamente.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Vari\u00e1veis e Tipos de Dados</p>"},{"location":"trilhas/python/page-3/","title":"Estruturas de Repeti\u00e7\u00e3o em Python","text":""},{"location":"trilhas/python/page-3/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Estruturas de repeti\u00e7\u00e3o, tamb\u00e9m conhecidas como loops, s\u00e3o blocos de c\u00f3digo que permitem executar instru\u00e7\u00f5es repetidamente, at\u00e9 que uma condi\u00e7\u00e3o espec\u00edfica seja atingida. Elas s\u00e3o fundamentais para automatizar tarefas repetitivas e processar cole\u00e7\u00f5es de dados.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender os diferentes tipos de estruturas de repeti\u00e7\u00e3o em Python</li> <li>Aprender a usar loops <code>for</code> para itera\u00e7\u00e3o sobre sequ\u00eancias</li> <li>Dominar loops <code>while</code> para repeti\u00e7\u00f5es baseadas em condi\u00e7\u00f5es</li> <li>Compreender comandos de controle como <code>break</code> e <code>continue</code></li> <li>Aplicar loops em situa\u00e7\u00f5es pr\u00e1ticas</li> </ul>"},{"location":"trilhas/python/page-3/#loop-for","title":"Loop For","text":"<p>O loop <code>for</code> em Python \u00e9 usado para iterar sobre uma sequ\u00eancia (como lista, tupla, dicion\u00e1rio, conjunto ou string) ou outros objetos iter\u00e1veis.</p> Sintaxe B\u00e1sicaIterando sobre uma ListaIterando sobre uma String <pre><code>for item in sequ\u00eancia:\n    # c\u00f3digo a ser executado para cada item\n</code></pre> <pre><code>frutas = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\"]\nfor fruta in frutas:\n    print(fruta)\n</code></pre> <pre><code>palavra = \"Python\"\nfor letra in palavra:\n    print(letra)\n</code></pre>"},{"location":"trilhas/python/page-3/#funcao-range","title":"Fun\u00e7\u00e3o range()","text":"<p>A fun\u00e7\u00e3o <code>range()</code> \u00e9 frequentemente usada com loops <code>for</code> para gerar uma sequ\u00eancia de n\u00fameros:</p> Conceito <pre><code># range(stop) - come\u00e7a em 0, vai at\u00e9 stop-1\nfor i in range(5):\n    print(i)  # Imprime 0, 1, 2, 3, 4\n\n# range(start, stop) - come\u00e7a em start, vai at\u00e9 stop-1\nfor i in range(2, 6):\n    print(i)  # Imprime 2, 3, 4, 5\n\n# range(start, stop, step) - come\u00e7a em start, vai at\u00e9 stop-1, incrementando de step em step\nfor i in range(1, 10, 2):\n    print(i)  # Imprime 1, 3, 5, 7, 9\n</code></pre>"},{"location":"trilhas/python/page-3/#enumerate","title":"Enumerate","text":"<p>A fun\u00e7\u00e3o <code>enumerate()</code> adiciona um contador a um iter\u00e1vel, retornando pares de \u00edndice e valor:</p> Conceito <pre><code>animais = [\"gato\", \"cachorro\", \"p\u00e1ssaro\"]\nfor indice, animal in enumerate(animais):\n    print(f\"\u00cdndice {indice}: {animal}\")\n\n# Sa\u00edda:\n# \u00cdndice 0: gato\n# \u00cdndice 1: cachorro\n# \u00cdndice 2: p\u00e1ssaro\n</code></pre>"},{"location":"trilhas/python/page-3/#loop-while","title":"Loop While","text":"<p>O loop <code>while</code> repete um bloco de c\u00f3digo enquanto uma condi\u00e7\u00e3o especificada for verdadeira:</p> Sintaxe B\u00e1sicaExemplo Simples <pre><code>while condi\u00e7\u00e3o:\n    # c\u00f3digo a ser executado enquanto a condi\u00e7\u00e3o for verdadeira\n</code></pre> <pre><code>contador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1  # Importante: incrementar o contador para evitar loop infinito\n</code></pre> <p>Cuidado com Loops Infinitos</p> <p>Sempre certifique-se de que a condi\u00e7\u00e3o do loop <code>while</code> eventualmente se tornar\u00e1 falsa, caso contr\u00e1rio, voc\u00ea criar\u00e1 um loop infinito que s\u00f3 ser\u00e1 interrompido for\u00e7ando a interrup\u00e7\u00e3o do programa.</p>"},{"location":"trilhas/python/page-3/#controle-de-fluxo-em-loops","title":"Controle de Fluxo em Loops","text":""},{"location":"trilhas/python/page-3/#break","title":"break","text":"<p>A instru\u00e7\u00e3o <code>break</code> interrompe a execu\u00e7\u00e3o do loop, mesmo que a condi\u00e7\u00e3o ainda seja verdadeira:</p> Conceito <pre><code>for i in range(10):\n    if i == 5:\n        break  # Sai do loop quando i \u00e9 5\n    print(i)   # Imprime apenas 0, 1, 2, 3, 4\n</code></pre>"},{"location":"trilhas/python/page-3/#continue","title":"continue","text":"<p>A instru\u00e7\u00e3o <code>continue</code> pula a itera\u00e7\u00e3o atual e continua com a pr\u00f3xima:</p> Conceito <pre><code>for i in range(10):\n    if i % 2 == 0:  # Se i for par\n        continue    # Pula para a pr\u00f3xima itera\u00e7\u00e3o\n    print(i)        # Imprime apenas n\u00fameros \u00edmpares: 1, 3, 5, 7, 9\n</code></pre>"},{"location":"trilhas/python/page-3/#else-em-loops","title":"else em Loops","text":"<p>Python permite usar uma cl\u00e1usula <code>else</code> com loops. O bloco de c\u00f3digo no <code>else</code> \u00e9 executado quando o loop termina normalmente (sem <code>break</code>):</p> Conceito <pre><code>for i in range(5):\n    print(i)\nelse:\n    print(\"Loop conclu\u00eddo normalmente\")\n\n# Com break\nfor i in range(5):\n    if i == 3:\n        break\n    print(i)\nelse:\n    print(\"Este texto n\u00e3o ser\u00e1 impresso porque o loop foi interrompido por break\")\n</code></pre>"},{"location":"trilhas/python/page-3/#loops-aninhados","title":"Loops Aninhados","text":"<p>Podemos ter um loop dentro de outro loop, criando loops aninhados:</p> Conceito <pre><code># Criando uma matriz 3x3\nfor i in range(3):  # Loop externo\n    for j in range(3):  # Loop interno\n        print(f\"({i},{j})\", end=\" \")\n    print()  # Nova linha ap\u00f3s cada linha da matriz\n\n# Sa\u00edda:\n# (0,0) (0,1) (0,2) \n# (1,0) (1,1) (1,2) \n# (2,0) (2,1) (2,2) \n</code></pre>"},{"location":"trilhas/python/page-3/#compreensao-de-lista-list-comprehension","title":"Compreens\u00e3o de Lista (List Comprehension)","text":"<p>Python oferece uma sintaxe concisa para criar listas baseadas em listas existentes, chamada list comprehension:</p> Conceito <pre><code># Forma tradicional com loop for\nquadrados = []\nfor i in range(1, 6):\n    quadrados.append(i**2)\nprint(quadrados)  # [1, 4, 9, 16, 25]\n\n# Usando list comprehension\nquadrados = [i**2 for i in range(1, 6)]\nprint(quadrados)  # [1, 4, 9, 16, 25]\n\n# List comprehension com condi\u00e7\u00e3o\npares = [i for i in range(1, 11) if i % 2 == 0]\nprint(pares)  # [2, 4, 6, 8, 10]\n</code></pre> <p>Dica</p> <p>List comprehensions tornam o c\u00f3digo mais conciso e frequentemente mais leg\u00edvel para opera\u00e7\u00f5es simples. No entanto, para l\u00f3gica complexa, um loop tradicional pode ser mais claro.</p>"},{"location":"trilhas/python/page-3/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"trilhas/python/page-3/#calculando-a-soma-dos-numeros","title":"Calculando a Soma dos N\u00fameros","text":"Usando forUsando while <pre><code># Soma dos n\u00fameros de 1 a 10\nsoma = 0\nfor num in range(1, 11):\n    soma += num\nprint(f\"A soma dos n\u00fameros de 1 a 10 \u00e9: {soma}\")  # 55\n</code></pre> <pre><code># Soma dos n\u00fameros de 1 a 10\nsoma = 0\nnum = 1\nwhile num &lt;= 10:\n    soma += num\n    num += 1\nprint(f\"A soma dos n\u00fameros de 1 a 10 \u00e9: {soma}\")  # 55\n</code></pre>"},{"location":"trilhas/python/page-3/#encontrando-numeros-primos","title":"Encontrando N\u00fameros Primos","text":"Conceito <pre><code># Verificando se um n\u00famero \u00e9 primo\ndef eh_primo(n):\n    if n &lt;= 1:\n        return False\n    if n &lt;= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i &lt;= n:\n        if n % i == 0 ou n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Encontrando n\u00fameros primos de 1 a 20\nprimos = []\nfor i in range(1, 21):\n    if eh_primo(i):\n        primos.append(i)\n\nprint(f\"N\u00fameros primos de 1 a 20: {primos}\")  # [2, 3, 5, 7, 11, 13, 17, 19]\n</code></pre>"},{"location":"trilhas/python/page-3/#iterando-sobre-estruturas-de-dados","title":"Iterando sobre Estruturas de Dados","text":"Iterando sobre Dicion\u00e1riosIterando sobre Listas Aninhadas <pre><code>pessoa = {\n    \"nome\": \"Ana\",\n    \"idade\": 28,\n    \"profiss\u00e3o\": \"Engenheira\"\n}\n\n# Iterando sobre chaves\nfor chave in pessoa:\n    print(chave)\n\n# Iterando sobre valores\nfor valor in pessoa.values():\n    print(valor)\n\n# Iterando sobre pares chave-valor\nfor chave, valor in pessoa.items():\n    print(f\"{chave}: {valor}\")\n</code></pre> <pre><code>matriz = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\n# Acessando cada elemento da matriz\nfor linha in matriz:\n    for elemento em linha:\n        print(elemento, end=\" \")\n    print()  # Nova linha ap\u00f3s cada linha da matriz\n</code></pre>"},{"location":"trilhas/python/page-3/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Loops <code>for</code> para iterar sobre sequ\u00eancias como listas, strings e ranges</li> <li>Loops <code>while</code> para repeti\u00e7\u00f5es baseadas em condi\u00e7\u00f5es</li> <li>Comandos de controle como <code>break</code> e <code>continue</code> para modificar o fluxo do loop</li> <li>Fun\u00e7\u00e3o <code>range()</code> para gerar sequ\u00eancias num\u00e9ricas</li> <li>List comprehensions como uma forma concisa de criar listas</li> <li>Loops aninhados para trabalhar com estruturas de dados multidimensionais</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre loops for</li> <li>Documenta\u00e7\u00e3o oficial sobre loops while</li> <li>Documenta\u00e7\u00e3o sobre list comprehensions</li> </ul>"},{"location":"trilhas/python/page-3/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, aprenderemos sobre fun\u00e7\u00f5es em Python, que nos permitem organizar o c\u00f3digo em blocos reutiliz\u00e1veis.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Estruturas L\u00f3gicas e Condicionais</p>"},{"location":"trilhas/python/page-4/","title":"Cole\u00e7\u00f5es em Python","text":""},{"location":"trilhas/python/page-4/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>As cole\u00e7\u00f5es em Python s\u00e3o estruturas de dados que permitem armazenar m\u00faltiplos itens em uma \u00fanica vari\u00e1vel. Estas estruturas funcionam como cont\u00eaineres e oferecem diferentes formas de organizar e manipular dados, cada uma com caracter\u00edsticas espec\u00edficas de acesso, mutabilidade e ordena\u00e7\u00e3o.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender os diferentes tipos de cole\u00e7\u00f5es dispon\u00edveis em Python</li> <li>Aprender a utilizar listas, tuplas, dicion\u00e1rios e conjuntos</li> <li>Compreender quando usar cada tipo de cole\u00e7\u00e3o</li> <li>Dominar os m\u00e9todos e opera\u00e7\u00f5es dispon\u00edveis para cada cole\u00e7\u00e3o</li> <li>Aplicar cole\u00e7\u00f5es em situa\u00e7\u00f5es pr\u00e1ticas</li> </ul>"},{"location":"trilhas/python/page-4/#tipos-de-colecoes","title":"Tipos de Cole\u00e7\u00f5es","text":"<p>Python oferece quatro tipos principais de cole\u00e7\u00f5es:</p> <ol> <li>Listas - Cole\u00e7\u00f5es ordenadas e mut\u00e1veis</li> <li>Tuplas - Cole\u00e7\u00f5es ordenadas e imut\u00e1veis</li> <li>Dicion\u00e1rios - Cole\u00e7\u00f5es n\u00e3o-ordenadas (em vers\u00f5es &lt; 3.7) de pares chave-valor</li> <li>Conjuntos - Cole\u00e7\u00f5es n\u00e3o-ordenadas de itens \u00fanicos</li> </ol>"},{"location":"trilhas/python/page-4/#listas-lists","title":"Listas (Lists)","text":"<p>Listas s\u00e3o cole\u00e7\u00f5es ordenadas e mut\u00e1veis, permitindo itens duplicados.</p> Cria\u00e7\u00e3o de ListasAcessando ElementosModificando ListasM\u00e9todos de Listas <pre><code># Diferentes maneiras de criar listas\nnumeros = [1, 2, 3, 4, 5]\nfrutas = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\"]\nmisturada = [1, \"Python\", True, 3.14]\nvazia = []\n\n# Criando listas com a fun\u00e7\u00e3o list()\nlista_de_string = list(\"Python\")  # ['P', 'y', 't', 'h', 'o', 'n']\nlista_de_range = list(range(5))   # [0, 1, 2, 3, 4]\n</code></pre> <pre><code>frutas = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\", \"uva\", \"p\u00eara\"]\n\n# Indexa\u00e7\u00e3o come\u00e7a em 0\nprimeira = frutas[0]  # \"ma\u00e7\u00e3\"\nterceira = frutas[2]  # \"laranja\"\n\n# \u00cdndices negativos contam de tr\u00e1s para frente\nultima = frutas[-1]    # \"p\u00eara\"\npenultima = frutas[-2]  # \"uva\"\n\n# Fatiamento (slicing)\nprimeiras_tres = frutas[0:3]    # [\"ma\u00e7\u00e3\", \"banana\", \"laranja\"]\ndo_inicio = frutas[:2]          # [\"ma\u00e7\u00e3\", \"banana\"]\nate_o_fim = frutas[2:]          # [\"laranja\", \"uva\", \"p\u00eara\"]\ncopia_completa = frutas[:]      # Cria uma c\u00f3pia da lista\npulo_dois = frutas[::2]         # [\"ma\u00e7\u00e3\", \"laranja\", \"p\u00eara\"] (passo 2)\ninvertida = frutas[::-1]        # [\"p\u00eara\", \"uva\", \"laranja\", \"banana\", \"ma\u00e7\u00e3\"]\n</code></pre> <pre><code>frutas = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\"]\n\n# Alterando um elemento espec\u00edfico\nfrutas[1] = \"morango\"  # [\"ma\u00e7\u00e3\", \"morango\", \"laranja\"]\n\n# Adicionando elementos\nfrutas.append(\"uva\")          # Adiciona ao final: [\"ma\u00e7\u00e3\", \"morango\", \"laranja\", \"uva\"]\nfrutas.insert(1, \"abacaxi\")   # Insere na posi\u00e7\u00e3o 1: [\"ma\u00e7\u00e3\", \"abacaxi\", \"morango\", \"laranja\", \"uva\"]\nfrutas.extend([\"p\u00eara\", \"lim\u00e3o\"])  # Adiciona v\u00e1rios: [\"ma\u00e7\u00e3\", \"abacaxi\", \"morango\", \"laranja\", \"uva\", \"p\u00eara\", \"lim\u00e3o\"]\n\n# Removendo elementos\nfrutas.remove(\"morango\")      # Remove por valor: [\"ma\u00e7\u00e3\", \"abacaxi\", \"laranja\", \"uva\", \"p\u00eara\", \"lim\u00e3o\"]\nitem_removido = frutas.pop(1)  # Remove por \u00edndice e retorna: \"abacaxi\"\nultimo = frutas.pop()         # Remove e retorna o \u00faltimo item: \"lim\u00e3o\"\ndel frutas[0]                 # Remove por \u00edndice, sem retornar: [\"laranja\", \"uva\", \"p\u00eara\"]\n\n# Opera\u00e7\u00f5es comuns\nfrutas.clear()                # Esvazia a lista: []\n</code></pre> <pre><code>numeros = [3, 1, 4, 1, 5, 9, 2, 6]\n\n# Ordena\u00e7\u00e3o\nnumeros.sort()                 # [1, 1, 2, 3, 4, 5, 6, 9]\nnumeros.sort(reverse=True)     # [9, 6, 5, 4, 3, 2, 1, 1]\n\n# N\u00e3o modifica a lista original\nordenada = sorted(numeros)     # Retorna uma nova lista ordenada\n\n# Invertendo\nnumeros.reverse()              # Inverte a ordem dos elementos\n\n# Contagem e localiza\u00e7\u00e3o\ncontagem = numeros.count(1)    # Retorna quantas vezes 1 aparece\nindice = numeros.index(5)      # Retorna o \u00edndice da primeira ocorr\u00eancia de 5\n\n# Comprimento\ntamanho = len(numeros)         # Retorna o n\u00famero de elementos na lista\n</code></pre> <p>Dica: Compreens\u00e3o de Listas</p> <p>As compreens\u00f5es de listas (list comprehensions) oferecem uma forma concisa e elegante de criar listas:</p> <pre><code># Criando uma lista com os quadrados dos n\u00fameros de 1 a 10\nquadrados = [x**2 for x in range(1, 11)]  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# Filtrando apenas n\u00fameros pares\npares = [x for x in range(1, 11) if x % 2 == 0]  # [2, 4, 6, 8, 10]\n\n# Criando uma matriz 3x3\nmatriz = [[i * 3 + j + 1 for j in range(3)] for i in range(3)]\n# [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n</code></pre>"},{"location":"trilhas/python/page-4/#tuplas-tuples","title":"Tuplas (Tuples)","text":"<p>Tuplas s\u00e3o cole\u00e7\u00f5es ordenadas e imut\u00e1veis, permitindo itens duplicados. Uma vez criada, uma tupla n\u00e3o pode ser modificada.</p> Cria\u00e7\u00e3o de TuplasAcessando ElementosDesempacotamento de TuplasOpera\u00e7\u00f5es com Tuplas <pre><code># Diferentes formas de criar tuplas\ncoordenadas = (10, 20)\ncores = (\"vermelho\", \"verde\", \"azul\")\nmisturada = (1, \"Python\", True)\n\n# Tupla de um elemento (precisa da v\u00edrgula)\nsingleton = (42,)  # Sem a v\u00edrgula seria apenas um inteiro entre par\u00eanteses\n\n# Criando tuplas com a fun\u00e7\u00e3o tuple()\ntupla_de_lista = tuple([1, 2, 3])  # (1, 2, 3)\ntupla_de_string = tuple(\"Python\")  # ('P', 'y', 't', 'h', 'o', 'n')\n\n# Tupla sem par\u00eanteses (empacotamento)\npessoa = \"Jo\u00e3o\", 30, \"Engenheiro\"  # (\"Jo\u00e3o\", 30, \"Engenheiro\")\n</code></pre> <pre><code>cores = (\"vermelho\", \"verde\", \"azul\", \"amarelo\", \"roxo\")\n\n# Acessando elementos (semelhante \u00e0s listas)\nprimeira_cor = cores[0]     # \"vermelho\"\nultima_cor = cores[-1]      # \"roxo\"\n\n# Fatiamento (slicing)\nprimeiras_tres = cores[0:3]  # (\"vermelho\", \"verde\", \"azul\")\n\n# Tentando modificar uma tupla gera um erro\n# cores[0] = \"preto\"  # TypeError: 'tuple' object does not support item assignment\n</code></pre> <pre><code># Desempacotamento - atribuindo elementos a vari\u00e1veis\npessoa = (\"Jo\u00e3o\", 30, \"Engenheiro\")\nnome, idade, profissao = pessoa  # nome=\"Jo\u00e3o\", idade=30, profissao=\"Engenheiro\"\n\n# Usando _ para ignorar valores\ncoordenadas = (10, 20, 30)\nx, _, z = coordenadas  # x=10, z=30, ignorando o valor do meio\n\n# Desempacotando com *\nnumeros = (1, 2, 3, 4, 5)\nprimeiro, *meio, ultimo = numeros  # primeiro=1, meio=[2, 3, 4], ultimo=5\n</code></pre> <pre><code>cores1 = (\"vermelho\", \"verde\")\ncores2 = (\"azul\", \"amarelo\")\n\n# Concatena\u00e7\u00e3o\ntodas_cores = cores1 + cores2  # (\"vermelho\", \"verde\", \"azul\", \"amarelo\")\n\n# Repeti\u00e7\u00e3o\nrepetida = cores1 * 3  # (\"vermelho\", \"verde\", \"vermelho\", \"verde\", \"vermelho\", \"verde\")\n\n# Verificando se um elemento existe\ntem_verde = \"verde\" in cores1  # True\n\n# Contagem e localiza\u00e7\u00e3o (mesmos m\u00e9todos das listas)\ncontagem = todas_cores.count(\"verde\")  # Retorna quantas vezes \"verde\" aparece\nindice = todas_cores.index(\"azul\")     # Retorna o \u00edndice da primeira ocorr\u00eancia de \"azul\"\n</code></pre> <p>Por que usar Tuplas?</p> <ul> <li>Tuplas s\u00e3o imut\u00e1veis, o que as torna adequadas para dados que n\u00e3o devem ser alterados.</li> <li>Podem ser usadas como chaves de dicion\u00e1rios (listas n\u00e3o podem).</li> <li>Geralmente mais r\u00e1pidas que listas para opera\u00e7\u00f5es comuns.</li> <li>Indicam claramente que os dados n\u00e3o devem ser modificados.</li> </ul>"},{"location":"trilhas/python/page-4/#dicionarios-dictionaries","title":"Dicion\u00e1rios (Dictionaries)","text":"<p>Dicion\u00e1rios s\u00e3o cole\u00e7\u00f5es de pares chave-valor, n\u00e3o-ordenadas (antes do Python 3.7) ou ordenadas (a partir do Python 3.7) pela ordem de inser\u00e7\u00e3o, mut\u00e1veis e sem duplicatas nas chaves.</p> Cria\u00e7\u00e3o de Dicion\u00e1riosAcessando e ModificandoM\u00e9todos de Dicion\u00e1riosIterando sobre Dicion\u00e1rios <pre><code># Diferentes formas de criar dicion\u00e1rios\npessoa = {\"nome\": \"Ana\", \"idade\": 30, \"profissao\": \"Engenheira\"}\npontos = {1: \"A\", 2: \"B\", 3: \"C\"}\nmisturado = {\"chave\": 1, 2: \"valor\", \"lista\": [1, 2, 3]}\nvazio = {}\n\n# Criando com a fun\u00e7\u00e3o dict()\npessoa2 = dict(nome=\"Carlos\", idade=25, profissao=\"M\u00e9dico\")\n\n# Criando a partir de sequ\u00eancias de pares\nitems = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\nmeu_dict = dict(items)\n</code></pre> <pre><code>pessoa = {\"nome\": \"Ana\", \"idade\": 30, \"profissao\": \"Engenheira\"}\n\n# Acessando valores\nnome = pessoa[\"nome\"]  # \"Ana\"\n\n# Se a chave n\u00e3o existir, gera KeyError\n# email = pessoa[\"email\"]  # KeyError\n\n# M\u00e9todo seguro para acessar (n\u00e3o gera erro se a chave n\u00e3o existir)\nemail = pessoa.get(\"email\")  # None\nemail = pessoa.get(\"email\", \"n\u00e3o informado\")  # \"n\u00e3o informado\" (valor padr\u00e3o)\n\n# Modificando valores existentes\npessoa[\"idade\"] = 31\n\n# Adicionando novos pares chave-valor\npessoa[\"email\"] = \"ana@exemplo.com\"\n\n# Removendo pares\nprofissao = pessoa.pop(\"profissao\")  # Remove e retorna: \"Engenheira\"\ndel pessoa[\"idade\"]  # Remove sem retornar\n\n# Limpando o dicion\u00e1rio\npessoa.clear()  # {}\n</code></pre> <pre><code>pessoa = {\"nome\": \"Ana\", \"idade\": 30, \"profissao\": \"Engenheira\"}\n\n# Obter todas as chaves\nchaves = pessoa.keys()  # dict_keys(['nome', 'idade', 'profissao'])\n\n# Obter todos os valores\nvalores = pessoa.values()  # dict_values(['Ana', 30, 'Engenheira'])\n\n# Obter todos os pares chave-valor como tuplas\nitens = pessoa.items()  # dict_items([('nome', 'Ana'), ('idade', 30), ('profissao', 'Engenheira')])\n\n# Atualizar o dicion\u00e1rio com outro dicion\u00e1rio\npessoa.update({\"email\": \"ana@exemplo.com\", \"telefone\": \"123456789\"})\n\n# Obter e remover um item, com valor padr\u00e3o se a chave n\u00e3o existir\nhobbie = pessoa.pop(\"hobbie\", \"N\u00e3o informado\")\n\n# Obter valor, criando a chave se n\u00e3o existir\nendereco = pessoa.setdefault(\"endereco\", \"Desconhecido\")\n</code></pre> <pre><code>pessoa = {\"nome\": \"Ana\", \"idade\": 30, \"profissao\": \"Engenheira\"}\n\n# Iterando sobre as chaves (comportamento padr\u00e3o)\nfor chave in pessoa:\n    print(chave, pessoa[chave])\n\n# Iterando sobre os valores\nfor valor in pessoa.values():\n    print(valor)\n\n# Iterando sobre pares chave-valor\nfor chave, valor in pessoa.items():\n    print(f\"{chave}: {valor}\")\n</code></pre> <p>Dica: Compreens\u00e3o de Dicion\u00e1rios</p> <p>Assim como as listas, os dicion\u00e1rios tamb\u00e9m possuem compreens\u00f5es:</p> <pre><code># Criando um dicion\u00e1rio com n\u00fameros e seus quadrados\nquadrados = {x: x**2 for x in range(1, 6)}  # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# Filtrando itens\nmaiores = {k: v for k, v in quadrados.items() if v &gt; 10}  # {4: 16, 5: 25}\n</code></pre>"},{"location":"trilhas/python/page-4/#conjuntos-sets","title":"Conjuntos (Sets)","text":"<p>Conjuntos s\u00e3o cole\u00e7\u00f5es n\u00e3o-ordenadas, mut\u00e1veis e sem itens duplicados.</p> Cria\u00e7\u00e3o de ConjuntosOpera\u00e7\u00f5es com ConjuntosOpera\u00e7\u00f5es Matem\u00e1ticasOpera\u00e7\u00f5es de Compara\u00e7\u00e3o <pre><code># Diferentes formas de criar conjuntos\nfrutas = {\"ma\u00e7\u00e3\", \"banana\", \"laranja\"}\nnumeros = {1, 2, 3, 4, 5}\n\n# Duplicatas s\u00e3o automaticamente removidas\nletras = {\"a\", \"b\", \"c\", \"a\", \"d\", \"b\"}  # {\"a\", \"b\", \"c\", \"d\"}\n\n# Conjunto vazio (n\u00e3o pode usar {}, que cria um dicion\u00e1rio vazio)\nvazio = set()\n\n# Criando a partir de outras sequ\u00eancias\nvogais = set(\"aeiou\")  # {\"a\", \"e\", \"i\", \"o\", \"u\"}\nunicos = set([1, 2, 2, 3, 3, 3, 4])  # {1, 2, 3, 4}\n</code></pre> <pre><code># Adicionando elementos\nfrutas = {\"ma\u00e7\u00e3\", \"banana\", \"laranja\"}\nfrutas.add(\"uva\")  # {\"ma\u00e7\u00e3\", \"banana\", \"laranja\", \"uva\"}\n\n# Adicionando m\u00faltiplos elementos\nfrutas.update([\"p\u00eara\", \"abacaxi\"])  # {\"ma\u00e7\u00e3\", \"banana\", \"laranja\", \"uva\", \"p\u00eara\", \"abacaxi\"}\n\n# Removendo elementos\nfrutas.remove(\"banana\")  # Gera erro se o elemento n\u00e3o existir\nfrutas.discard(\"manga\")  # N\u00e3o gera erro se o elemento n\u00e3o existir\nelemento = frutas.pop()  # Remove e retorna um elemento arbitr\u00e1rio\n\n# Limpando o conjunto\nfrutas.clear()  # set()\n</code></pre> <pre><code>A = {1, 2, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\n\n# Uni\u00e3o (elementos em A ou B)\nunion = A | B  # ou A.union(B)\n# {1, 2, 3, 4, 5, 6, 7, 8}\n\n# Interse\u00e7\u00e3o (elementos em A e B)\nintersection = A &amp; B  # ou A.intersection(B)\n# {4, 5}\n\n# Diferen\u00e7a (elementos em A, mas n\u00e3o em B)\ndifference = A - B  # ou A.difference(B)\n# {1, 2, 3}\n\n# Diferen\u00e7a sim\u00e9trica (elementos em A ou B, mas n\u00e3o em ambos)\nsymmetric_difference = A ^ B  # ou A.symmetric_difference(B)\n# {1, 2, 3, 6, 7, 8}\n</code></pre> <pre><code>A = {1, 2, 3}\nB = {1, 2, 3, 4, 5}\nC = {1, 2, 3}\n\n# Verificando se um conjunto \u00e9 subconjunto de outro\nprint(A.issubset(B))  # True\nprint(A &lt;= B)         # True\n\n# Verificando se um conjunto \u00e9 superconjunto de outro\nprint(B.issuperset(A))  # True\nprint(B &gt;= A)           # True\n\n# Verificando igualdade\nprint(A == C)  # True\n\n# Verificando se conjuntos s\u00e3o disjuntos (n\u00e3o t\u00eam elementos em comum)\nD = {6, 7, 8}\nprint(A.isdisjoint(D))  # True\n</code></pre> <p>Restri\u00e7\u00f5es de Conjuntos</p> <ul> <li>Apenas itens imut\u00e1veis (como strings, n\u00fameros e tuplas) podem ser elementos de conjuntos.</li> <li>Listas, dicion\u00e1rios e outros conjuntos n\u00e3o podem ser elementos de conjuntos.</li> <li>Conjuntos n\u00e3o t\u00eam \u00edndices, portanto voc\u00ea n\u00e3o pode acessar elementos por posi\u00e7\u00e3o.</li> </ul>"},{"location":"trilhas/python/page-4/#collections-module","title":"Collections Module","text":"<p>O m\u00f3dulo <code>collections</code> oferece alternativas e extens\u00f5es \u00e0s cole\u00e7\u00f5es padr\u00e3o do Python:</p> CounterdefaultdictOrderedDictnamedtupledeque <pre><code>from collections import Counter\n\n# Contando ocorr\u00eancias de elementos\ntexto = \"mississippi\"\ncontagem = Counter(texto)  # Counter({'i': 4, 's': 4, 'p': 2, 'm': 1})\n\n# Elementos mais comuns\nmais_comuns = contagem.most_common(2)  # [('i', 4), ('s', 4)]\n\n# Opera\u00e7\u00f5es matem\u00e1ticas\nc1 = Counter(\"aaabbc\")\nc2 = Counter(\"bcccdd\")\nprint(c1 + c2)  # Counter({'c': 5, 'b': 3, 'a': 3, 'd': 2})\nprint(c1 - c2)  # Counter({'a': 3, 'b': 1})\n</code></pre> <pre><code>from collections import defaultdict\n\n# Dicion\u00e1rio com valor padr\u00e3o para chaves inexistentes\ncontagem = defaultdict(int)  # Valor padr\u00e3o: 0\n\ntexto = \"mississippi\"\nfor letra in texto:\n    contagem[letra] += 1  # Mesmo para chaves que n\u00e3o existiam antes\n\nprint(dict(contagem))  # {'m': 1, 'i': 4, 's': 4, 'p': 2}\n\n# Com outros tipos\nlista_padrao = defaultdict(list)\nlista_padrao['frutas'].append('ma\u00e7\u00e3')  # N\u00e3o precisa inicializar a lista\n</code></pre> <pre><code>from collections import OrderedDict\n\n# Preserva a ordem de inser\u00e7\u00e3o (relevante para Python &lt; 3.7)\ncores = OrderedDict()\ncores['vermelho'] = '#FF0000'\ncores['verde'] = '#00FF00'\ncores['azul'] = '#0000FF'\n\n# A ordem \u00e9 preservada na itera\u00e7\u00e3o\nfor cor, codigo in cores.items():\n    print(f\"{cor}: {codigo}\")\n</code></pre> <pre><code>from collections import namedtuple\n\n# Criando uma \"classe\" simples\nPonto = namedtuple('Ponto', ['x', 'y'])\n\np = Ponto(10, 20)\nprint(p.x, p.y)  # 10 20\n\n# Tamb\u00e9m funciona como uma tupla normal\nprint(p[0], p[1])  # 10 20\n\n# Desempacotando\nx, y = p\nprint(x, y)  # 10 20\n</code></pre> <pre><code>from collections import deque\n\n# Fila de duas pontas (double-ended queue)\nfila = deque(['a', 'b', 'c'])\n\n# Adicionando elementos\nfila.append('d')         # ['a', 'b', 'c', 'd']\nfila.appendleft('z')     # ['z', 'a', 'b', 'c', 'd']\n\n# Removendo elementos\nultimo = fila.pop()      # 'd'\nprimeiro = fila.popleft() # 'z'\n\n# Rotacionando a fila\nfila.rotate(1)  # Move um lugar para a direita\nfila.rotate(-1)  # Move um lugar para a esquerda\n</code></pre>"},{"location":"trilhas/python/page-4/#escolhendo-a-colecao-certa","title":"Escolhendo a Cole\u00e7\u00e3o Certa","text":"<p>Cada tipo de cole\u00e7\u00e3o tem suas pr\u00f3prias caracter\u00edsticas e casos de uso ideais:</p> <p>Quando usar cada cole\u00e7\u00e3o</p> <ul> <li>Listas: Quando a ordem \u00e9 importante e os elementos podem mudar</li> <li>Tuplas: Para dados fixos, imut\u00e1veis e/ou heterog\u00eaneos</li> <li>Dicion\u00e1rios: Quando voc\u00ea precisa associar valores a chaves para acesso r\u00e1pido</li> <li>Conjuntos: Quando voc\u00ea precisa garantir elementos \u00fanicos ou realizar opera\u00e7\u00f5es de conjuntos</li> </ul> Exemplos de Uso <pre><code># Lista: Cole\u00e7\u00e3o ordenada de itens similares\ntarefas = [\"Estudar Python\", \"Fazer exerc\u00edcios\", \"Revisar c\u00f3digo\"]\n\n# Tupla: Representando estruturas fixas, como coordenadas\nponto = (10, 20, 30)  # x, y, z\n\n# Dicion\u00e1rio: Armazenando informa\u00e7\u00f5es relacionadas\naluno = {\n    \"nome\": \"Maria\",\n    \"idade\": 22,\n    \"curso\": \"Ci\u00eancia da Computa\u00e7\u00e3o\",\n    \"notas\": [9.5, 8.0, 7.5]\n}\n\n# Conjunto: Removendo duplicatas e verificando pertin\u00eancia\ntags = {\"python\", \"programa\u00e7\u00e3o\", \"c\u00f3digo\", \"python\"}  # Duplicata removida\ntem_java = \"java\" in tags  # Verifica\u00e7\u00e3o r\u00e1pida: False\n</code></pre>"},{"location":"trilhas/python/page-4/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Listas: Cole\u00e7\u00f5es ordenadas e mut\u00e1veis</li> <li>Tuplas: Cole\u00e7\u00f5es ordenadas e imut\u00e1veis</li> <li>Dicion\u00e1rios: Cole\u00e7\u00f5es de pares chave-valor, mut\u00e1veis e com chaves \u00fanicas</li> <li>Conjuntos: Cole\u00e7\u00f5es de elementos \u00fanicos, n\u00e3o-ordenadas e mut\u00e1veis</li> <li>M\u00f3dulo Collections: Cole\u00e7\u00f5es especializadas como Counter, defaultdict e namedtuple</li> <li>Opera\u00e7\u00f5es e m\u00e9todos espec\u00edficos para cada tipo de cole\u00e7\u00e3o</li> <li>Compreens\u00f5es para criar listas e dicion\u00e1rios de forma concisa</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre listas</li> <li>Documenta\u00e7\u00e3o oficial sobre tuplas</li> <li>Documenta\u00e7\u00e3o oficial sobre dicion\u00e1rios</li> <li>Documenta\u00e7\u00e3o oficial sobre conjuntos</li> <li>Documenta\u00e7\u00e3o do m\u00f3dulo Collections</li> </ul>"},{"location":"trilhas/python/page-4/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos fun\u00e7\u00f5es em Python, que nos permitem organizar c\u00f3digo em blocos reutiliz\u00e1veis.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Estruturas de Repeti\u00e7\u00e3o</p>"},{"location":"trilhas/python/page-5/","title":"Fun\u00e7\u00f5es em Python","text":""},{"location":"trilhas/python/page-5/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Fun\u00e7\u00f5es s\u00e3o blocos de c\u00f3digo reutiliz\u00e1veis que realizam uma tarefa espec\u00edfica. Elas permitem organizar o c\u00f3digo, evitar repeti\u00e7\u00f5es e facilitar a manuten\u00e7\u00e3o. As fun\u00e7\u00f5es s\u00e3o um dos conceitos fundamentais da programa\u00e7\u00e3o e um pilar da programa\u00e7\u00e3o modular.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito e a import\u00e2ncia das fun\u00e7\u00f5es</li> <li>Aprender a definir e chamar fun\u00e7\u00f5es</li> <li>Compreender par\u00e2metros e argumentos</li> <li>Explorar o retorno de valores</li> <li>Dominar t\u00e9cnicas avan\u00e7adas como fun\u00e7\u00f5es an\u00f4nimas (lambda)</li> <li>Aplicar fun\u00e7\u00f5es em situa\u00e7\u00f5es pr\u00e1ticas</li> </ul>"},{"location":"trilhas/python/page-5/#definindo-funcoes","title":"Definindo Fun\u00e7\u00f5es","text":"<p>Em Python, fun\u00e7\u00f5es s\u00e3o definidas com a palavra-chave <code>def</code>, seguida do nome da fun\u00e7\u00e3o e de par\u00eanteses que podem conter par\u00e2metros.</p> Sintaxe B\u00e1sicaExemplo Simples <pre><code>def nome_da_funcao(parametro1, parametro2, ...):\n    \"\"\"Docstring: documenta\u00e7\u00e3o da fun\u00e7\u00e3o.\"\"\"\n    # Corpo da fun\u00e7\u00e3o\n    # C\u00f3digo que ser\u00e1 executado quando a fun\u00e7\u00e3o for chamada\n    return valor  # Opcional\n</code></pre> <pre><code>def saudacao():\n    \"\"\"Imprime uma sauda\u00e7\u00e3o simples.\"\"\"\n    print(\"Ol\u00e1, mundo!\")\n\n# Chamando a fun\u00e7\u00e3o\nsaudacao()  # Sa\u00edda: Ol\u00e1, mundo!\n</code></pre> <p>Boas Pr\u00e1ticas</p> <ul> <li>Use nomes descritivos para fun\u00e7\u00f5es (verbos que indiquem a\u00e7\u00e3o)</li> <li>Siga a conven\u00e7\u00e3o snake_case para nomes de fun\u00e7\u00f5es em Python</li> <li>Inclua docstrings para documentar o prop\u00f3sito da fun\u00e7\u00e3o</li> <li>Mantenha fun\u00e7\u00f5es pequenas e focadas em uma \u00fanica tarefa</li> </ul>"},{"location":"trilhas/python/page-5/#parametros-e-argumentos","title":"Par\u00e2metros e Argumentos","text":"<p>Par\u00e2metros s\u00e3o vari\u00e1veis listadas na defini\u00e7\u00e3o da fun\u00e7\u00e3o. Argumentos s\u00e3o os valores reais passados para a fun\u00e7\u00e3o quando ela \u00e9 chamada.</p> Par\u00e2metros PosicionaisPar\u00e2metros Nomeados <pre><code>def somar(a, b):\n    \"\"\"Soma dois n\u00fameros e retorna o resultado.\"\"\"\n    return a + b\n\n# Chamando com argumentos posicionais\nresultado = somar(5, 3)  # resultado = 8\n</code></pre> <pre><code>def saudacao(nome, mensagem):\n    \"\"\"Cria uma sauda\u00e7\u00e3o personalizada.\"\"\"\n    return f\"{mensagem}, {nome}!\"\n\n# Argumentos nomeados (a ordem n\u00e3o importa)\nmsg = saudacao(mensagem=\"Bom dia\", nome=\"Ana\")\nprint(msg)  # Sa\u00edda: Bom dia, Ana!\n\n# Misturando posicionais e nomeados\n# Posicionais v\u00eam primeiro, depois os nomeados\nmsg = saudacao(\"Carlos\", mensagem=\"Boa tarde\")\nprint(msg)  # Sa\u00edda: Boa tarde, Carlos!\n</code></pre>"},{"location":"trilhas/python/page-5/#parametros-padrao","title":"Par\u00e2metros Padr\u00e3o","text":"<p>Os par\u00e2metros podem ter valores padr\u00e3o que s\u00e3o usados quando um argumento n\u00e3o \u00e9 fornecido.</p> Conceito <pre><code>def saudacao(nome, mensagem=\"Ol\u00e1\"):\n    \"\"\"Cria uma sauda\u00e7\u00e3o com mensagem padr\u00e3o opcional.\"\"\"\n    return f\"{mensagem}, {nome}!\"\n\nprint(saudacao(\"Maria\"))         # Sa\u00edda: Ol\u00e1, Maria!\nprint(saudacao(\"Jo\u00e3o\", \"Oi\"))    # Sa\u00edda: Oi, Jo\u00e3o!\n</code></pre> <p>Cuidado com Valores Padr\u00e3o Mut\u00e1veis</p> <p>Nunca use tipos mut\u00e1veis (como listas ou dicion\u00e1rios) como valores padr\u00e3o. Eles s\u00e3o avaliados apenas uma vez, quando a fun\u00e7\u00e3o \u00e9 definida.</p> <pre><code># Problem\u00e1tico:\ndef adicionar_item(item, lista=[]):\n    lista.append(item)\n    return lista\n\n# Correto:\ndef adicionar_item(item, lista=None):\n    if lista is None:\n        lista = []\n    lista.append(item)\n    return lista\n</code></pre>"},{"location":"trilhas/python/page-5/#numero-variavel-de-argumentos","title":"N\u00famero Vari\u00e1vel de Argumentos","text":"<p>Python permite definir fun\u00e7\u00f5es que aceitam um n\u00famero vari\u00e1vel de argumentos.</p> *args (Argumentos Posicionais)**kwargs (Argumentos Nomeados)Combinando Todos os Tipos <pre><code>def soma_tudo(*args):\n    \"\"\"Soma todos os argumentos posicionais.\"\"\"\n    total = 0\n    for numero in args:\n        total += numero\n    return total\n\nprint(soma_tudo(1, 2, 3))        # Sa\u00edda: 6\nprint(soma_tudo(1, 2, 3, 4, 5))  # Sa\u00edda: 15\n</code></pre> <pre><code>def info_pessoa(**kwargs):\n    \"\"\"Imprime informa\u00e7\u00f5es sobre uma pessoa.\"\"\"\n    for chave, valor in kwargs.items():\n        print(f\"{chave}: {valor}\")\n\ninfo_pessoa(nome=\"Ana\", idade=30, profissao=\"Engenheira\")\n# Sa\u00edda:\n# nome: Ana\n# idade: 30\n# profissao: Engenheira\n</code></pre> <pre><code>def minha_funcao(arg1, arg2, *args, kwarg1=\"default\", **kwargs):\n    \"\"\"Demonstra todos os tipos de argumentos.\"\"\"\n    print(f\"arg1: {arg1}\")\n    print(f\"arg2: {arg2}\")\n    print(f\"args: {args}\")\n    print(f\"kwarg1: {kwarg1}\")\n    print(f\"kwargs: {kwargs}\")\n\nminha_funcao(1, 2, 3, 4, 5, kwarg1=\"personalizado\", x=10, y=20)\n# Sa\u00edda:\n# arg1: 1\n# arg2: 2\n# args: (3, 4, 5)\n# kwarg1: personalizado\n# kwargs: {'x': 10, 'y': 20}\n</code></pre>"},{"location":"trilhas/python/page-5/#retorno-de-valores","title":"Retorno de Valores","text":"<p>A instru\u00e7\u00e3o <code>return</code> \u00e9 usada para especificar o valor que uma fun\u00e7\u00e3o deve retornar. Uma fun\u00e7\u00e3o pode retornar zero, um ou m\u00faltiplos valores.</p> Sem Retorno Expl\u00edcitoRetornando um ValorRetornando M\u00faltiplos ValoresRetorno Condicional <pre><code>def saudacao(nome):\n    \"\"\"Imprime uma sauda\u00e7\u00e3o e n\u00e3o retorna valor expl\u00edcito.\"\"\"\n    print(f\"Ol\u00e1, {nome}!\")\n\n# A fun\u00e7\u00e3o retorna None implicitamente\nresultado = saudacao(\"Maria\")\nprint(f\"Valor retornado: {resultado}\")  # Sa\u00edda: Valor retornado: None\n</code></pre> <pre><code>def quadrado(numero):\n    \"\"\"Retorna o quadrado de um n\u00famero.\"\"\"\n    return numero ** 2\n\nresultado = quadrado(5)\nprint(f\"O quadrado de 5 \u00e9 {resultado}\")  # Sa\u00edda: O quadrado de 5 \u00e9 25\n</code></pre> <pre><code>def minmax(numeros):\n    \"\"\"Retorna o menor e o maior valor de uma sequ\u00eancia.\"\"\"\n    return min(numeros), max(numeros)\n\n# Desempacotamento de tupla\nmenor, maior = minmax([5, 2, 8, 1, 9])\nprint(f\"Menor: {menor}, Maior: {maior}\")  # Sa\u00edda: Menor: 1, Maior: 9\n</code></pre> <pre><code>def divisao_segura(a, b):\n    \"\"\"Divide a por b, tratando divis\u00e3o por zero.\"\"\"\n    if b == 0:\n        return \"Erro: Divis\u00e3o por zero\"\n    return a / b\n\nprint(divisao_segura(10, 2))  # Sa\u00edda: 5.0\nprint(divisao_segura(10, 0))  # Sa\u00edda: Erro: Divis\u00e3o por zero\n</code></pre>"},{"location":"trilhas/python/page-5/#escopo-de-variaveis","title":"Escopo de Vari\u00e1veis","text":"<p>As vari\u00e1veis em Python t\u00eam diferentes escopos (visibilidade), dependendo de onde s\u00e3o definidas.</p> Escopo Local vs. GlobalModificando Vari\u00e1veis GlobaisEscopo Nonlocal <pre><code># Vari\u00e1vel global\nx = 10\n\ndef funcao():\n    # Vari\u00e1vel local\n    y = 5\n    print(f\"Dentro da fun\u00e7\u00e3o - x: {x}, y: {y}\")\n\nfuncao()  # Sa\u00edda: Dentro da fun\u00e7\u00e3o - x: 10, y: 5\n\n# A vari\u00e1vel y n\u00e3o est\u00e1 dispon\u00edvel aqui\nprint(f\"Fora da fun\u00e7\u00e3o - x: {x}\")\n# print(f\"y: {y}\")  # Erro: NameError: name 'y' is not defined\n</code></pre> <pre><code>contador = 0\n\ndef incrementar():\n    global contador  # Declara que contador se refere \u00e0 vari\u00e1vel global\n    contador += 1\n    print(f\"Contador dentro da fun\u00e7\u00e3o: {contador}\")\n\nprint(f\"Contador antes: {contador}\")  # Sa\u00edda: Contador antes: 0\nincrementar()                         # Sa\u00edda: Contador dentro da fun\u00e7\u00e3o: 1\nprint(f\"Contador depois: {contador}\") # Sa\u00edda: Contador depois: 1\n</code></pre> <pre><code>def externa():\n    x = 10\n\n    def interna():\n        nonlocal x  # Refere-se \u00e0 vari\u00e1vel x da fun\u00e7\u00e3o externa\n        x += 5\n        print(f\"x dentro da fun\u00e7\u00e3o interna: {x}\")\n\n    print(f\"x antes da fun\u00e7\u00e3o interna: {x}\")\n    interna()\n    print(f\"x depois da fun\u00e7\u00e3o interna: {x}\")\n\nexterna()\n# Sa\u00edda:\n# x antes da fun\u00e7\u00e3o interna: 10\n# x dentro da fun\u00e7\u00e3o interna: 15\n# x depois da fun\u00e7\u00e3o interna: 15\n</code></pre>"},{"location":"trilhas/python/page-5/#funcoes-anonimas-lambda","title":"Fun\u00e7\u00f5es An\u00f4nimas (Lambda)","text":"<p>Fun\u00e7\u00f5es lambda s\u00e3o pequenas fun\u00e7\u00f5es an\u00f4nimas definidas com a palavra-chave <code>lambda</code>. Elas podem ter qualquer n\u00famero de argumentos, mas apenas uma express\u00e3o.</p> Sintaxe B\u00e1sicaUso com Fun\u00e7\u00f5es de Ordem Superior <pre><code># lambda argumentos: express\u00e3o\nquadrado = lambda x: x ** 2\n\nprint(quadrado(5))  # Sa\u00edda: 25\n</code></pre> <pre><code># Ordenando uma lista de tuplas pelo segundo elemento\npares = [(1, 'um'), (3, 'tr\u00eas'), (2, 'dois'), (4, 'quatro')]\n\n# Usando lambda como fun\u00e7\u00e3o de chave para sorted()\npares_ordenados = sorted(pares, key=lambda x: x[1])\nprint(pares_ordenados)  # [(4, 'quatro'), (2, 'dois'), (3, 'tr\u00eas'), (1, 'um')]\n\n# Usando com filter()\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(pares)  # [2, 4, 6, 8, 10]\n\n# Usando com map()\nquadrados = list(map(lambda x: x ** 2, numeros))\nprint(quadrados)  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre> <p>Quando Usar Lambda vs. Fun\u00e7\u00f5es Regulares</p> <p>Use lambdas para fun\u00e7\u00f5es simples e de uso \u00fanico. Para l\u00f3gica mais complexa ou c\u00f3digo reutiliz\u00e1vel, prefira fun\u00e7\u00f5es regulares definidas com <code>def</code>.</p>"},{"location":"trilhas/python/page-5/#recursividade","title":"Recursividade","text":"<p>Uma fun\u00e7\u00e3o recursiva \u00e9 uma fun\u00e7\u00e3o que chama a si mesma dentro de sua defini\u00e7\u00e3o.</p> Exemplo: FatorialExemplo: Fibonacci <pre><code>def fatorial(n):\n    \"\"\"Calcula o fatorial de n recursivamente.\"\"\"\n    if n &lt;= 1:\n        return 1\n    return n * fatorial(n - 1)\n\nprint(fatorial(5))  # Sa\u00edda: 120 (5! = 5 * 4 * 3 * 2 * 1)\n</code></pre> <pre><code>def fibonacci(n):\n    \"\"\"Retorna o n-\u00e9simo n\u00famero da sequ\u00eancia de Fibonacci.\"\"\"\n    if n &lt;= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Primeiros 10 n\u00fameros de Fibonacci\nfor i in range(10):\n    print(fibonacci(i), end=\" \")  # Sa\u00edda: 0 1 1 2 3 5 8 13 21 34\n</code></pre> <p>Cuidado com Recurs\u00e3o Profunda</p> <p>Python tem um limite padr\u00e3o para a profundidade da recurs\u00e3o (normalmente 1000). Para c\u00e1lculos complexos, considere abordagens iterativas ou otimiza\u00e7\u00f5es como memoiza\u00e7\u00e3o.</p>"},{"location":"trilhas/python/page-5/#funcoes-como-objetos-de-primeira-classe","title":"Fun\u00e7\u00f5es como Objetos de Primeira Classe","text":"<p>Em Python, fun\u00e7\u00f5es s\u00e3o objetos de primeira classe, o que significa que podem ser: - Atribu\u00eddas a vari\u00e1veis - Passadas como argumentos para outras fun\u00e7\u00f5es - Retornadas por outras fun\u00e7\u00f5es - Armazenadas em estruturas de dados</p> Fun\u00e7\u00f5es como Vari\u00e1veisFun\u00e7\u00f5es como ArgumentosFun\u00e7\u00f5es Retornando Fun\u00e7\u00f5es <pre><code>def saudacao(nome):\n    return f\"Ol\u00e1, {nome}!\"\n\n# Atribuindo fun\u00e7\u00e3o a uma vari\u00e1vel\nf = saudacao\n\n# Chamando atrav\u00e9s da vari\u00e1vel\nprint(f(\"Maria\"))  # Sa\u00edda: Ol\u00e1, Maria!\n</code></pre> <pre><code>def aplicar_operacao(func, valor):\n    \"\"\"Aplica uma fun\u00e7\u00e3o a um valor e retorna o resultado.\"\"\"\n    return func(valor)\n\ndef dobro(x):\n    return x * 2\n\ndef quadrado(x):\n    return x ** 2\n\nprint(aplicar_operacao(dobro, 5))     # Sa\u00edda: 10\nprint(aplicar_operacao(quadrado, 5))  # Sa\u00edda: 25\n</code></pre> <pre><code>def criar_multiplicador(fator):\n    \"\"\"Retorna uma fun\u00e7\u00e3o que multiplica pelo fator especificado.\"\"\"\n    def multiplicar(x):\n        return x * fator\n    return multiplicar\n\nduplicar = criar_multiplicador(2)\ntriplicar = criar_multiplicador(3)\n\nprint(duplicar(5))   # Sa\u00edda: 10\nprint(triplicar(5))  # Sa\u00edda: 15\n</code></pre>"},{"location":"trilhas/python/page-5/#decoradores","title":"Decoradores","text":"<p>Decoradores s\u00e3o fun\u00e7\u00f5es que modificam o comportamento de outras fun\u00e7\u00f5es. Eles permitem estender ou alterar o comportamento de fun\u00e7\u00f5es sem modificar seu c\u00f3digo.</p> Conceito B\u00e1sicoDecorador com ArgumentosDecorador com Argumentos Pr\u00f3prios <pre><code>def meu_decorador(func):\n    def wrapper():\n        print(\"Algo antes da fun\u00e7\u00e3o original\")\n        func()\n        print(\"Algo depois da fun\u00e7\u00e3o original\")\n    return wrapper\n\n@meu_decorador\ndef funcao():\n    print(\"Fun\u00e7\u00e3o original executada\")\n\n# Chamando a fun\u00e7\u00e3o decorada\nfuncao()\n# Sa\u00edda:\n# Algo antes da fun\u00e7\u00e3o original\n# Fun\u00e7\u00e3o original executada\n# Algo depois da fun\u00e7\u00e3o original\n</code></pre> <pre><code>def meu_decorador(func):\n    def wrapper(*args, **kwargs):\n        print(\"Antes da fun\u00e7\u00e3o\")\n        resultado = func(*args, **kwargs)\n        print(\"Depois da fun\u00e7\u00e3o\")\n        return resultado\n    return wrapper\n\n@meu_decorador\ndef soma(a, b):\n    print(f\"Somando {a} + {b}\")\n    return a + b\n\nresultado = soma(3, 5)\nprint(f\"Resultado: {resultado}\")\n# Sa\u00edda:\n# Antes da fun\u00e7\u00e3o\n# Somando 3 + 5\n# Depois da fun\u00e7\u00e3o\n# Resultado: 8\n</code></pre> <pre><code>def repetir(n):\n    def decorador(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(n):\n                resultado = func(*args, **kwargs)\n            return resultado\n        return wrapper\n    return decorador\n\n@repetir(3)\ndef saudacao(nome):\n    print(f\"Ol\u00e1, {nome}!\")\n    return nome\n\nsaudacao(\"Maria\")\n# Sa\u00edda:\n# Ol\u00e1, Maria!\n# Ol\u00e1, Maria!\n# Ol\u00e1, Maria!\n</code></pre>"},{"location":"trilhas/python/page-5/#geradores","title":"Geradores","text":"<p>Geradores s\u00e3o fun\u00e7\u00f5es especiais que retornam um iterador. Eles usam a palavra-chave <code>yield</code> em vez de <code>return</code> para fornecer valores um por vez, mantendo o estado da fun\u00e7\u00e3o entre chamadas.</p> Fun\u00e7\u00e3o Geradora B\u00e1sicaGerador com Express\u00e3o <pre><code>def contagem(maximo):\n    \"\"\"Gera n\u00fameros de 1 at\u00e9 'maximo'.\"\"\"\n    n = 1\n    while n &lt;= maximo:\n        yield n\n        n += 1\n\n# Usando o gerador\nfor numero in contagem(5):\n    print(numero, end=\" \")  # Sa\u00edda: 1 2 3 4 5\n\n# Ou convertendo para lista\nnumeros = list(contagem(5))\nprint(numeros)  # Sa\u00edda: [1, 2, 3, 4, 5]\n</code></pre> <pre><code># Express\u00e3o geradora (semelhante \u00e0 compreens\u00e3o de lista, mas com par\u00eanteses)\nquadrados = (x**2 for x in range(1, 6))\n\nprint(next(quadrados))  # Sa\u00edda: 1\nprint(next(quadrados))  # Sa\u00edda: 4\n\n# Iterando sobre os valores restantes\nfor valor in quadrados:\n    print(valor, end=\" \")  # Sa\u00edda: 9 16 25\n</code></pre> <p>Vantagens dos Geradores</p> <ul> <li>Efici\u00eancia de mem\u00f3ria: geram valores sob demanda, n\u00e3o armazenam todos na mem\u00f3ria</li> <li>\u00dateis para sequ\u00eancias infinitas ou muito grandes</li> <li>Mant\u00eam o estado entre chamadas</li> </ul>"},{"location":"trilhas/python/page-5/#funcoes-integradas-built-in","title":"Fun\u00e7\u00f5es Integradas (Built-in)","text":"<p>Python possui diversas fun\u00e7\u00f5es integradas que s\u00e3o sempre dispon\u00edveis.</p> Fun\u00e7\u00f5es Comuns <pre><code># len() - comprimento de um objeto\nprint(len(\"Python\"))  # Sa\u00edda: 6\n\n# range() - sequ\u00eancia de n\u00fameros\nlista = list(range(1, 6))\nprint(lista)  # Sa\u00edda: [1, 2, 3, 4, 5]\n\n# type() - tipo do objeto\nprint(type(123))      # Sa\u00edda: &lt;class 'int'&gt;\nprint(type(\"texto\"))  # Sa\u00edda: &lt;class 'str'&gt;\n\n# map() - aplica fun\u00e7\u00e3o a cada item de um iter\u00e1vel\nnumeros = [1, 2, 3, 4]\nquadrados = list(map(lambda x: x**2, numeros))\nprint(quadrados)  # Sa\u00edda: [1, 4, 9, 16]\n\n# filter() - filtra itens por uma fun\u00e7\u00e3o\nnumeros = [1, 2, 3, 4, 5, 6]\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(pares)  # Sa\u00edda: [2, 4, 6]\n\n# sorted() - retorna lista ordenada\nfrutas = [\"banana\", \"ma\u00e7\u00e3\", \"laranja\"]\nordenadas = sorted(frutas)\nprint(ordenadas)  # Sa\u00edda: ['banana', 'laranja', 'ma\u00e7\u00e3']\n</code></pre> <p>Lista Completa</p> <p>Consulte a documenta\u00e7\u00e3o oficial para uma lista completa das fun\u00e7\u00f5es integradas em Python.</p>"},{"location":"trilhas/python/page-5/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"Princ\u00edpio da Responsabilidade \u00danicaDocumenta\u00e7\u00e3o ClaraTratamento de Erros <pre><code># RUIM: fun\u00e7\u00e3o faz v\u00e1rias coisas\ndef processar_dados(dados):\n    # Limpa dados\n    # Calcula estat\u00edsticas\n    # Gera gr\u00e1ficos\n    # Salva resultados\n    pass\n\n# BOM: fun\u00e7\u00f5es separadas para cada responsabilidade\ndef limpar_dados(dados):\n    return dados_limpos\n\ndef calcular_estatisticas(dados_limpos):\n    return estatisticas\n\ndef gerar_graficos(estatisticas):\n    return graficos\n\ndef salvar_resultados(estatisticas, graficos):\n    pass\n</code></pre> <pre><code>def calcular_media(numeros):\n    \"\"\"\n    Calcula a m\u00e9dia aritm\u00e9tica de uma sequ\u00eancia de n\u00fameros.\n\n    Args:\n        numeros (list): Uma lista de n\u00fameros.\n\n    Returns:\n        float: A m\u00e9dia aritm\u00e9tica dos n\u00fameros.\n\n    Raises:\n        ValueError: Se a lista estiver vazia.\n\n    Examples:\n        &gt;&gt;&gt; calcular_media([1, 2, 3, 4, 5])\n        3.0\n    \"\"\"\n    if not numeros:\n        raise ValueError(\"A lista n\u00e3o pode estar vazia\")\n    return sum(numeros) / len(numeros)\n</code></pre> <pre><code>def dividir(a, b):\n    \"\"\"Divide a por b com tratamento de erro.\"\"\"\n    try:\n        return a / b\n    except ZeroDivisionError:\n        print(\"Erro: Divis\u00e3o por zero!\")\n        return None\n\nprint(dividir(10, 2))  # Sa\u00edda: 5.0\nprint(dividir(10, 0))  # Sa\u00edda: Erro: Divis\u00e3o por zero! None\n</code></pre>"},{"location":"trilhas/python/page-5/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Defini\u00e7\u00e3o de fun\u00e7\u00f5es com a palavra-chave <code>def</code></li> <li>Par\u00e2metros e argumentos, incluindo argumentos posicionais, nomeados e valores padr\u00e3o</li> <li>N\u00famero vari\u00e1vel de argumentos com <code>*args</code> e <code>**kwargs</code></li> <li>Retorno de valores com a instru\u00e7\u00e3o <code>return</code></li> <li>Escopo de vari\u00e1veis (local, global e nonlocal)</li> <li>Fun\u00e7\u00f5es an\u00f4nimas (lambda) para express\u00f5es simples</li> <li>Recursividade para resolver problemas que se decomp\u00f5em em problemas menores</li> <li>Fun\u00e7\u00f5es como objetos de primeira classe</li> <li>Decoradores para modificar o comportamento de fun\u00e7\u00f5es</li> <li>Geradores para criar iteradores de forma eficiente</li> <li>Fun\u00e7\u00f5es integradas do Python</li> <li>Boas pr\u00e1ticas para escrever fun\u00e7\u00f5es claras e eficientes</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre fun\u00e7\u00f5es</li> <li>Documenta\u00e7\u00e3o sobre fun\u00e7\u00f5es integradas</li> <li>Python PEP 8 - Guia de Estilo</li> </ul>"},{"location":"trilhas/python/page-5/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos a programa\u00e7\u00e3o orientada a objetos em Python, incluindo classes, objetos, heran\u00e7a e polimorfismo.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Cole\u00e7\u00f5es</p>"},{"location":"trilhas/python/page-6/","title":"Comprehensions em Python","text":""},{"location":"trilhas/python/page-6/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Comprehensions s\u00e3o constru\u00e7\u00f5es sint\u00e1ticas poderosas que permitem criar cole\u00e7\u00f5es de forma concisa e expressiva. Elas combinam a cria\u00e7\u00e3o de elementos e sua filtragem em uma \u00fanica linha de c\u00f3digo, tornando o c\u00f3digo mais leg\u00edvel e eficiente.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito de comprehensions em Python</li> <li>Dominar list comprehensions para criar listas de forma eficiente</li> <li>Aprender a usar dictionary comprehensions para manipular dicion\u00e1rios</li> <li>Explorar set comprehensions para criar conjuntos sem repeti\u00e7\u00e3o</li> <li>Compreender generator expressions para processamento eficiente em mem\u00f3ria</li> <li>Aplicar comprehensions em problemas pr\u00e1ticos</li> </ul>"},{"location":"trilhas/python/page-6/#list-comprehensions","title":"List Comprehensions","text":"<p>List comprehensions permitem criar listas de forma concisa, combinando um loop <code>for</code> com uma express\u00e3o.</p> Sintaxe B\u00e1sicaExemplos SimplesCom Condi\u00e7\u00f5esComprehensions Aninhadas <pre><code># [express\u00e3o for item in iter\u00e1vel]\n# ou\n# [express\u00e3o for item in iter\u00e1vel if condi\u00e7\u00e3o]\n</code></pre> <pre><code># Lista com os quadrados dos n\u00fameros de 0 a 9\nquadrados = [x**2 for x in range(10)]\nprint(quadrados)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# Lista com n\u00fameros pares at\u00e9 10\npares = [x for x in range(11) if x % 2 == 0]\nprint(pares)  # [0, 2, 4, 6, 8, 10]\n\n# Lista com comprimento de cada palavra\npalavras = [\"Python\", \"\u00e9\", \"incr\u00edvel\"]\ncomprimentos = [len(palavra) for palavra in palavras]\nprint(comprimentos)  # [6, 1, 9]\n</code></pre> <pre><code># Lista com classifica\u00e7\u00e3o de n\u00fameros\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nclassificacao = [\"Par\" if x % 2 == 0 else \"\u00cdmpar\" for x in numeros]\nprint(classificacao)  # ['\u00cdmpar', 'Par', '\u00cdmpar', 'Par', '\u00cdmpar', 'Par', '\u00cdmpar', 'Par', '\u00cdmpar', 'Par']\n\n# Filtrando n\u00fameros primos (simplificado)\ndef eh_primo(n):\n    if n &lt;= 1:\n        return False\n    if n &lt;= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i &lt;= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\nprimos = [x for x in range(1, 31) if eh_primo(x)]\nprint(primos)  # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n</code></pre> <pre><code># Matriz 3x3 usando comprehensions aninhadas\nmatriz = [[i * 3 + j + 1 for j in range(3)] for i in range(3)]\nprint(matriz)  # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Todos os pares (x,y) onde x e y s\u00e3o d\u00edgitos\npares_coordenadas = [(x, y) for x in range(10) for y in range(10)]\nprint(pares_coordenadas[:5])  # [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\n\n# Matriz transposta usando comprehensions\nmatriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntransposta = [[linha[i] for linha in matriz] for i in range(3)]\nprint(transposta)  # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n</code></pre> <p>Quando Usar List Comprehensions</p> <p>Use list comprehensions quando precisar criar uma nova lista a partir de um iter\u00e1vel existente. Elas s\u00e3o mais eficientes e leg\u00edveis do que loops <code>for</code> tradicionais para tarefas simples de transforma\u00e7\u00e3o ou filtragem.</p>"},{"location":"trilhas/python/page-6/#dictionary-comprehensions","title":"Dictionary Comprehensions","text":"<p>Dictionary comprehensions permitem criar dicion\u00e1rios de forma concisa, usando uma sintaxe semelhante \u00e0s list comprehensions.</p> Sintaxe B\u00e1sicaExemplos SimplesTransformando Dicion\u00e1riosCom Filtragem <pre><code># {chave_express\u00e3o: valor_express\u00e3o for item in iter\u00e1vel}\n# ou\n# {chave_express\u00e3o: valor_express\u00e3o for item in iter\u00e1vel if condi\u00e7\u00e3o}\n</code></pre> <pre><code># Dicion\u00e1rio de n\u00famero -&gt; quadrado\nquadrados = {x: x**2 for x in range(6)}\nprint(quadrados)  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# Dicion\u00e1rio de palavra -&gt; comprimento\npalavras = [\"Python\", \"\u00e9\", \"incr\u00edvel\"]\ncomprimentos = {palavra: len(palavra) for palavra in palavras}\nprint(comprimentos)  # {'Python': 6, '\u00e9': 1, 'incr\u00edvel': 9}\n</code></pre> <pre><code># Invertendo um dicion\u00e1rio (chave &lt;-&gt; valor)\npessoas = {\"Jo\u00e3o\": 25, \"Maria\": 30, \"Jos\u00e9\": 35}\npessoas_invertido = {idade: nome for nome, idade in pessoas.items()}\nprint(pessoas_invertido)  # {25: 'Jo\u00e3o', 30: 'Maria', 35: 'Jos\u00e9'}\n\n# Convertendo todas as chaves para mai\u00fasculas\nfrutas = {\"ma\u00e7\u00e3\": \"vermelha\", \"banana\": \"amarela\", \"uva\": \"roxa\"}\nfrutas_maiusculas = {k.upper(): v for k, v in frutas.items()}\nprint(frutas_maiusculas)  # {'MA\u00c7\u00c3': 'vermelha', 'BANANA': 'amarela', 'UVA': 'roxa'}\n</code></pre> <pre><code># Filtrando itens caros\nprodutos = {\"notebook\": 3500, \"celular\": 1500, \"mouse\": 50, \"teclado\": 100}\nitens_caros = {k: v for k, v in produtos.items() if v &gt; 1000}\nprint(itens_caros)  # {'notebook': 3500, 'celular': 1500}\n\n# Selecionando apenas frutas vermelhas\nfrutas = {\"ma\u00e7\u00e3\": \"vermelha\", \"banana\": \"amarela\", \"morango\": \"vermelha\"}\nfrutas_vermelhas = {k: v for k, v in frutas.items() if v == \"vermelha\"}\nprint(frutas_vermelhas)  # {'ma\u00e7\u00e3': 'vermelha', 'morango': 'vermelha'}\n</code></pre>"},{"location":"trilhas/python/page-6/#set-comprehensions","title":"Set Comprehensions","text":"<p>Set comprehensions permitem criar conjuntos (sets) de forma concisa, eliminando automaticamente duplicatas.</p> Sintaxe B\u00e1sicaExemplosCom Filtragem <pre><code># {express\u00e3o for item in iter\u00e1vel}\n# ou\n# {express\u00e3o for item in iter\u00e1vel if condi\u00e7\u00e3o}\n</code></pre> <pre><code># Conjunto de quadrados\nquadrados = {x**2 for x in range(10)}\nprint(quadrados)  # {0, 1, 4, 9, 16, 25, 36, 49, 64, 81}\n\n# Extraindo vogais \u00fanicas de um texto\ntexto = \"Python \u00e9 uma linguagem de programa\u00e7\u00e3o incr\u00edvel\"\nvogais = {letra.lower() for letra in texto if letra.lower() in \"aeiou\"}\nprint(vogais)  # {'a', 'e', 'i', 'o', 'u'}\n\n# Valores \u00fanicos de uma lista (removendo duplicatas)\nnumeros = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nunicos = {x for x in numeros}\nprint(unicos)  # {1, 2, 3, 4}\n</code></pre> <pre><code># N\u00fameros pares \u00fanicos\nnumeros = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\npares_unicos = {x for x in numeros if x % 2 == 0}\nprint(pares_unicos)  # {2, 4}\n\n# Primeiras letras de cada palavra (\u00fanicas)\nfrase = \"o rato roeu a roupa do rei de roma\"\niniciais = {palavra[0] for palavra in frase.split()}\nprint(iniciais)  # {'o', 'r', 'a', 'd'}\n</code></pre>"},{"location":"trilhas/python/page-6/#generator-expressions","title":"Generator Expressions","text":"<p>Generator expressions s\u00e3o semelhantes \u00e0s list comprehensions, mas geram itens sob demanda, economizando mem\u00f3ria.</p> Sintaxe B\u00e1sicaCompara\u00e7\u00e3o com List ComprehensionUso Eficiente <pre><code># (express\u00e3o for item in iter\u00e1vel)\n# ou\n# (express\u00e3o for item in iter\u00e1vel if condi\u00e7\u00e3o)\n</code></pre> <pre><code>import sys\n\n# List comprehension (cria toda a lista na mem\u00f3ria)\nlista = [x for x in range(10000)]\n\n# Generator expression (gera valores sob demanda)\ngerador = (x for x in range(10000))\n\n# Comparando o uso de mem\u00f3ria\nprint(f\"Tamanho da lista: {sys.getsizeof(lista)} bytes\")\nprint(f\"Tamanho do gerador: {sys.getsizeof(gerador)} bytes\")\n\n# O gerador s\u00f3 calcula valores quando solicitado\nprint(next(gerador))  # 0\nprint(next(gerador))  # 1\n</code></pre> <pre><code># Processando um arquivo grande linha por linha\ndef ler_arquivo_grande(arquivo):\n    with open(arquivo, 'r') as f:\n        return (linha.strip() for linha in f)\n\n# Isso seria mais eficiente que:\n# def ler_arquivo_grande(arquivo):\n#     with open(arquivo, 'r') as f:\n#         return [linha.strip() for linha in f]\n\n# Somando n\u00fameros grandes sem usar muita mem\u00f3ria\nsoma = sum(x for x in range(10000000))\nprint(soma)  # 49999995000000\n</code></pre> <p>Cuidado com a Reutiliza\u00e7\u00e3o</p> <p>Geradores s\u00f3 podem ser percorridos uma vez. Ap\u00f3s esgotar todos os elementos, n\u00e3o \u00e9 poss\u00edvel reiniciar sem criar um novo gerador.</p> <pre><code>numeros = (x for x in range(5))\nfor n in numeros:\n    print(n, end=\" \")  # 0 1 2 3 4\n\nprint(\"\\nTentando usar novamente:\")\nfor n in numeros:\n    print(n, end=\" \")  # N\u00e3o imprime nada, o gerador j\u00e1 foi esgotado\n</code></pre>"},{"location":"trilhas/python/page-6/#casos-de-uso-praticos","title":"Casos de Uso Pr\u00e1ticos","text":"Processamento de DadosTransforma\u00e7\u00e3o de DadosCria\u00e7\u00e3o de Matrizes <pre><code># Filtrando dados de uma lista de dicion\u00e1rios\nalunos = [\n    {\"nome\": \"Jo\u00e3o\", \"nota\": 8.5, \"aprovado\": True},\n    {\"nome\": \"Maria\", \"nota\": 9.0, \"aprovado\": True},\n    {\"nome\": \"Pedro\", \"nota\": 5.5, \"aprovado\": False},\n    {\"nome\": \"Ana\", \"nota\": 7.0, \"aprovado\": True}\n]\n\n# Nomes dos alunos aprovados\naprovados = [aluno[\"nome\"] for aluno in alunos if aluno[\"aprovado\"]]\nprint(aprovados)  # ['Jo\u00e3o', 'Maria', 'Ana']\n\n# M\u00e9dia das notas\nmedia = sum(aluno[\"nota\"] for aluno in alunos) / len(alunos)\nprint(f\"M\u00e9dia: {media:.1f}\")  # M\u00e9dia: 7.5\n\n# Melhor aluno\nmelhor_aluno = max(alunos, key=lambda aluno: aluno[\"nota\"])\nprint(f\"Melhor aluno: {melhor_aluno['nome']}\")  # Melhor aluno: Maria\n</code></pre> <pre><code># Convertendo dados de um formato para outro\ndados_csv = [\n    \"id,nome,idade\",\n    \"1,Jo\u00e3o,25\",\n    \"2,Maria,30\",\n    \"3,Pedro,22\"\n]\n\n# Converter para lista de dicion\u00e1rios\ncabecalho = dados_csv[0].split(',')\nregistros = [dict(zip(cabecalho, linha.split(','))) for linha in dados_csv[1:]]\n\nprint(registros)\n# [{'id': '1', 'nome': 'Jo\u00e3o', 'idade': '25'}, \n#  {'id': '2', 'nome': 'Maria', 'idade': '30'}, \n#  {'id': '3', 'nome': 'Pedro', 'idade': '22'}]\n\n# Converter para outro formato\njson_like = {f\"pessoa_{r['id']}\": {\"nome\": r[\"nome\"], \"idade\": int(r[\"idade\"])} for r in registros}\nprint(json_like)\n# {'pessoa_1': {'nome': 'Jo\u00e3o', 'idade': 25}, \n#  'pessoa_2': {'nome': 'Maria', 'idade': 30}, \n#  'pessoa_3': {'nome': 'Pedro', 'idade': 22}}\n</code></pre> <pre><code># Matriz de identidade 4x4\nidentidade = [[1 if i == j else 0 for j in range(4)] for i in range(4)]\nfor linha in identidade:\n    print(linha)\n# [1, 0, 0, 0]\n# [0, 1, 0, 0]\n# [0, 0, 1, 0]\n# [0, 0, 0, 1]\n\n# Criando uma matriz de dist\u00e2ncia (cada c\u00e9lula cont\u00e9m a dist\u00e2ncia de Manhattan entre pontos)\npontos = [(i, j) for i in range(3) for j in range(3)]\nmatriz_distancia = {(p1, p2): abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) \n                    for p1 in pontos for p2 in pontos if p1 != p2}\n\n# Exibindo algumas dist\u00e2ncias\nprint(f\"Dist\u00e2ncia de (0,0) a (2,2): {matriz_distancia[((0,0), (2,2))]}\")  # 4\nprint(f\"Dist\u00e2ncia de (1,0) a (0,2): {matriz_distancia[((1,0), (0,2))]}\")  # 3\n</code></pre>"},{"location":"trilhas/python/page-6/#desempenho-e-boas-praticas","title":"Desempenho e Boas Pr\u00e1ticas","text":"DesempenhoBoas Pr\u00e1ticas <pre><code>import time\n\n# Comparando desempenho: loop tradicional vs. comprehension\n\n# M\u00e9todo 1: loop tradicional\ndef metodo_loop(n):\n    resultado = []\n    for i in range(n):\n        resultado.append(i * i)\n    return resultado\n\n# M\u00e9todo 2: list comprehension\ndef metodo_comprehension(n):\n    return [i * i for i in range(n)]\n\n# Teste de desempenho\nn = 1000000\n\ninicio = time.time()\nresultado1 = metodo_loop(n)\nfim = time.time()\nprint(f\"Loop tradicional: {fim - inicio:.4f} segundos\")\n\ninicio = time.time()\nresultado2 = metodo_comprehension(n)\nfim = time.time()\nprint(f\"List comprehension: {fim - inicio:.4f} segundos\")\n\n# List comprehension geralmente \u00e9 mais r\u00e1pido\n</code></pre> <pre><code># 1. Mantenha as comprehensions simples e leg\u00edveis\n\n# Ruim: comprehension complexa e dif\u00edcil de entender\nresultado = [x**2 for x in [y for y in range(10) if y % 2 == 0] if x &gt; 5]\n\n# Melhor: dividir em passos\npares = [y for y in range(10) if y % 2 == 0]\nresultado = [x**2 for x in pares if x &gt; 5]\n\n# 2. Use generator expressions para grandes conjuntos de dados\n\n# Ruim para grandes conjuntos: carrega tudo na mem\u00f3ria\n# sum([x**2 for x in range(10000000)])\n\n# Melhor: processa sob demanda\n# sum(x**2 for x in range(10000000))\n\n# 3. Evite efeitos colaterais nas comprehensions\n\n# Ruim: modificando estado externo\ntotal = 0\n[total := total + x for x in range(5)]  # N\u00e3o fa\u00e7a isso!\n\n# Melhor: uso funcional\ntotal = sum(x for x in range(5))\n</code></pre>"},{"location":"trilhas/python/page-6/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>List comprehensions para criar listas de forma concisa e expressiva</li> <li>Dictionary comprehensions para transformar e criar dicion\u00e1rios eficientemente</li> <li>Set comprehensions para criar conjuntos sem duplicatas</li> <li>Generator expressions para processamento eficiente em mem\u00f3ria</li> <li>Casos de uso pr\u00e1ticos para comprehensions</li> <li>Boas pr\u00e1ticas e considera\u00e7\u00f5es de desempenho</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre list comprehensions</li> <li>Documenta\u00e7\u00e3o oficial sobre generators</li> <li>PEP 202 - List Comprehensions</li> <li>PEP 274 - Dict Comprehensions</li> </ul>"},{"location":"trilhas/python/page-6/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos express\u00f5es lambda e fun\u00e7\u00f5es integradas em Python, que complementam perfeitamente o uso de comprehensions.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Fun\u00e7\u00f5es</p>"},{"location":"trilhas/python/page-7/","title":"Express\u00f5es Lambdas e Fun\u00e7\u00f5es Integradas","text":""},{"location":"trilhas/python/page-7/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>As express\u00f5es lambda s\u00e3o fun\u00e7\u00f5es an\u00f4nimas (sem nome) definidas em uma \u00fanica linha de c\u00f3digo, enquanto as fun\u00e7\u00f5es integradas (built-in) s\u00e3o ferramentas poderosas que v\u00eam pr\u00e9-instaladas com Python. Juntas, elas permitem escrever c\u00f3digo mais conciso, expressivo e eficiente.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito e a sintaxe de express\u00f5es lambda</li> <li>Aprender a usar lambdas com fun\u00e7\u00f5es de ordem superior</li> <li>Explorar as fun\u00e7\u00f5es integradas mais \u00fateis do Python</li> <li>Combinar lambdas com fun\u00e7\u00f5es integradas para tarefas comuns</li> <li>Aplicar essas ferramentas em situa\u00e7\u00f5es pr\u00e1ticas</li> </ul>"},{"location":"trilhas/python/page-7/#expressoes-lambda","title":"Express\u00f5es Lambda","text":"<p>Express\u00f5es lambda s\u00e3o fun\u00e7\u00f5es an\u00f4nimas e compactas, definidas usando a palavra-chave <code>lambda</code>.</p> Sintaxe B\u00e1sicaCompara\u00e7\u00e3o com Fun\u00e7\u00f5es RegularesM\u00faltiplos ArgumentosExpress\u00f5es Condicionais <pre><code># lambda argumentos: express\u00e3o\n</code></pre> <pre><code># Fun\u00e7\u00e3o tradicional\ndef quadrado(x):\n    return x ** 2\n\n# Equivalente com lambda\nquadrado_lambda = lambda x: x ** 2\n\nprint(quadrado(5))         # 25\nprint(quadrado_lambda(5))  # 25\n</code></pre> <pre><code># Lambda com m\u00faltiplos argumentos\nsoma = lambda a, b: a + b\nmultiplicacao = lambda a, b, c: a * b * c\n\nprint(soma(3, 5))              # 8\nprint(multiplicacao(2, 3, 4))  # 24\n\n# Argumentos padr\u00e3o\nsaudacao = lambda nome, msg=\"Ol\u00e1\": f\"{msg}, {nome}!\"\nprint(saudacao(\"Maria\"))            # Ol\u00e1, Maria!\nprint(saudacao(\"Jo\u00e3o\", \"Bem-vindo\"))  # Bem-vindo, Jo\u00e3o!\n</code></pre> <pre><code># Lambda com operador tern\u00e1rio\npar_impar = lambda x: \"Par\" if x % 2 == 0 else \"\u00cdmpar\"\n\nprint(par_impar(4))  # Par\nprint(par_impar(7))  # \u00cdmpar\n\n# Verificando faixa de valores\nfaixa_etaria = lambda idade: \"Crian\u00e7a\" if idade &lt; 12 else \"Adolescente\" if idade &lt; 18 else \"Adulto\"\n\nprint(faixa_etaria(8))   # Crian\u00e7a\nprint(faixa_etaria(15))  # Adolescente\nprint(faixa_etaria(25))  # Adulto\n</code></pre> <p>Limita\u00e7\u00f5es das Lambdas</p> <p>As express\u00f5es lambda t\u00eam limita\u00e7\u00f5es importantes:</p> <ul> <li>S\u00e3o restritas a uma \u00fanica express\u00e3o (sem m\u00faltiplas instru\u00e7\u00f5es)</li> <li>N\u00e3o podem conter comandos como <code>return</code>, <code>pass</code>, <code>assert</code> ou atribui\u00e7\u00f5es</li> <li>Devem ser usadas para opera\u00e7\u00f5es simples; para l\u00f3gica complexa, use fun\u00e7\u00f5es regulares</li> </ul>"},{"location":"trilhas/python/page-7/#lambdas-com-funcoes-de-ordem-superior","title":"Lambdas com Fun\u00e7\u00f5es de Ordem Superior","text":"<p>Lambdas s\u00e3o particularmente \u00fateis com fun\u00e7\u00f5es que aceitam outras fun\u00e7\u00f5es como argumentos (fun\u00e7\u00f5es de ordem superior).</p> map()filter()sorted()reduce() <pre><code># map(fun\u00e7\u00e3o, iter\u00e1vel) - aplica a fun\u00e7\u00e3o a cada elemento do iter\u00e1vel\nnumeros = [1, 2, 3, 4, 5]\n\n# Quadrado de cada n\u00famero\nquadrados = list(map(lambda x: x**2, numeros))\nprint(quadrados)  # [1, 4, 9, 16, 25]\n\n# Usando com m\u00faltiplos iter\u00e1veis\nlista1 = [1, 2, 3]\nlista2 = [10, 20, 30]\nsoma_listas = list(map(lambda x, y: x + y, lista1, lista2))\nprint(soma_listas)  # [11, 22, 33]\n\n# Convertendo tipos\nvalores = ['1', '2', '3', '4']\nnumeros = list(map(int, valores))  # O mesmo que: list(map(lambda x: int(x), valores))\nprint(numeros)  # [1, 2, 3, 4]\n</code></pre> <pre><code># filter(fun\u00e7\u00e3o, iter\u00e1vel) - filtra elementos baseado em uma fun\u00e7\u00e3o\nnumeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Filtrando n\u00fameros pares\npares = list(filter(lambda x: x % 2 == 0, numeros))\nprint(pares)  # [2, 4, 6, 8, 10]\n\n# Filtrando strings n\u00e3o vazias\npalavras = [\"python\", \"\", \"lambda\", None, \"filter\", \"\"]\nnao_vazias = list(filter(None, palavras))  # Filtra valores \"falsy\" (None, \"\", 0, etc.)\nprint(nao_vazias)  # [\"python\", \"lambda\", \"filter\"]\n\n# Filtrando dicion\u00e1rios\npessoas = [\n    {\"nome\": \"Ana\", \"idade\": 25},\n    {\"nome\": \"Carlos\", \"idade\": 17},\n    {\"nome\": \"Maria\", \"idade\": 30},\n    {\"nome\": \"Jo\u00e3o\", \"idade\": 16}\n]\nmaiores = list(filter(lambda p: p[\"idade\"] &gt;= 18, pessoas))\nprint([p[\"nome\"] for p in maiores])  # [\"Ana\", \"Maria\"]\n</code></pre> <pre><code># sorted(iter\u00e1vel, key=None, reverse=False) - retorna uma lista ordenada\nnumeros = [5, 2, 8, 1, 9]\n\n# Ordena\u00e7\u00e3o simples\nordenados = sorted(numeros)\nprint(ordenados)  # [1, 2, 5, 8, 9]\n\n# Ordena\u00e7\u00e3o reversa\ndecrescente = sorted(numeros, reverse=True)\nprint(decrescente)  # [9, 8, 5, 2, 1]\n\n# Ordenando strings por comprimento\npalavras = [\"python\", \"lambda\", \"fun\u00e7\u00f5es\", \"integradas\"]\npor_tamanho = sorted(palavras, key=lambda s: len(s))\nprint(por_tamanho)  # [\"lambda\", \"python\", \"fun\u00e7\u00f5es\", \"integradas\"]\n\n# Ordenando objetos complexos\nalunos = [\n    {\"nome\": \"Ana\", \"nota\": 8.5},\n    {\"nome\": \"Carlos\", \"nota\": 7.0},\n    {\"nome\": \"Maria\", \"nota\": 9.0}\n]\npor_nota = sorted(alunos, key=lambda aluno: aluno[\"nota\"], reverse=True)\nprint([a[\"nome\"] for a in por_nota])  # [\"Maria\", \"Ana\", \"Carlos\"]\n</code></pre> <pre><code>from functools import reduce\n\n# reduce(fun\u00e7\u00e3o, iter\u00e1vel[, inicial]) - aplica fun\u00e7\u00e3o cumulativamente aos elementos\nnumeros = [1, 2, 3, 4, 5]\n\n# Soma de todos os elementos\nsoma = reduce(lambda x, y: x + y, numeros)\nprint(soma)  # 15\n\n# Produto de todos os elementos\nproduto = reduce(lambda x, y: x * y, numeros)\nprint(produto)  # 120\n\n# Com valor inicial\nsoma_mais_10 = reduce(lambda x, y: x + y, numeros, 10)\nprint(soma_mais_10)  # 25\n\n# Encontrando o m\u00e1ximo\nmaximo = reduce(lambda x, y: x if x &gt; y else y, numeros)\nprint(maximo)  # 5\n</code></pre>"},{"location":"trilhas/python/page-7/#funcoes-integradas-built-in","title":"Fun\u00e7\u00f5es Integradas (Built-in)","text":"<p>Python possui diversas fun\u00e7\u00f5es integradas que s\u00e3o extremamente \u00fateis para opera\u00e7\u00f5es comuns.</p> Manipula\u00e7\u00e3o de Iter\u00e1veisConvers\u00e3o de TiposFun\u00e7\u00f5es Matem\u00e1ticasFun\u00e7\u00f5es de Sequ\u00eanciaFun\u00e7\u00f5es de Inspe\u00e7\u00e3o <pre><code># len() - retorna o n\u00famero de itens\nprint(len([1, 2, 3, 4]))  # 4\nprint(len(\"Python\"))      # 6\n\n# sum() - soma elementos de um iter\u00e1vel\nprint(sum([1, 2, 3, 4]))         # 10\nprint(sum([1, 2, 3, 4], 100))    # 110 (100 \u00e9 o valor inicial)\n\n# max() e min() - valor m\u00e1ximo e m\u00ednimo\nprint(max([5, 2, 8, 1]))  # 8\nprint(min([5, 2, 8, 1]))  # 1\n\n# Com key function\npalavras = [\"python\", \"\u00e9\", \"incr\u00edvel\"]\nprint(max(palavras, key=len))  # incr\u00edvel\nprint(min(palavras, key=len))  # \u00e9\n\n# any() e all() - verificam se pelo menos um ou todos os elementos s\u00e3o verdadeiros\nprint(any([False, False, True]))  # True\nprint(all([True, True, False]))   # False\n</code></pre> <pre><code># int(), float(), str(), bool() - convers\u00f5es b\u00e1sicas\nprint(int(\"123\"))         # 123\nprint(float(\"3.14\"))      # 3.14\nprint(str(42))            # \"42\"\nprint(bool(0))            # False\n\n# list(), tuple(), set(), dict() - convers\u00f5es de cole\u00e7\u00f5es\nprint(list(\"Python\"))                # ['P', 'y', 't', 'h', 'o', 'n']\nprint(tuple([1, 2, 3]))              # (1, 2, 3)\nprint(set([1, 2, 2, 3, 3, 3]))       # {1, 2, 3}\nprint(dict([(\"a\", 1), (\"b\", 2)]))    # {'a': 1, 'b': 2}\n</code></pre> <pre><code># abs() - valor absoluto\nprint(abs(-10))  # 10\n\n# round() - arredondamento\nprint(round(3.14159, 2))  # 3.14\nprint(round(3.5))         # 4\n\n# pow() - pot\u00eancia\nprint(pow(2, 3))      # 8\nprint(pow(2, 3, 5))   # 3 (2^3 % 5)\n\n# divmod() - divis\u00e3o e m\u00f3dulo\nprint(divmod(13, 5))  # (2, 3) - quociente e resto\n</code></pre> <pre><code># enumerate() - adiciona contador a um iter\u00e1vel\nfrutas = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\"]\nfor i, fruta in enumerate(frutas):\n    print(f\"{i}: {fruta}\")\n# 0: ma\u00e7\u00e3\n# 1: banana\n# 2: laranja\n\n# zip() - combina iter\u00e1veis em tuplas\nnomes = [\"Ana\", \"Carlos\", \"Maria\"]\nidades = [25, 30, 22]\nfor nome, idade in zip(nomes, idades):\n    print(f\"{nome} tem {idade} anos\")\n# Ana tem 25 anos\n# Carlos tem 30 anos\n# Maria tem 22 anos\n\n# reversed() - inverte uma sequ\u00eancia\nfor fruta in reversed(frutas):\n    print(fruta)\n# laranja\n# banana\n# ma\u00e7\u00e3\n</code></pre> <pre><code># type() - retorna o tipo de um objeto\nprint(type(42))        # &lt;class 'int'&gt;\nprint(type(\"Python\"))  # &lt;class 'str'&gt;\n\n# isinstance() - verifica se um objeto \u00e9 de um tipo espec\u00edfico\nprint(isinstance(42, int))          # True\nprint(isinstance(\"Python\", (int, str)))  # True\n\n# dir() - lista atributos de um objeto\nprint(dir(\"Python\"))  # Lista todos os m\u00e9todos e atributos de uma string\n\n# help() - mostra documenta\u00e7\u00e3o de um objeto\n# help(str)  # Mostra a documenta\u00e7\u00e3o do tipo str\n</code></pre>"},{"location":"trilhas/python/page-7/#combinando-lambdas-e-funcoes-integradas","title":"Combinando Lambdas e Fun\u00e7\u00f5es Integradas","text":"<p>A combina\u00e7\u00e3o de express\u00f5es lambda com fun\u00e7\u00f5es integradas permite criar solu\u00e7\u00f5es elegantes e eficientes.</p> Processamento de DadosOrdena\u00e7\u00e3o PersonalizadaC\u00e1lculos FuncionaisFiltragem Avan\u00e7ada <pre><code># Transformando e filtrando dados\ndados = [\n    {\"nome\": \"Ana\", \"idade\": 25, \"cidade\": \"S\u00e3o Paulo\"},\n    {\"nome\": \"Bruno\", \"idade\": 17, \"cidade\": \"Rio de Janeiro\"},\n    {\"nome\": \"Carlos\", \"idade\": 32, \"cidade\": \"S\u00e3o Paulo\"},\n    {\"nome\": \"Diana\", \"idade\": 15, \"cidade\": \"Curitiba\"},\n    {\"nome\": \"Eduardo\", \"idade\": 28, \"cidade\": \"Rio de Janeiro\"}\n]\n\n# Filtrar maiores de idade e extrair seus nomes\nmaiores = list(map(lambda p: p[\"nome\"], \n                 filter(lambda p: p[\"idade\"] &gt;= 18, dados)))\nprint(maiores)  # ['Ana', 'Carlos', 'Eduardo']\n\n# Agrupar por cidade\nfrom collections import defaultdict\npor_cidade = defaultdict(list)\nfor pessoa in dados:\n    por_cidade[pessoa[\"cidade\"]].append(pessoa[\"nome\"])\nprint(dict(por_cidade))\n# {'S\u00e3o Paulo': ['Ana', 'Carlos'], 'Rio de Janeiro': ['Bruno', 'Eduardo'], 'Curitiba': ['Diana']}\n\n# M\u00e9dia de idade por cidade\nmedias = {cidade: sum(p[\"idade\"] for p in dados if p[\"cidade\"] == cidade) / \n                 len([p for p in dados if p[\"cidade\"] == cidade])\n          for cidade in por_cidade}\nprint(medias)\n# {'S\u00e3o Paulo': 28.5, 'Rio de Janeiro': 22.5, 'Curitiba': 15.0}\n</code></pre> <pre><code># Ordenando strings ignorando case\npalavras = [\"Banana\", \"abacaxi\", \"Laranja\", \"ma\u00e7\u00e3\"]\nordenadas = sorted(palavras, key=lambda s: s.lower())\nprint(ordenadas)  # ['abacaxi', 'Banana', 'Laranja', 'ma\u00e7\u00e3']\n\n# Ordenando por m\u00faltiplos crit\u00e9rios\nalunos = [\n    {\"nome\": \"Ana\", \"nota\": 8.5, \"faltas\": 2},\n    {\"nome\": \"Carlos\", \"nota\": 8.5, \"faltas\": 4},\n    {\"nome\": \"Maria\", \"nota\": 9.0, \"faltas\": 0},\n    {\"nome\": \"Jo\u00e3o\", \"nota\": 7.0, \"faltas\": 1}\n]\n\n# Primeiro por nota (decrescente), depois por faltas (crescente)\nordenados = sorted(alunos, key=lambda a: (-a[\"nota\"], a[\"faltas\"]))\nfor a in ordenados:\n    print(f\"{a['nome']}: nota {a['nota']}, faltas {a['faltas']}\")\n# Maria: nota 9.0, faltas 0\n# Ana: nota 8.5, faltas 2\n# Carlos: nota 8.5, faltas 4\n# Jo\u00e3o: nota 7.0, faltas 1\n</code></pre> <pre><code># Calculando estat\u00edsticas de forma funcional\nnotas = [8.5, 7.0, 9.5, 6.5, 8.0, 7.5]\n\n# M\u00e9dia\nmedia = sum(notas) / len(notas)\nprint(f\"M\u00e9dia: {media:.2f}\")  # M\u00e9dia: 7.83\n\n# Vari\u00e2ncia (usando abordagem funcional)\nvariancia = sum(map(lambda x: (x - media) ** 2, notas)) / len(notas)\nprint(f\"Vari\u00e2ncia: {variancia:.2f}\")  # Vari\u00e2ncia: 0.94\n\n# Desvio padr\u00e3o\ndesvio_padrao = variancia ** 0.5\nprint(f\"Desvio padr\u00e3o: {desvio_padrao:.2f}\")  # Desvio padr\u00e3o: 0.97\n\n# Notas normalizadas (z-score)\nnormalizadas = list(map(lambda x: (x - media) / desvio_padrao, notas))\nprint(f\"Normalizadas: {[round(n, 2) for n in normalizadas]}\")\n# Normalizadas: [0.69, -0.86, 1.72, -1.37, 0.17, -0.35]\n</code></pre> <pre><code># Filtrando dados com m\u00faltiplas condi\u00e7\u00f5es\nprodutos = [\n    {\"nome\": \"Notebook\", \"preco\": 3500, \"estoque\": 5, \"categoria\": \"Eletr\u00f4nicos\"},\n    {\"nome\": \"Monitor\", \"preco\": 1200, \"estoque\": 10, \"categoria\": \"Eletr\u00f4nicos\"},\n    {\"nome\": \"Teclado\", \"preco\": 150, \"estoque\": 0, \"categoria\": \"Perif\u00e9ricos\"},\n    {\"nome\": \"Mouse\", \"preco\": 80, \"estoque\": 15, \"categoria\": \"Perif\u00e9ricos\"},\n    {\"nome\": \"Headset\", \"preco\": 250, \"estoque\": 8, \"categoria\": \"\u00c1udio\"},\n    {\"nome\": \"Caixa de Som\", \"preco\": 120, \"estoque\": 3, \"categoria\": \"\u00c1udio\"}\n]\n\n# Produtos dispon\u00edveis (em estoque) com pre\u00e7o abaixo de 200\ndisponivel_barato = list(filter(\n    lambda p: p[\"estoque\"] &gt; 0 and p[\"preco\"] &lt; 200, \n    produtos\n))\nfor p in disponivel_barato:\n    print(f\"{p['nome']} - R${p['preco']}\")\n# Mouse - R$80\n# Caixa de Som - R$120\n\n# Produtos por categoria\nfrom itertools import groupby\n\n# Precisa ordenar primeiro para o groupby funcionar corretamente\nprodutos_ordenados = sorted(produtos, key=lambda p: p[\"categoria\"])\n\nfor categoria, items in groupby(produtos_ordenados, key=lambda p: p[\"categoria\"]):\n    print(f\"\\nCategoria: {categoria}\")\n    for produto in items:\n        print(f\"  - {produto['nome']}: R${produto['preco']}\")\n</code></pre>"},{"location":"trilhas/python/page-7/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"Quando Usar LambdaAlternativas ao LambdaDebugging <pre><code># Use lambdas para express\u00f5es simples\n\n# Bom uso de lambda (express\u00e3o simples)\nnumeros = [1, 2, 3, 4, 5]\nquadrados = list(map(lambda x: x**2, numeros))\n\n# Em vez de usar lambda para c\u00f3digo complexo...\nordenados = sorted(produtos, \n                 lambda p: (p[\"categoria\"], -p[\"preco\"], p[\"nome\"]))\n\n# ...defina uma fun\u00e7\u00e3o nomeada para melhor legibilidade\ndef ordem_produto(p):\n    # Ordem: primeiro por categoria, depois por pre\u00e7o (decrescente), depois por nome\n    return (p[\"categoria\"], -p[\"preco\"], p[\"nome\"])\n\nordenados = sorted(produtos, key=ordem_produto)\n</code></pre> <pre><code>import operator\nfrom functools import partial\n\nnumeros = [1, 2, 3, 4, 5]\n\n# Em vez de:\npares = list(filter(lambda x: x % 2 == 0, numeros))\n\n# Use compreens\u00e3o de lista (geralmente mais leg\u00edvel):\npares = [x for x in numeros if x % 2 == 0]\n\n# Em vez de:\nsoma = reduce(lambda x, y: x + y, numeros)\nproduto = reduce(lambda x, y: x * y, numeros)\n\n# Use operadores do m\u00f3dulo operator:\nsoma = reduce(operator.add, numeros)\nproduto = reduce(operator.mul, numeros)\n\n# Fun\u00e7\u00e3o partial para criar fun\u00e7\u00f5es especializadas\nincrementar = partial(operator.add, 1)\nprint(incrementar(10))  # 11\n\n# Usando partial para fun\u00e7\u00f5es de duas vias\npotencia_de_2 = partial(pow, 2)\nprint(potencia_de_2(5))  # 32 (2^5)\n\nbase_2 = partial(pow, base=2)\nprint(base_2(5))  # 32 (2^5)\n</code></pre> <pre><code># Lambdas podem ser dif\u00edceis de depurar, pois n\u00e3o t\u00eam nome\n\n# Estrat\u00e9gia 1: Atribuir a lambda a uma vari\u00e1vel\nquadrado = lambda x: x**2\n# Agora se aparecer um erro, ver\u00e1 'quadrado' no traceback\n\n# Estrat\u00e9gia 2: Converter para fun\u00e7\u00e3o regular para debug\ndef quadrado_debug(x):\n    result = x**2\n    print(f\"Quadrado de {x} = {result}\")\n    return result\n\n# Use temporariamente esta vers\u00e3o em vez da lambda\n</code></pre>"},{"location":"trilhas/python/page-7/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Express\u00f5es lambda para criar fun\u00e7\u00f5es an\u00f4nimas concisas</li> <li>Fun\u00e7\u00f5es de ordem superior como <code>map()</code>, <code>filter()</code>, <code>sorted()</code> e <code>reduce()</code></li> <li>Fun\u00e7\u00f5es integradas do Python para manipula\u00e7\u00e3o de dados</li> <li>Combina\u00e7\u00e3o de lambdas e fun\u00e7\u00f5es integradas para solu\u00e7\u00f5es elegantes</li> <li>Boas pr\u00e1ticas para o uso eficiente de lambdas</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre fun\u00e7\u00f5es integradas</li> <li>Documenta\u00e7\u00e3o sobre o m\u00f3dulo functools</li> <li>PEP 8 - Guia de Estilo para Python</li> </ul>"},{"location":"trilhas/python/page-7/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, aprenderemos sobre depura\u00e7\u00e3o e tratamento de erros em Python, habilidades essenciais para desenvolver c\u00f3digo robusto.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Comprehensions</p>"},{"location":"trilhas/python/page-8/","title":"Debugando e Tratando Erros","text":""},{"location":"trilhas/python/page-8/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>A capacidade de identificar, entender e tratar erros \u00e9 uma habilidade essencial para qualquer programador. Python oferece ferramentas robustas para depura\u00e7\u00e3o (debugging) e tratamento de exce\u00e7\u00f5es, permitindo criar programas que funcionam corretamente e lidam graciosamente com situa\u00e7\u00f5es inesperadas.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender os diferentes tipos de erros em Python</li> <li>Aprender a interpretar mensagens de erro</li> <li>Dominar o tratamento de exce\u00e7\u00f5es com <code>try-except</code></li> <li>Conhecer t\u00e9cnicas eficientes de depura\u00e7\u00e3o</li> <li>Desenvolver c\u00f3digo mais robusto e resiliente</li> </ul>"},{"location":"trilhas/python/page-8/#tipos-de-erros-em-python","title":"Tipos de Erros em Python","text":"<p>Python tem dois tipos principais de erros: erros de sintaxe e exce\u00e7\u00f5es.</p> Erros de SintaxeExce\u00e7\u00f5es <pre><code># Erros de sintaxe ocorrem quando o Python n\u00e3o consegue entender o c\u00f3digo\n# O interpretador detecta estes erros antes de executar o programa\n\n# Exemplos:\n\n# Par\u00eantese faltando\nprint(\"Ol\u00e1, mundo!\"  # SyntaxError: unexpected EOF while parsing\n\n# Indenta\u00e7\u00e3o incorreta\ndef funcao():\nprint(\"Erro de indenta\u00e7\u00e3o\")  # IndentationError: expected an indented block\n\n# Palavra-chave incorreta\nfor i on range(5):  # SyntaxError: invalid syntax\n    print(i)\n</code></pre> <pre><code># Exce\u00e7\u00f5es s\u00e3o erros detectados durante a execu\u00e7\u00e3o\n# O programa come\u00e7a a rodar, mas encontra um problema em tempo de execu\u00e7\u00e3o\n\n# Exemplos:\n\n# Divis\u00e3o por zero\nresultado = 10 / 0  # ZeroDivisionError: division by zero\n\n# Acesso a um \u00edndice inexistente\nlista = [1, 2, 3]\nitem = lista[5]  # IndexError: list index out of range\n\n# Uso de vari\u00e1vel n\u00e3o definida\nprint(variavel_inexistente)  # NameError: name 'variavel_inexistente' is not defined\n\n# Convers\u00e3o de tipo inv\u00e1lida\nint(\"texto\")  # ValueError: invalid literal for int() with base 10: 'texto'\n</code></pre>"},{"location":"trilhas/python/page-8/#excecoes-comuns-em-python","title":"Exce\u00e7\u00f5es Comuns em Python","text":"<p>Conhecer as exce\u00e7\u00f5es mais comuns ajuda a identificar e corrigir problemas rapidamente.</p> Exce\u00e7\u00f5es B\u00e1sicasExce\u00e7\u00f5es de ArquivoExce\u00e7\u00f5es de Dicion\u00e1rioOutras Exce\u00e7\u00f5es Comuns <pre><code># ValueError - Ocorre quando uma fun\u00e7\u00e3o recebe um argumento de tipo correto mas valor inadequado\nint(\"abc\")  # ValueError: invalid literal for int() with base 10: 'abc'\n\n# TypeError - Ocorre quando uma opera\u00e7\u00e3o \u00e9 aplicada a um objeto de tipo inadequado\n\"texto\" + 5  # TypeError: can only concatenate str (not \"int\") to str\n\n# NameError - Ocorre quando uma vari\u00e1vel ou fun\u00e7\u00e3o n\u00e3o \u00e9 encontrada\nprint(x)  # NameError: name 'x' is not defined\n\n# IndexError - Ocorre ao tentar acessar um \u00edndice inexistente em uma sequ\u00eancia\nlista = [1, 2, 3]\nlista[10]  # IndexError: list index out of range\n</code></pre> <pre><code># FileNotFoundError - Ocorre ao tentar acessar um arquivo inexistente\nwith open(\"arquivo_inexistente.txt\", \"r\") as arquivo:\n    conteudo = arquivo.read()  # FileNotFoundError: [Errno 2] No such file or directory: 'arquivo_inexistente.txt'\n\n# PermissionError - Ocorre ao tentar acessar um arquivo sem permiss\u00e3o\n# PermissionError: [Errno 13] Permission denied: '/etc/passwd'\n\n# IOError - Ocorre quando uma opera\u00e7\u00e3o de entrada/sa\u00edda falha\n# Agora \u00e9 um alias para OSError no Python 3\n</code></pre> <pre><code># KeyError - Ocorre ao tentar acessar uma chave inexistente em um dicion\u00e1rio\ndicionario = {\"a\": 1, \"b\": 2}\ndicionario[\"c\"]  # KeyError: 'c'\n\n# Alternativa segura\nvalor = dicionario.get(\"c\", \"N\u00e3o encontrado\")  # N\u00e3o gera erro, retorna o valor padr\u00e3o\n</code></pre> <pre><code># AttributeError - Ocorre ao tentar acessar um atributo inexistente\n\"texto\".inexistente  # AttributeError: 'str' object has no attribute 'inexistente'\n\n# ImportError - Ocorre quando uma importa\u00e7\u00e3o falha\nimport modulo_inexistente  # ImportError: No module named 'modulo_inexistente'\n\n# ModuleNotFoundError - Espec\u00edfico para m\u00f3dulos n\u00e3o encontrados (subclasse de ImportError)\nimport modulo_inexistente  # ModuleNotFoundError: No module named 'modulo_inexistente'\n\n# RuntimeError - Exce\u00e7\u00e3o gen\u00e9rica quando um erro n\u00e3o se encaixa em outra categoria\n</code></pre>"},{"location":"trilhas/python/page-8/#interpretando-mensagens-de-erro","title":"Interpretando Mensagens de Erro","text":"<p>Saber interpretar mensagens de erro \u00e9 uma habilidade crucial para resolu\u00e7\u00e3o de problemas.</p> Anatomia de uma Mensagem de ErroLendo de Baixo para Cima <pre><code>Traceback (most recent call last):\n  File \"script.py\", line 5, in &lt;module&gt;\n    resultado = funcao()\n  File \"script.py\", line 3, in funcao\n    return 10 / 0\nZeroDivisionError: division by zero\n</code></pre> <p>Esta mensagem de erro possui 4 partes principais:</p> <ol> <li>Traceback: indica onde procurar o erro, mostrando a pilha de chamadas</li> <li>Localiza\u00e7\u00e3o: arquivo, n\u00famero da linha e contexto onde o erro ocorreu</li> <li>C\u00f3digo problem\u00e1tico: a linha espec\u00edfica que causou o erro</li> <li>Tipo e descri\u00e7\u00e3o do erro: nome da exce\u00e7\u00e3o e uma mensagem explicativa</li> </ol> <pre><code># Ao analisar um traceback, comece pelo final (a exce\u00e7\u00e3o espec\u00edfica)\n# Depois v\u00e1 subindo para entender como o programa chegou ao erro\n\ndef funcao3():\n    return 10 / 0\n\ndef funcao2():\n    return funcao3()\n\ndef funcao1():\n    return funcao2()\n\nfuncao1()\n# ZeroDivisionError: division by zero\n#   File \"script.py\", line 3, in funcao3\n#     return 10 / 0\n#   File \"script.py\", line 6, in funcao2\n#     return funcao3()\n#   File \"script.py\", line 9, in funcao1\n#     return funcao2()\n#   File \"script.py\", line 11, in &lt;module&gt;\n#     funcao1()\n</code></pre> <p>Dica de Depura\u00e7\u00e3o</p> <p>Quando se deparar com um erro, primeiro identifique:</p> <ol> <li>O que deu errado (tipo da exce\u00e7\u00e3o)</li> <li>Onde ocorreu (linha e arquivo)</li> <li>Por que ocorreu (entendendo o contexto)</li> </ol>"},{"location":"trilhas/python/page-8/#tratamento-de-excecoes","title":"Tratamento de Exce\u00e7\u00f5es","text":"<p>Python usa blocos <code>try-except</code> para tratar exce\u00e7\u00f5es, permitindo que o c\u00f3digo reaja adequadamente quando erros ocorrem.</p> Estrutura B\u00e1sicaCapturando Exce\u00e7\u00f5es Espec\u00edficasCapturando M\u00faltiplas Exce\u00e7\u00f5esCapturando e Analisando a Exce\u00e7\u00e3oCl\u00e1usulas else e finally <pre><code>try:\n    # C\u00f3digo que pode gerar uma exce\u00e7\u00e3o\n    resultado = 10 / 0\nexcept:\n    # C\u00f3digo executado se uma exce\u00e7\u00e3o ocorrer\n    print(\"Ocorreu um erro!\")\n</code></pre> <pre><code>try:\n    numero = int(input(\"Digite um n\u00famero: \"))\n    resultado = 10 / numero\n    print(f\"Resultado: {resultado}\")\nexcept ValueError:\n    print(\"Erro: Voc\u00ea n\u00e3o digitou um n\u00famero v\u00e1lido!\")\nexcept ZeroDivisionError:\n    print(\"Erro: N\u00e3o \u00e9 poss\u00edvel dividir por zero!\")\n</code></pre> <pre><code>try:\n    # Algum c\u00f3digo arriscado\n    arquivo = open(\"dados.txt\", \"r\")\n    linha = arquivo.readline()\n    numero = int(linha.strip())\nexcept (FileNotFoundError, IOError):\n    # Tratando erros de arquivo\n    print(\"Erro ao acessar o arquivo!\")\nexcept ValueError:\n    # Tratando erros de convers\u00e3o\n    print(\"O arquivo n\u00e3o cont\u00e9m um n\u00famero v\u00e1lido!\")\n</code></pre> <pre><code>try:\n    idade = int(input(\"Digite sua idade: \"))\n    if idade &lt; 0:\n        raise ValueError(\"A idade n\u00e3o pode ser negativa\")\nexcept ValueError as erro:\n    print(f\"Erro: {erro}\")\n    # Podemos analisar o objeto erro para decis\u00f5es mais espec\u00edficas\n    if \"negativa\" in str(erro):\n        print(\"Por favor, digite uma idade v\u00e1lida e positiva.\")\n    else:\n        print(\"Por favor, digite um n\u00famero inteiro para a idade.\")\n</code></pre> <pre><code>try:\n    arquivo = open(\"dados.txt\", \"r\")\n    conteudo = arquivo.read()\nexcept FileNotFoundError:\n    print(\"O arquivo n\u00e3o foi encontrado!\")\nelse:\n    # Executado somente se nenhuma exce\u00e7\u00e3o ocorrer\n    print(f\"Conte\u00fado do arquivo: {conteudo}\")\nfinally:\n    # Executado sempre, independentemente de exce\u00e7\u00f5es\n    print(\"Opera\u00e7\u00e3o finalizada\")\n    # Garantimos que o arquivo seja fechado mesmo se ocorrer uma exce\u00e7\u00e3o\n    if 'arquivo' in locals() and not arquivo.closed:\n        arquivo.close()\n        print(\"Arquivo fechado\")\n</code></pre>"},{"location":"trilhas/python/page-8/#criando-excecoes-personalizadas","title":"Criando Exce\u00e7\u00f5es Personalizadas","text":"<p>Voc\u00ea pode criar suas pr\u00f3prias exce\u00e7\u00f5es para situa\u00e7\u00f5es espec\u00edficas do seu programa.</p> Definindo Exce\u00e7\u00f5es Personalizadas <pre><code>class SaldoInsuficienteError(Exception):\n    \"\"\"Exce\u00e7\u00e3o levantada quando uma opera\u00e7\u00e3o excede o saldo dispon\u00edvel.\"\"\"\n    def __init__(self, saldo, valor):\n        self.saldo = saldo\n        self.valor = valor\n        self.deficit = valor - saldo\n        mensagem = f\"Saldo insuficiente: tentou sacar {valor}, mas s\u00f3 tem {saldo} dispon\u00edvel (faltam {self.deficit})\"\n        super().__init__(mensagem)\n\n# Usando a exce\u00e7\u00e3o personalizada\ndef sacar(saldo, valor):\n    if valor &gt; saldo:\n        raise SaldoInsuficienteError(saldo, valor)\n    return saldo - valor\n\ntry:\n    novo_saldo = sacar(100, 150)\nexcept SaldoInsuficienteError as e:\n    print(f\"Erro: {e}\")\n    print(f\"D\u00e9ficit: {e.deficit}\")\n</code></pre>"},{"location":"trilhas/python/page-8/#tecnicas-de-depuracao","title":"T\u00e9cnicas de Depura\u00e7\u00e3o","text":"<p>Quando o tratamento de exce\u00e7\u00f5es n\u00e3o \u00e9 suficiente, essas t\u00e9cnicas podem ajudar a identificar a causa dos problemas.</p> Depura\u00e7\u00e3o com print()Usando o Debugger Integrado (pdb)Usando logging em vez de printUsando try com Context Manager <pre><code>def calcular_media(numeros):\n    print(f\"Calculando m\u00e9dia de: {numeros}\")\n\n    total = 0\n    for i, num in enumerate(numeros):\n        print(f\"Adicionando n\u00famero {i}: {num}\")\n        total += num\n        print(f\"Total atual: {total}\")\n\n    media = total / len(numeros)\n    print(f\"M\u00e9dia calculada: {media}\")\n    return media\n\ntry:\n    resultado = calcular_media([10, 20, 30, 40])\n    print(f\"Resultado: {resultado}\")\nexcept Exception as e:\n    print(f\"Erro: {e}\")\n</code></pre> <pre><code>import pdb\n\ndef funcao_problematica(a, b):\n    resultado = a + b\n    # Inicia o debugger\n    pdb.set_trace()\n    # No console interativo que aparece, voc\u00ea pode:\n    # - Digitar vari\u00e1veis para ver seus valores\n    # - Usar n (next) para executar a pr\u00f3xima linha\n    # - Usar c (continue) para continuar at\u00e9 o pr\u00f3ximo breakpoint\n    # - Usar q (quit) para sair\n\n    resultado = resultado * 2\n    return resultado / 0  # Isso vai gerar um erro\n\nfuncao_problematica(5, 10)\n</code></pre> <pre><code>import logging\n\n# Configura\u00e7\u00e3o b\u00e1sica do logging\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    filename='app.log'  # Salva em arquivo em vez de exibir no console\n)\n\ndef dividir(a, b):\n    logging.debug(f\"Tentando dividir {a} por {b}\")\n    try:\n        resultado = a / b\n        logging.info(f\"Divis\u00e3o bem-sucedida: {resultado}\")\n        return resultado\n    except ZeroDivisionError:\n        logging.error(f\"Erro: Tentativa de divis\u00e3o por zero\")\n        return None\n\n# Os logs ser\u00e3o salvos no arquivo app.log\ndividir(10, 2)\ndividir(10, 0)\n</code></pre> <pre><code># Context managers (with) ajudam a garantir que recursos sejam liberados\n\ntry:\n    with open(\"arquivo.txt\", \"r\") as arquivo:\n        conteudo = arquivo.read()\n        # Mesmo que ocorra um erro aqui, o arquivo ser\u00e1 fechado\nexcept FileNotFoundError:\n    print(\"Arquivo n\u00e3o encontrado\")\n\n# Outro exemplo: medindo o tempo de execu\u00e7\u00e3o\nimport time\n\nclass Timer:\n    def __enter__(self):\n        self.start = time.time()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time.time()\n        self.interval = self.end - self.start\n        print(f\"Tempo de execu\u00e7\u00e3o: {self.interval:.4f} segundos\")\n\nwith Timer():\n    # C\u00f3digo a ser medido\n    sum(range(10000000))\n</code></pre>"},{"location":"trilhas/python/page-8/#boas-praticas-no-tratamento-de-erros","title":"Boas Pr\u00e1ticas no Tratamento de Erros","text":"Especificidade nas Exce\u00e7\u00f5esOrdem das Exce\u00e7\u00f5esRelan\u00e7amento de Exce\u00e7\u00f5esMensagens de Erro InformativasLimpeza de Recursos <pre><code># EVITE: capturar todas as exce\u00e7\u00f5es\ntry:\n    # C\u00f3digo arriscado\n    resultado = int(\"texto\")\nexcept:  # Muito gen\u00e9rico!\n    print(\"Erro\")\n\n# MELHOR: capturar exce\u00e7\u00f5es espec\u00edficas\ntry:\n    resultado = int(\"texto\")\nexcept ValueError:\n    print(\"N\u00e3o foi poss\u00edvel converter para n\u00famero\")\n</code></pre> <pre><code># ERRADO: subclasse depois da classe pai\ntry:\n    # Algum c\u00f3digo\n    pass\nexcept Exception:  # Captura todas as exce\u00e7\u00f5es\n    print(\"Erro gen\u00e9rico\")\nexcept ValueError:  # Nunca ser\u00e1 alcan\u00e7ado!\n    print(\"Erro de valor\")\n\n# CORRETO: exce\u00e7\u00f5es mais espec\u00edficas primeiro\ntry:\n    # Algum c\u00f3digo\n    pass\nexcept ValueError:  # Exce\u00e7\u00e3o espec\u00edfica\n    print(\"Erro de valor\")\nexcept Exception:  # Exce\u00e7\u00e3o gen\u00e9rica para outros casos\n    print(\"Outro tipo de erro\")\n</code></pre> <pre><code>def processar_dados(dados):\n    try:\n        # Tentar processar os dados\n        resultado = dados[0] / dados[1]\n        return resultado\n    except ZeroDivisionError:\n        # Tratar especificamente divis\u00e3o por zero\n        print(\"Erro: Divis\u00e3o por zero n\u00e3o permitida\")\n        raise  # Relan\u00e7a a mesma exce\u00e7\u00e3o\n    except Exception as e:\n        # Registra o erro e lan\u00e7a uma exce\u00e7\u00e3o mais informativa\n        print(f\"Erro ao processar dados: {e}\")\n        raise RuntimeError(f\"Falha no processamento dos dados: {e}\") from e\n</code></pre> <pre><code>def validar_idade(idade):\n    try:\n        idade = int(idade)\n        if idade &lt; 0:\n            raise ValueError(\"A idade n\u00e3o pode ser negativa\")\n        if idade &gt; 150:\n            raise ValueError(\"A idade parece muito alta, verifique o valor\")\n        return idade\n    except ValueError as e:\n        # Se o erro for da nossa valida\u00e7\u00e3o, j\u00e1 tem mensagem informativa\n        # Se for do int(), adicionamos contexto\n        if \"invalid literal\" in str(e):\n            raise ValueError(f\"'{idade}' n\u00e3o \u00e9 um n\u00famero v\u00e1lido\") from e\n        else:\n            raise  # Relan\u00e7a a nossa exce\u00e7\u00e3o com mensagem personalizada\n</code></pre> <pre><code>def processar_arquivo(nome_arquivo):\n    arquivo = None\n    try:\n        arquivo = open(nome_arquivo, 'r')\n        # Processar arquivo\n        return arquivo.read()\n    except FileNotFoundError:\n        print(f\"O arquivo '{nome_arquivo}' n\u00e3o foi encontrado.\")\n        return None\n    finally:\n        # Garantir que o arquivo seja fechado mesmo com erro\n        if arquivo:\n            arquivo.close()\n            print(\"Arquivo fechado com sucesso\")\n\n# Melhor ainda: usar context manager (with)\ndef processar_arquivo_seguro(nome_arquivo):\n    try:\n        with open(nome_arquivo, 'r') as arquivo:\n            return arquivo.read()\n    except FileNotFoundError:\n        print(f\"O arquivo '{nome_arquivo}' n\u00e3o foi encontrado.\")\n        return None\n</code></pre>"},{"location":"trilhas/python/page-8/#depuracao-de-codigo-assincrono","title":"Depura\u00e7\u00e3o de C\u00f3digo Ass\u00edncrono","text":"<p>A depura\u00e7\u00e3o de c\u00f3digo ass\u00edncrono apresenta desafios adicionais.</p> Tratamento de Exce\u00e7\u00f5es em AsyncExce\u00e7\u00f5es em M\u00faltiplas Tasks <pre><code>import asyncio\n\nasync def tarefa_arriscada():\n    # Simulando uma tarefa que pode falhar\n    await asyncio.sleep(1)\n    raise ValueError(\"Erro na tarefa ass\u00edncrona\")\n\nasync def main():\n    try:\n        await tarefa_arriscada()\n    except ValueError as e:\n        print(f\"Capturei um erro ass\u00edncrono: {e}\")\n\n# Executando o c\u00f3digo ass\u00edncrono\nasyncio.run(main())\n</code></pre> <pre><code>import asyncio\n\nasync def tarefa_1():\n    await asyncio.sleep(1)\n    raise ValueError(\"Erro na tarefa 1\")\n\nasync def tarefa_2():\n    await asyncio.sleep(2)\n    return \"Tarefa 2 conclu\u00edda\"\n\nasync def main():\n    # gather() propaga exce\u00e7\u00f5es por padr\u00e3o\n    try:\n        resultados = await asyncio.gather(\n            tarefa_1(),\n            tarefa_2(),\n            return_exceptions=True  # Isso captura exce\u00e7\u00f5es como resultados\n        )\n\n        for i, resultado in enumerate(resultados):\n            if isinstance(resultado, Exception):\n                print(f\"Tarefa {i+1} falhou com: {resultado}\")\n            else:\n                print(f\"Tarefa {i+1} retornou: {resultado}\")\n\n    except Exception as e:\n        print(f\"Uma exce\u00e7\u00e3o n\u00e3o capturada: {e}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"trilhas/python/page-8/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>Tipos de erros em Python: erros de sintaxe e exce\u00e7\u00f5es</li> <li>Exce\u00e7\u00f5es comuns e como interpret\u00e1-las</li> <li>Tratamento de exce\u00e7\u00f5es com blocos <code>try-except</code></li> <li>Cl\u00e1usulas adicionais como <code>else</code> e <code>finally</code></li> <li>Exce\u00e7\u00f5es personalizadas para situa\u00e7\u00f5es espec\u00edficas</li> <li>T\u00e9cnicas de depura\u00e7\u00e3o para identificar problemas</li> <li>Boas pr\u00e1ticas para escrever c\u00f3digo robusto e tratamento adequado de erros</li> <li>Depura\u00e7\u00e3o de c\u00f3digo ass\u00edncrono</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre exce\u00e7\u00f5es</li> <li>Hierarquia de exce\u00e7\u00f5es embutidas</li> <li>Documenta\u00e7\u00e3o sobre o m\u00f3dulo logging</li> <li>Documenta\u00e7\u00e3o sobre pdb (Python Debugger)</li> </ul>"},{"location":"trilhas/python/page-8/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos como trabalhar com m\u00f3dulos em Python, que permitem organizar c\u00f3digo em componentes reutiliz\u00e1veis.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Express\u00f5es Lambdas e Fun\u00e7\u00f5es Integradas</p>"},{"location":"trilhas/python/page-9/","title":"Trabalhando com M\u00f3dulos","text":""},{"location":"trilhas/python/page-9/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>M\u00f3dulos s\u00e3o arquivos Python contendo c\u00f3digo reutiliz\u00e1vel - fun\u00e7\u00f5es, classes e vari\u00e1veis - que podem ser importados e utilizados em outros programas. Eles s\u00e3o fundamentais para organizar c\u00f3digo, promover reutiliza\u00e7\u00e3o e evitar conflitos de nomes em projetos grandes.</p> <p>Objetivos de Aprendizado</p> <ul> <li>Entender o conceito e import\u00e2ncia de m\u00f3dulos em Python</li> <li>Aprender a criar e importar m\u00f3dulos personalizados</li> <li>Explorar diferentes formas de importa\u00e7\u00e3o</li> <li>Conhecer os m\u00f3dulos mais \u00fateis da biblioteca padr\u00e3o</li> <li>Compreender namespaces e escopo em m\u00f3dulos</li> <li>Gerenciar pacotes com o sistema de pacotes do Python</li> </ul>"},{"location":"trilhas/python/page-9/#conceitos-basicos-de-modulos","title":"Conceitos B\u00e1sicos de M\u00f3dulos","text":"O que s\u00e3o M\u00f3dulosImportando M\u00f3dulosImportando com AliasImportando Itens Espec\u00edficos <pre><code># Um m\u00f3dulo \u00e9 simplesmente um arquivo .py\n# Ele pode conter defini\u00e7\u00f5es de fun\u00e7\u00f5es, classes e vari\u00e1veis\n# Tamb\u00e9m pode incluir c\u00f3digo execut\u00e1vel\n\n# Exemplo - arquivo matematica.py\ndef somar(a, b):\n    return a + b\n\ndef subtrair(a, b):\n    return a - b\n\nPI = 3.14159\n\n# Este c\u00f3digo ser\u00e1 executado quando o m\u00f3dulo for importado\nprint(\"M\u00f3dulo matem\u00e1tica importado!\")\n</code></pre> <pre><code># Importando um m\u00f3dulo\nimport matematica\n\n# Usando fun\u00e7\u00f5es do m\u00f3dulo\nresultado1 = matematica.somar(10, 5)\nresultado2 = matematica.subtrair(10, 5)\n\nprint(f\"Soma: {resultado1}\")       # Soma: 15\nprint(f\"Subtra\u00e7\u00e3o: {resultado2}\")  # Subtra\u00e7\u00e3o: 5\nprint(f\"PI: {matematica.PI}\")      # PI: 3.14159\n</code></pre> <pre><code># Importando um m\u00f3dulo com um alias (apelido)\nimport matematica as math\n\n# Agora usamos o alias em vez do nome completo\nresultado = math.somar(10, 5)\nprint(f\"Soma: {resultado}\")  # Soma: 15\n</code></pre> <pre><code># Importando apenas fun\u00e7\u00f5es ou vari\u00e1veis espec\u00edficas\nfrom matematica import somar, PI\n\n# Agora podemos usar diretamente, sem o prefixo do m\u00f3dulo\nresultado = somar(10, 5)\nprint(f\"Soma: {resultado}\")  # Soma: 15\nprint(f\"PI: {PI}\")           # PI: 3.14159\n\n# Importando tudo de um m\u00f3dulo (n\u00e3o recomendado em geral)\nfrom matematica import *\n\n# Agora todas as fun\u00e7\u00f5es e vari\u00e1veis est\u00e3o dispon\u00edveis diretamente\n# Mas isso pode causar conflitos de nomes inesperados\n</code></pre>"},{"location":"trilhas/python/page-9/#criando-modulos-personalizados","title":"Criando M\u00f3dulos Personalizados","text":"<p>Vamos aprender a criar e organizar nossos pr\u00f3prios m\u00f3dulos.</p> Estrutura B\u00e1sicaUsando o M\u00f3duloM\u00f3dulo como Script <pre><code># Arquivo: utils.py\n\n\"\"\"M\u00f3dulo de fun\u00e7\u00f5es utilit\u00e1rias.\n\nEste m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es auxiliares para manipula\u00e7\u00e3o de texto e n\u00fameros.\n\"\"\"\n\n# Vari\u00e1veis do m\u00f3dulo\nVERSAO = \"1.0.0\"\nAUTOR = \"Seu Nome\"\n\n# Fun\u00e7\u00f5es\ndef formatar_nome(nome):\n    \"\"\"Formata um nome para ter iniciais mai\u00fasculas.\"\"\"\n    return nome.title()\n\ndef calcular_media(numeros):\n    \"\"\"Calcula a m\u00e9dia de uma lista de n\u00fameros.\"\"\"\n    return sum(numeros) / len(numeros)\n\n# Classe\nclass Contador:\n    \"\"\"Uma classe simples para contagem.\"\"\"\n    def __init__(self, valor_inicial=0):\n        self.valor = valor_inicial\n\n    def incrementar(self, incremento=1):\n        self.valor += incremento\n        return self.valor\n</code></pre> <pre><code># Importando o m\u00f3dulo que criamos\nimport utils\n\n# Usando as fun\u00e7\u00f5es\nnome = utils.formatar_nome(\"jos\u00e9 da silva\")\nprint(nome)  # Jos\u00e9 Da Silva\n\nmedia = utils.calcular_media([10, 20, 30, 40])\nprint(f\"M\u00e9dia: {media}\")  # M\u00e9dia: 25.0\n\n# Criando uma inst\u00e2ncia da classe\ncontador = utils.Contador(10)\ncontador.incrementar(5)\nprint(f\"Contador: {contador.valor}\")  # Contador: 15\n\n# Acessando vari\u00e1veis do m\u00f3dulo\nprint(f\"Vers\u00e3o: {utils.VERSAO}\")  # Vers\u00e3o: 1.0.0\nprint(f\"Autor: {utils.AUTOR}\")    # Autor: Seu Nome\n</code></pre> <pre><code># Os m\u00f3dulos tamb\u00e9m podem ser executados diretamente como scripts\n# Arquivo: conversor.py\n\ndef celsius_para_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ndef fahrenheit_para_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5/9\n\nif __name__ == \"__main__\":\n    # Este c\u00f3digo s\u00f3 \u00e9 executado quando o arquivo \u00e9 rodado diretamente\n    # n\u00e3o quando ele \u00e9 importado como m\u00f3dulo\n    print(\"Conversor de temperatura\")\n    temp_c = float(input(\"Digite a temperatura em Celsius: \"))\n    temp_f = celsius_para_fahrenheit(temp_c)\n    print(f\"{temp_c}\u00b0C equivale a {temp_f:.1f}\u00b0F\")\n</code></pre> <p>O bloco <code>if __name__ == \\\"__main__\\\":</code></p> <p>Quando um m\u00f3dulo \u00e9 executado diretamente (como um script), a vari\u00e1vel especial <code>__name__</code> tem o valor <code>\"__main__\"</code>. Quando o mesmo arquivo \u00e9 importado como um m\u00f3dulo, <code>__name__</code> cont\u00e9m o nome do m\u00f3dulo.</p> <p>Isso permite que voc\u00ea crie c\u00f3digo que se comporta diferentemente quando importado versus quando executado diretamente.</p>"},{"location":"trilhas/python/page-9/#namespaces-e-escopo","title":"Namespaces e Escopo","text":"<p>M\u00f3dulos ajudam a organizar o c\u00f3digo em namespaces separados, evitando conflitos de nomes.</p> NamespacesVari\u00e1veis Especiais <pre><code># Arquivo: geometria.py\ndef calcular_area(base, altura):\n    return base * altura\n\n# Arquivo: estatistica.py\ndef calcular_media(valores):\n    return sum(valores) / len(valores)\n\n# Arquivo: principal.py\nimport geometria\nimport estatistica\n\n# Mesmo que ambos os m\u00f3dulos tenham fun\u00e7\u00f5es com nomes diferentes,\n# elas est\u00e3o em namespaces separados\narea = geometria.calcular_area(5, 10)\nmedia = estatistica.calcular_media([10, 20, 30])\n\nprint(f\"\u00c1rea: {area}\")        # \u00c1rea: 50\nprint(f\"M\u00e9dia: {media}\")      # M\u00e9dia: 20.0\n</code></pre> <pre><code># Todo m\u00f3dulo tem vari\u00e1veis especiais\n\n# __name__: nome do m\u00f3dulo ou \"__main__\" se executado diretamente\n# __file__: caminho completo para o arquivo do m\u00f3dulo\n# __doc__: docstring do m\u00f3dulo\n\n# Arquivo: info_modulo.py\n\"\"\"Este \u00e9 um m\u00f3dulo de exemplo para demonstrar vari\u00e1veis especiais.\"\"\"\n\ndef mostrar_info():\n    print(f\"Nome do m\u00f3dulo: {__name__}\")\n    print(f\"Arquivo: {__file__}\")\n    print(f\"Docstring: {__doc__}\")\n\nif __name__ == \"__main__\":\n    mostrar_info()\n</code></pre>"},{"location":"trilhas/python/page-9/#organizacao-em-pacotes","title":"Organiza\u00e7\u00e3o em Pacotes","text":"<p>Pacotes s\u00e3o diret\u00f3rios que cont\u00eam m\u00faltiplos m\u00f3dulos, permitindo uma organiza\u00e7\u00e3o hier\u00e1rquica.</p> Estrutura de um PacoteArquivo init.pyImportando de Pacotes <pre><code>meu_pacote/\n\u251c\u2500\u2500 __init__.py          # Torna o diret\u00f3rio um pacote Python\n\u251c\u2500\u2500 modulo1.py\n\u251c\u2500\u2500 modulo2.py\n\u2514\u2500\u2500 subpacote/\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 modulo3.py\n</code></pre> <pre><code># meu_pacote/__init__.py\n\"\"\"Pacote de exemplo com fun\u00e7\u00f5es \u00fateis.\"\"\"\n\n# Podemos definir o que ser\u00e1 importado quando algu\u00e9m fizer:\n# from meu_pacote import *\n__all__ = ['modulo1', 'modulo2']\n\n# Tamb\u00e9m podemos importar e expor fun\u00e7\u00f5es espec\u00edficas de subm\u00f3dulos\nfrom .modulo1 import funcao_util\nfrom .modulo2 import CONSTANTE\n\n# Definir vari\u00e1veis de n\u00edvel de pacote\nVERSAO = '1.0.0'\n</code></pre> <pre><code># Importando m\u00f3dulos de um pacote\nimport meu_pacote.modulo1\nfrom meu_pacote import modulo2\nfrom meu_pacote.subpacote import modulo3\n\n# Usando fun\u00e7\u00f5es espec\u00edficas\nmeu_pacote.modulo1.funcao_a()\nmodulo2.funcao_b()\n\n# Importando fun\u00e7\u00f5es espec\u00edficas\nfrom meu_pacote.modulo1 import funcao_a\nfrom meu_pacote.subpacote.modulo3 import funcao_c\n\n# Usando as fun\u00e7\u00f5es diretamente\nfuncao_a()\nfuncao_c()\n</code></pre>"},{"location":"trilhas/python/page-9/#modulos-da-biblioteca-padrao","title":"M\u00f3dulos da Biblioteca Padr\u00e3o","text":"<p>Python vem com uma vasta biblioteca padr\u00e3o. Vamos explorar alguns dos m\u00f3dulos mais \u00fateis.</p> mathrandomdatetimeos e sysjson e csv <pre><code>import math\n\n# Constantes\nprint(math.pi)       # 3.141592653589793\nprint(math.e)        # 2.718281828459045\n\n# Fun\u00e7\u00f5es matem\u00e1ticas\nprint(math.sqrt(16))         # 4.0 (raiz quadrada)\nprint(math.log10(100))       # 2.0 (logaritmo base 10)\nprint(math.sin(math.radians(90)))  # 1.0 (seno de 90 graus)\nprint(math.ceil(4.2))        # 5 (arredondamento para cima)\nprint(math.floor(4.8))       # 4 (arredondamento para baixo)\nprint(math.gcd(12, 8))       # 4 (maior divisor comum)\n</code></pre> <pre><code>import random\n\n# N\u00fameros aleat\u00f3rios\nprint(random.random())       # N\u00famero entre 0.0 e 1.0\nprint(random.uniform(1, 10)) # N\u00famero decimal entre 1 e 10\nprint(random.randint(1, 10)) # Inteiro entre 1 e 10\n\n# Sele\u00e7\u00f5es aleat\u00f3rias\nlista = [\"ma\u00e7\u00e3\", \"banana\", \"laranja\", \"uva\"]\nprint(random.choice(lista))            # Um item aleat\u00f3rio\nprint(random.sample(lista, 2))         # Lista de 2 itens sem repeti\u00e7\u00e3o\nprint(random.choices(lista, k=3))      # Lista de 3 itens com poss\u00edvel repeti\u00e7\u00e3o\n\n# Embaralhando uma lista\nnumeros = [1, 2, 3, 4, 5]\nrandom.shuffle(numeros)\nprint(numeros)  # Lista embaralhada\n</code></pre> <pre><code>from datetime import datetime, date, time, timedelta\n\n# Data e hora atual\nagora = datetime.now()\nprint(agora)  # 2023-05-10 15:30:45.123456\n\n# Criando objetos de data e hora\nd = date(2023, 5, 10)\nt = time(15, 30, 45)\ndt = datetime(2023, 5, 10, 15, 30, 45)\n\nprint(d)  # 2023-05-10\nprint(t)  # 15:30:45\n\n# Formatando data e hora\nprint(dt.strftime(\"%d/%m/%Y %H:%M\"))  # 10/05/2023 15:30\n\n# Convertendo string para data/hora\ndata_str = \"21/07/2022\"\ndata_convertida = datetime.strptime(data_str, \"%d/%m/%Y\")\nprint(data_convertida)  # 2022-07-21 00:00:00\n\n# Opera\u00e7\u00f5es com datas\namanha = agora + timedelta(days=1)\numa_semana_atras = agora - timedelta(days=7)\nprint(f\"Amanh\u00e3: {amanha.date()}\")\nprint(f\"Uma semana atr\u00e1s: {uma_semana_atras.date()}\")\n</code></pre> <pre><code>import os\nimport sys\n\n# Informa\u00e7\u00f5es do sistema\nprint(sys.platform)        # Ex: 'linux', 'win32', 'darwin'\nprint(sys.version)         # Vers\u00e3o do Python\n\n# Argumentos de linha de comando\nprint(sys.argv)            # Lista de argumentos (incluindo o nome do script)\n\n# Vari\u00e1veis de ambiente\nprint(os.environ.get('HOME'))     # Diret\u00f3rio home do usu\u00e1rio\nprint(os.environ.get('PATH'))     # Vari\u00e1vel PATH\n\n# Manipula\u00e7\u00e3o de caminhos\ncaminho = os.path.join('pasta', 'subpasta', 'arquivo.txt')\nprint(caminho)  # 'pasta/subpasta/arquivo.txt' (adaptado ao sistema)\n\n# Verificando arquivos e diret\u00f3rios\nprint(os.path.exists('arquivo.txt'))      # Verifica se existe\nprint(os.path.isfile('arquivo.txt'))      # Verifica se \u00e9 arquivo\nprint(os.path.isdir('diretorio'))         # Verifica se \u00e9 diret\u00f3rio\n\n# Listar conte\u00fado de um diret\u00f3rio\nprint(os.listdir('.'))     # Lista arquivos no diret\u00f3rio atual\n\n# Criar e remover diret\u00f3rios\nos.makedirs('nova_pasta/subpasta', exist_ok=True)  # Cria diret\u00f3rio\nos.rmdir('pasta_vazia')      # Remove diret\u00f3rio vazio\n</code></pre> <pre><code>import json\nimport csv\n\n# Trabalhando com JSON\ndados = {\n    \"nome\": \"Jo\u00e3o\",\n    \"idade\": 30,\n    \"cidades\": [\"S\u00e3o Paulo\", \"Rio de Janeiro\"]\n}\n\n# Convertendo para string JSON\njson_str = json.dumps(dados, indent=4)\nprint(json_str)\n\n# Escrevendo para arquivo\nwith open('dados.json', 'w') as arquivo:\n    json.dump(dados, arquivo, indent=4)\n\n# Lendo de string\ndados_carregados = json.loads(json_str)\nprint(dados_carregados[\"nome\"])  # Jo\u00e3o\n\n# Lendo de arquivo\nwith open('dados.json', 'r') as arquivo:\n    dados_do_arquivo = json.load(arquivo)\n\n# Trabalhando com CSV\n# Escrevendo em CSV\nwith open('dados.csv', 'w', newline='') as arquivo:\n    escritor = csv.writer(arquivo)\n    escritor.writerow([\"Nome\", \"Idade\", \"Cidade\"])\n    escritor.writerow([\"Jo\u00e3o\", 30, \"S\u00e3o Paulo\"])\n    escritor.writerow([\"Maria\", 25, \"Rio de Janeiro\"])\n\n# Lendo de CSV\nwith open('dados.csv', 'r') as arquivo:\n    leitor = csv.reader(arquivo)\n    for linha in leitor:\n        print(linha)\n\n# Usando DictReader e DictWriter\nwith open('dados.csv', 'r') as arquivo:\n    leitor = csv.DictReader(arquivo)\n    for linha in leitor:\n        print(f\"{linha['Nome']} tem {linha['Idade']} anos\")\n</code></pre>"},{"location":"trilhas/python/page-9/#instalando-e-gerenciando-pacotes","title":"Instalando e Gerenciando Pacotes","text":"<p>Python tem um sistema de pacotes rico, permitindo instalar m\u00f3dulos externos.</p> pipAmbientes VirtuaisUsando Pacotes Instalados <pre><code># pip \u00e9 o gerenciador de pacotes padr\u00e3o do Python\n\n# Instalando um pacote\npip install requests\n\n# Instalando vers\u00e3o espec\u00edfica\npip install requests==2.25.1\n\n# Instalando m\u00faltiplos pacotes\npip install requests pandas matplotlib\n\n# Instalando de um arquivo requirements.txt\npip install -r requirements.txt\n\n# Listando pacotes instalados\npip list\n\n# Atualizando um pacote\npip install --upgrade requests\n\n# Desinstalando um pacote\npip uninstall requests\n</code></pre> <pre><code># Os ambientes virtuais isolam depend\u00eancias para diferentes projetos\n\n# Criando um ambiente virtual\npython -m venv meu_ambiente\n\n# Ativando o ambiente virtual\n# No Windows:\nmeu_ambiente\\Scripts\\activate\n\n# No Linux/Mac:\nsource meu_ambiente/bin/activate\n\n# Desativando o ambiente\ndeactivate\n\n# Dentro do ambiente, voc\u00ea pode instalar pacotes normalmente\npip install requests\n</code></pre> <pre><code># Depois de instalar o pacote 'requests'\nimport requests\n\n# Fazendo uma requisi\u00e7\u00e3o HTTP\nresposta = requests.get('https://api.github.com/events')\n\n# Verificando o status da resposta\nprint(f\"Status code: {resposta.status_code}\")\n\n# Acessando o conte\u00fado como JSON\nif resposta.status_code == 200:\n    dados = resposta.json()\n    print(f\"N\u00famero de eventos: {len(dados)}\")\n</code></pre>"},{"location":"trilhas/python/page-9/#criando-pacotes-distribuiveis","title":"Criando Pacotes Distribu\u00edveis","text":"<p>Voc\u00ea pode criar seus pr\u00f3prios pacotes para distribui\u00e7\u00e3o.</p> Estrutura de Projetopyproject.tomlCriando a Distribui\u00e7\u00e3o <pre><code>meu_projeto/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 meu_pacote/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 modulo1.py\n\u2502       \u2514\u2500\u2500 modulo2.py\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_meu_pacote.py\n\u2514\u2500\u2500 docs/\n    \u2514\u2500\u2500 index.md\n</code></pre> <pre><code>[build-system]\nrequires = [\"setuptools&gt;=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"meu-pacote\"\nversion = \"0.1.0\"\ndescription = \"Descri\u00e7\u00e3o do meu pacote\"\nreadme = \"README.md\"\nauthors = [{name = \"Seu Nome\", email = \"seu_email@exemplo.com\"}]\nlicense = {text = \"MIT\"}\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\nrequires-python = \"&gt;=3.7\"\ndependencies = [\n    \"requests&gt;=2.25.0\",\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/seu-usuario/meu-pacote\"\n\"Bug Tracker\" = \"https://github.com/seu-usuario/meu-pacote/issues\"\n</code></pre> <pre><code># Instalando ferramentas de build\npip install build\n\n# Criando a distribui\u00e7\u00e3o (wheel e source)\npython -m build\n\n# O resultado estar\u00e1 em dist/\n# - meu_pacote-0.1.0-py3-none-any.whl (formato wheel)\n# - meu_pacote-0.1.0.tar.gz (formato source)\n\n# Instalando localmente para testes\npip install dist/meu_pacote-0.1.0-py3-none-any.whl\n\n# Publicando no PyPI (Python Package Index)\npip install twine\ntwine upload dist/*\n</code></pre>"},{"location":"trilhas/python/page-9/#boas-praticas","title":"Boas Pr\u00e1ticas","text":"Organiza\u00e7\u00e3o de C\u00f3digoImporta\u00e7\u00f5esArquivos init.py <pre><code># Estrutura recomendada para m\u00f3dulos\n\n\"\"\"Docstring do m\u00f3dulo - descreva o prop\u00f3sito do m\u00f3dulo aqui.\"\"\"\n\n# Imports da biblioteca padr\u00e3o\nimport os\nimport sys\n\n# Imports de pacotes de terceiros\nimport requests\n\n# Imports de m\u00f3dulos locais\nfrom .utils import helper\n\n# Constantes globais\nMAX_TAMANHO = 100\nNOME_PADRAO = \"exemplo\"\n\n# Classes\nclass MinhaClasse:\n    \"\"\"Docstring da classe.\"\"\"\n    pass\n\n# Fun\u00e7\u00f5es\ndef minha_funcao():\n    \"\"\"Docstring da fun\u00e7\u00e3o.\"\"\"\n    pass\n\n# C\u00f3digo para execu\u00e7\u00e3o direta\nif __name__ == \"__main__\":\n    minha_funcao()\n</code></pre> <pre><code># Recomendado\nimport math\nimport os.path  # Subm\u00f3dulo espec\u00edfico\nfrom datetime import datetime\n\n# N\u00e3o recomendado (exceto em casos espec\u00edficos)\nfrom math import *  # Importa tudo, pode causar conflitos\n\n# OK para m\u00f3dulos que s\u00e3o projetados para isso\nfrom numpy import *  # numpy \u00e9 projetado para uso com wildcard import\n\n# Imports relativos (dentro de um pacote)\nfrom . import modulo_irmao       # M\u00f3dulo no mesmo pacote\nfrom .subpacote import modulo    # M\u00f3dulo em um subpacote\nfrom .. import modulo_pai        # M\u00f3dulo no pacote pai\n</code></pre> <pre><code># meu_pacote/__init__.py\n\n\"\"\"\nMeu Pacote - Descri\u00e7\u00e3o curta do pacote.\n\nDescri\u00e7\u00e3o mais detalhada que pode ocupar\nm\u00faltiplas linhas sobre o pacote.\n\"\"\"\n\n# Definir vers\u00e3o do pacote\n__version__ = '0.1.0'\n\n# Expor classes/fun\u00e7\u00f5es p\u00fablicas para uso direto\nfrom .modulo1 import FuncaoUtil, ClasseImportante\nfrom .modulo2 import CONSTANTE_GLOBAL\n\n# Definir __all__ para controlar 'from pacote import *'\n__all__ = [\n    'FuncaoUtil',\n    'ClasseImportante',\n    'CONSTANTE_GLOBAL',\n]\n</code></pre>"},{"location":"trilhas/python/page-9/#exercicios-praticos","title":"Exerc\u00edcios Pr\u00e1ticos","text":"Exerc\u00edcio 1: Criando um M\u00f3duloExerc\u00edcio 2: M\u00f3dulo de UtilidadesExerc\u00edcio 3: Pacote Simples <p>Crie um m\u00f3dulo chamado <code>calculadora.py</code> com as seguintes fun\u00e7\u00f5es:</p> <ul> <li><code>somar(a, b)</code>: retorna a soma de dois n\u00fameros</li> <li><code>subtrair(a, b)</code>: retorna a subtra\u00e7\u00e3o de dois n\u00fameros</li> <li><code>multiplicar(a, b)</code>: retorna a multiplica\u00e7\u00e3o de dois n\u00fameros</li> <li><code>dividir(a, b)</code>: retorna a divis\u00e3o de dois n\u00fameros, tratando divis\u00e3o por zero</li> </ul> <p>Depois, crie um arquivo <code>main.py</code> que importa e usa essas fun\u00e7\u00f5es.</p> <p>Crie um m\u00f3dulo <code>utils.py</code> com as seguintes funcionalidades:</p> <ul> <li>Uma fun\u00e7\u00e3o <code>validar_email(email)</code> que verifica se um email \u00e9 v\u00e1lido</li> <li>Uma fun\u00e7\u00e3o <code>formatar_cpf(cpf)</code> que formata um CPF como XXX.XXX.XXX-XX</li> <li>Uma constante <code>VERSAO</code> com o valor '1.0.0'</li> </ul> <p>Importe e use essas funcionalidades em um arquivo de teste.</p> <p>Crie um pacote chamado <code>geometria</code> com a seguinte estrutura:</p> <pre><code>geometria/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 retangulo.py  (\u00e1rea, per\u00edmetro)\n\u251c\u2500\u2500 circulo.py    (\u00e1rea, circunfer\u00eancia)\n\u2514\u2500\u2500 triangulo.py  (\u00e1rea pelo m\u00e9todo de Heron)\n</code></pre> <p>Cada m\u00f3dulo deve ter fun\u00e7\u00f5es apropriadas para calcular \u00e1reas e outras propriedades. No arquivo <code>__init__.py</code>, importe e exponha as fun\u00e7\u00f5es principais.</p>"},{"location":"trilhas/python/page-9/#resumo","title":"Resumo","text":"<p>Nesta aula, voc\u00ea aprendeu sobre:</p> <ul> <li>M\u00f3dulos em Python e como eles organizam o c\u00f3digo</li> <li>Como criar e importar seus pr\u00f3prios m\u00f3dulos</li> <li>Diferentes t\u00e9cnicas de importa\u00e7\u00e3o (<code>import</code>, <code>from...import</code>, aliases)</li> <li>A import\u00e2ncia de <code>__name__ == \"__main__\"</code> para m\u00f3dulos execut\u00e1veis</li> <li>Cria\u00e7\u00e3o e organiza\u00e7\u00e3o de pacotes Python</li> <li>Os principais m\u00f3dulos da biblioteca padr\u00e3o</li> <li>Como instalar e gerenciar pacotes externos com pip</li> <li>Boas pr\u00e1ticas para organiza\u00e7\u00e3o de c\u00f3digo em m\u00f3dulos e pacotes</li> </ul> <p>Recursos de aprendizado</p> <ul> <li>Documenta\u00e7\u00e3o oficial sobre m\u00f3dulos</li> <li>Guia do Python Packaging Authority</li> <li>\u00cdndice de Pacotes Python (PyPI)</li> <li>Biblioteca Padr\u00e3o Python</li> </ul>"},{"location":"trilhas/python/page-9/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Na pr\u00f3xima aula, exploraremos como trabalhar com arquivos em Python, incluindo leitura, escrita e manipula\u00e7\u00e3o de diferentes formatos.</p> <p>Avance para a pr\u00f3xima aula \u2192</p> <p>\u2190 Voltar para Debugging e Tratamento de Erros</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/institucional/","title":"Institucional","text":""},{"location":"blog/category/tutoriais/","title":"Tutoriais","text":""},{"location":"blog/category/curiosidade/","title":"Curiosidade","text":""},{"location":"blog/category/projetos/","title":"Projetos","text":""},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"blog/category/institucional/page/2/","title":"Institucional","text":""}]}